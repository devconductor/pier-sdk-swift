//
// EmprestimoPessoalResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Resposta do recurso de simular empr\u00C3\u00A9stimos/financiamentos */
public class EmprestimoPessoalResponse: JSONEncodable {

    public var planosParcelamentos: [PlanoParcelamentoEmprestimoResponse]?
    /** Valor solicitado do empr\u00C3\u00A9stimo/financiamento */
    public var valorSolicitado: Double?
    /** Valor m\u00C3\u00A1ximo de empr\u00C3\u00A9stimo pelo valor limite de parcela */
    public var valorMaximoSolicitacao: Double?
    /** N\u00C3\u00BAmero de parcelas solicitado */
    public var numeroParcelas: Int?
    /** Limite m\u00C3\u00A1ximo de parcela permitido */
    public var valorMaximoParcela: Double?
    /** Data do desconto da primeira parcela */
    public var dataPrimeiraParcela: String?
    /** Per\u00C3\u00ADodo de aplica da taxa de juros */
    public var periodoTaxa: String?
    /** Sistema para amortiza\u00C3\u00A7\u00C3\u00A3o do valor das parcelas */
    public var sistemaAmortizacao: String?
    /** Valor percentual da taxa de juros a ser aplicada */
    public var taxaJuros: Double?
    

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["planosParcelamentos"] = self.planosParcelamentos?.encodeToJSON()
        nillableDictionary["valorSolicitado"] = self.valorSolicitado
        nillableDictionary["valorMaximoSolicitacao"] = self.valorMaximoSolicitacao
        nillableDictionary["numeroParcelas"] = self.numeroParcelas
        nillableDictionary["valorMaximoParcela"] = self.valorMaximoParcela
        nillableDictionary["dataPrimeiraParcela"] = self.dataPrimeiraParcela
        nillableDictionary["periodoTaxa"] = self.periodoTaxa
        nillableDictionary["sistemaAmortizacao"] = self.sistemaAmortizacao
        nillableDictionary["taxaJuros"] = self.taxaJuros
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
