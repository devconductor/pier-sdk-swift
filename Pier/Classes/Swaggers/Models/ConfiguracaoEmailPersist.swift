//
// ConfiguracaoEmailPersist.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Representa\u00C3\u00A7\u00C3\u00A3o da requisi\u00C3\u00A7\u00C3\u00A3o do recurso Configura\u00C3\u00A7\u00C3\u00A3o Email */
public class ConfiguracaoEmailPersist: JSONEncodable {

    /** IP (Host) do servidor de e-mail. */
    public var host: String?
    /** Porta usada pelo servidor de e-mail. */
    public var port: String?
    /** Porta usada pelo servi\u00C3\u00A7o TLS/STARTTLS. */
    public var portTLSSTARTTLS: String?
    /** Porta usada pelo servi\u00C3\u00A7o SSL. */
    public var portSSL: String?
    /** Protocolo de comunica\u00C3\u00A7\u00C3\u00A3o usado pelo servi\u00C3\u00A7o de e-mail. */
    public var protocolo: String?
    /** O servi\u00C3\u00A7o de e-mail requer autentica\u00C3\u00A7\u00C3\u00A3o. */
    public var requerAutenticacao: Bool?
    /** O servi\u00C3\u00A7o de e-mail requer SSL. */
    public var requerSSL: Bool?
    /** O servi\u00C3\u00A7o de e-mail requer TLS. */
    public var requerTLS: Bool?
    /** Usuario do servi\u00C3\u00A7o de e-mail. */
    public var usuario: String?
    /** Senha de usu\u00C3\u00A1rio do servi\u00C3\u00A7o de e-mail. */
    public var senha: String?
    

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["host"] = self.host
        nillableDictionary["port"] = self.port
        nillableDictionary["portTLSSTARTTLS"] = self.portTLSSTARTTLS
        nillableDictionary["portSSL"] = self.portSSL
        nillableDictionary["protocolo"] = self.protocolo
        nillableDictionary["requerAutenticacao"] = self.requerAutenticacao
        nillableDictionary["requerSSL"] = self.requerSSL
        nillableDictionary["requerTLS"] = self.requerTLS
        nillableDictionary["usuario"] = self.usuario
        nillableDictionary["senha"] = self.senha
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
