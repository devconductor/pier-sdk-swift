//
// OrigemComercialUpdate.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Par\u00E2metros de requisi\u00E7\u00E3o para alterar origem comercial */
public class OrigemComercialUpdate: JSONEncodable {

    public enum TipoPessoa: String { 
        case PessoaFisica = "PESSOA_FISICA"
        case PessoaJuridica = "PESSOA_JURIDICA"
    }
    
    /** Nome da origem comercial */
    public var nome: String?
    /** Descri\u00E7\u00E3o da origem comercial */
    public var descricao: String?
    /** Identificador do estabelecimento */
    public var idEstabelecimento: Int?
    /** Identificador do tipo de origem comercial */
    public var idTipoOrigemComercial: Int?
    /** Identificador do grupo de origem comercial */
    public var idGrupoOrigemComercial: Int?
    /** Indica o status da origem comercial */
    public var status: Int?
    /** Indica se permite pr\u00E9 aprova\u00E7\u00E3o */
    public var flagPreAprovado: Bool?
    /** Indica se permite aprova\u00E7\u00E3o imediata */
    public var flagAprovacaoImediata: Bool?
    /** Nome fantasia impresso no pl\u00E1stico */
    public var nomeFantasiaPlastico: String?
    /** Indica se permite cart\u00E3o provis\u00F3rio */
    public var flagCartaoProvisorio: Bool?
    /** Indica se permite cart\u00E3o definitivo */
    public var flagCartaoDefinitivo: Bool?
    /** Usu\u00E1rio para autentica\u00E7\u00E3o */
    public var usuario: String?
    /** Senha para autentica\u00E7\u00E3o */
    public var senha: String?
    /** Indica se \u00E9 origem externa */
    public var flagOrigemExterna: Bool?
    /** Indica se h\u00E1 modifica\u00E7\u00E3o */
    public var flagModificado: Bool?
    /** Indica se envia fatura */
    public var flagEnviaFaturaUsuario: Bool?
    /** Indica se permite cr\u00E9dito de faturamento */
    public var flagCreditoFaturamento: Bool?
    /** Indica se concede limite provis\u00F3rio */
    public var flagConcedeLimiteProvisorio: Bool?
    /** Indica se digitaliza documento */
    public var flagDigitalizarDoc: Bool?
    /** Indica se realiza embossing em loja */
    public var flagEmbossingLoja: Bool?
    /** Indica se realiza consulta pr\u00E9via */
    public var flagConsultaPrevia: Bool?
    /** Tipo de pessoa */
    public var tipoPessoa: TipoPessoa?
    

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["nome"] = self.nome
        nillableDictionary["descricao"] = self.descricao
        nillableDictionary["idEstabelecimento"] = self.idEstabelecimento
        nillableDictionary["idTipoOrigemComercial"] = self.idTipoOrigemComercial
        nillableDictionary["idGrupoOrigemComercial"] = self.idGrupoOrigemComercial
        nillableDictionary["status"] = self.status
        nillableDictionary["flagPreAprovado"] = self.flagPreAprovado
        nillableDictionary["flagAprovacaoImediata"] = self.flagAprovacaoImediata
        nillableDictionary["nomeFantasiaPlastico"] = self.nomeFantasiaPlastico
        nillableDictionary["flagCartaoProvisorio"] = self.flagCartaoProvisorio
        nillableDictionary["flagCartaoDefinitivo"] = self.flagCartaoDefinitivo
        nillableDictionary["usuario"] = self.usuario
        nillableDictionary["senha"] = self.senha
        nillableDictionary["flagOrigemExterna"] = self.flagOrigemExterna
        nillableDictionary["flagModificado"] = self.flagModificado
        nillableDictionary["flagEnviaFaturaUsuario"] = self.flagEnviaFaturaUsuario
        nillableDictionary["flagCreditoFaturamento"] = self.flagCreditoFaturamento
        nillableDictionary["flagConcedeLimiteProvisorio"] = self.flagConcedeLimiteProvisorio
        nillableDictionary["flagDigitalizarDoc"] = self.flagDigitalizarDoc
        nillableDictionary["flagEmbossingLoja"] = self.flagEmbossingLoja
        nillableDictionary["flagConsultaPrevia"] = self.flagConsultaPrevia
        nillableDictionary["tipoPessoa"] = self.tipoPessoa?.rawValue
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
