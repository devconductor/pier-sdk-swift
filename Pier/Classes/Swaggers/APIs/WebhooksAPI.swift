//
// WebhooksAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class WebhooksAPI: APIBase {
    /**
     
     Alterar Webhook
     
     - parameter id: (query) C\u00C3\u00B3digo identificador do Webhook 
     - parameter evento: (query) Evento a ser chamado pelo WebHook 
     - parameter metodo: (query) M\u00C3\u00A9todo que a ser chamado pelo WebHook 
     - parameter url: (query) URL que a ser consumida pelo WebHook 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT2(id id: Int, evento: Object, metodo: Object, url: String, completion: ((data: WebHook?, error: ErrorType?) -> Void)) {
        alterarUsingPUT2WithRequestBuilder(id: id, evento: evento, metodo: metodo, url: url).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Alterar Webhook
     
     - PUT /api/webhooks
     - Este m\u00C3\u00A9todo permite que seja modificado um webhooks j\u00C3\u00A1 cadastrado
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "evento" : "aeiou",
  "id" : 123456789,
  "metodo" : "aeiou",
  "url" : "aeiou"
}}]
     
     - parameter id: (query) C\u00C3\u00B3digo identificador do Webhook 
     - parameter evento: (query) Evento a ser chamado pelo WebHook 
     - parameter metodo: (query) M\u00C3\u00A9todo que a ser chamado pelo WebHook 
     - parameter url: (query) URL que a ser consumida pelo WebHook 

     - returns: RequestBuilder<WebHook> 
     */
    public class func alterarUsingPUT2WithRequestBuilder(id id: Int, evento: Object, metodo: Object, url: String) -> RequestBuilder<WebHook> {
        let path = "/api/webhooks"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id": id,
            "evento": evento,
            "metodo": metodo,
            "url": url
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<WebHook>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Consultar Webhook
     
     - parameter idWebhook: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Webhook (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET9(idWebhook idWebhook: Int, completion: ((data: WebHook?, error: ErrorType?) -> Void)) {
        consultarUsingGET9WithRequestBuilder(idWebhook: idWebhook).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consultar Webhook
     
     - GET /api/webhooks/{idWebhook}
     - Este m\u00C3\u00A9todo permite que sejam consultado um webhook do emissor atrav\u00C3\u00A9s de um id especifico
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "evento" : "aeiou",
  "id" : 123456789,
  "metodo" : "aeiou",
  "url" : "aeiou"
}}]
     
     - parameter idWebhook: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Webhook (id). 

     - returns: RequestBuilder<WebHook> 
     */
    public class func consultarUsingGET9WithRequestBuilder(idWebhook idWebhook: Int) -> RequestBuilder<WebHook> {
        var path = "/api/webhooks/{idWebhook}"
        path = path.stringByReplacingOccurrencesOfString("{idWebhook}", withString: "\(idWebhook)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<WebHook>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Lista os Webhooks
     
     - parameter id: (query) Id do WebHook (optional)
     - parameter evento: (query) Evento a ser chamado pelo WebHook (optional)
     - parameter metodo: (query) M\u00C3\u00A9todo que a ser chamado pelo WebHook (optional)
     - parameter url: (query) URL que a ser consumida pelo WebHook (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET10(id id: Int?, evento: Object?, metodo: Object?, url: String?, page: Int?, limit: Int?, completion: ((data: PageWebHooks?, error: ErrorType?) -> Void)) {
        listarUsingGET10WithRequestBuilder(id: id, evento: evento, metodo: metodo, url: url, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Webhooks
     
     - GET /api/webhooks
     - Este m\u00C3\u00A9todo permite que sejam listados os webhooks existentes
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "evento" : "aeiou",
    "id" : 123456789,
    "metodo" : "aeiou",
    "url" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (query) Id do WebHook (optional)
     - parameter evento: (query) Evento a ser chamado pelo WebHook (optional)
     - parameter metodo: (query) M\u00C3\u00A9todo que a ser chamado pelo WebHook (optional)
     - parameter url: (query) URL que a ser consumida pelo WebHook (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)

     - returns: RequestBuilder<PageWebHooks> 
     */
    public class func listarUsingGET10WithRequestBuilder(id id: Int?, evento: Object?, metodo: Object?, url: String?, page: Int?, limit: Int?) -> RequestBuilder<PageWebHooks> {
        let path = "/api/webhooks"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id": id,
            "evento": evento,
            "metodo": metodo,
            "url": url,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageWebHooks>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Salvar Webhook
     
     - parameter evento: (query) Evento a ser chamado pelo WebHook 
     - parameter metodo: (query) M\u00C3\u00A9todo que a ser chamado pelo WebHook 
     - parameter url: (query) URL que a ser consumida pelo WebHook 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST3(evento evento: Object, metodo: Object, url: String, completion: ((data: WebHook?, error: ErrorType?) -> Void)) {
        salvarUsingPOST3WithRequestBuilder(evento: evento, metodo: metodo, url: url).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Salvar Webhook
     
     - POST /api/webhooks
     - Este m\u00C3\u00A9todo permite que seja adicionado um novo webhook
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "evento" : "aeiou",
  "id" : 123456789,
  "metodo" : "aeiou",
  "url" : "aeiou"
}}]
     
     - parameter evento: (query) Evento a ser chamado pelo WebHook 
     - parameter metodo: (query) M\u00C3\u00A9todo que a ser chamado pelo WebHook 
     - parameter url: (query) URL que a ser consumida pelo WebHook 

     - returns: RequestBuilder<WebHook> 
     */
    public class func salvarUsingPOST3WithRequestBuilder(evento evento: Object, metodo: Object, url: String) -> RequestBuilder<WebHook> {
        let path = "/api/webhooks"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "evento": evento,
            "metodo": metodo,
            "url": url
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<WebHook>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

}
