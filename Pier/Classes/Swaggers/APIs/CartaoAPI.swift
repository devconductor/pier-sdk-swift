//
// CartaoAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CartaoAPI: APIBase {
    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o da senha de um Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarAlterarSenhaUsingPUT(id id: Int, completion: ((data: String?, error: ErrorType?) -> Void)) {
        alterarAlterarSenhaUsingPUTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o da senha de um Cart\u00C3\u00A3o
     
     - PUT /api/cartoes/{id}/alterar-senha
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que o portador de um determinado cart\u00C3\u00A3o possa definir uma senha a sua escolha.
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<String> 
     */
    public class func alterarAlterarSenhaUsingPUTWithRequestBuilder(id id: Int) -> RequestBuilder<String> {
        var path = "/api/cartoes/{id}/alterar-senha"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o do Status de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter idStatusImpressao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status Impress\u00C3\u00A3o (Id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarStatusImpressaoUsingPUT(id id: Int, idStatusImpressao: Int, completion: ((data: HistoricoImpressaoCartao?, error: ErrorType?) -> Void)) {
        alterarStatusImpressaoUsingPUTWithRequestBuilder(id: id, idStatusImpressao: idStatusImpressao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o do Status de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o
     
     - PUT /api/cartoes/{id}/alterar-status-impressao
     - Este m\u00C3\u00A9todo permite que uma Aplica\u00C3\u00A7\u00C3\u00A3o que realize a impress\u00C3\u00A3o de cart\u00C3\u00B5es possa indicar que um determinado idCartao fora impresso ou est\u00C3\u00A1 em processo de impress\u00C3\u00A3o. Para isso, basta informar o respectivo c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do cart\u00C3\u00A3o (id) que deseja ter seu um determinado id_status_impressao atribu\u00C3\u00ADdo a ele. Por padr\u00C3\u00A3o, cart\u00C3\u00B5es provis\u00C3\u00B3rios ou que j\u00C3\u00A1 tenham sido inclu\u00C3\u00ADdos em um arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica ter\u00C3\u00A3o esta requisi\u00C3\u00A7\u00C3\u00A3o negada, se utilizada.
     - examples: [{contentType=application/json, example={
  "idStatusImpressaoCartao" : 123456789,
  "idCartao" : 123456789,
  "mensagemHistorico" : "aeiou",
  "dataHistorico" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter idStatusImpressao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status Impress\u00C3\u00A3o (Id). 

     - returns: RequestBuilder<HistoricoImpressaoCartao> 
     */
    public class func alterarStatusImpressaoUsingPUTWithRequestBuilder(id id: Int, idStatusImpressao: Int) -> RequestBuilder<HistoricoImpressaoCartao> {
        var path = "/api/cartoes/{id}/alterar-status-impressao"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_status_impressao": idStatusImpressao
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<HistoricoImpressaoCartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza a atribui\u00C3\u00A7\u00C3\u00A3o de um cart\u00C3\u00A3o pr\u00C3\u00A9-pago a uma pessoa
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id) 
     - parameter idPessoa: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de uma Pessoa (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func atribuirPessoaUsingPUT(id id: Int, idPessoa: Int, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        atribuirPessoaUsingPUTWithRequestBuilder(id: id, idPessoa: idPessoa).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a atribui\u00C3\u00A7\u00C3\u00A3o de um cart\u00C3\u00A3o pr\u00C3\u00A9-pago a uma pessoa
     
     - PUT /api/cartoes/{id}/atribuir-titular
     - Esta m\u00C3\u00A9todo permite que um cart\u00C3\u00A3o pr\u00C3\u00A9-pago impresso de forma avulsa e an\u00C3\u00B4nimo seja atribu\u00C3\u00ADdo a uma pessoa para que esta passe a ser a portadora titular dele.
     - examples: [{contentType=application/json, example={
  "idConta" : 123456789,
  "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "codigoDesbloqueio" : "aeiou",
  "idEstagioCartao" : 123456789,
  "arquivoImpressao" : "aeiou",
  "numeroCartao" : "aeiou",
  "idPessoa" : 123456789,
  "idProduto" : 123456789,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idStatusCartao" : 123456789,
  "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagImpressaoOrigemComercial" : 123,
  "sequencialCartao" : 123,
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "flagVirtual" : 123,
  "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tipoPortador" : "aeiou",
  "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id) 
     - parameter idPessoa: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de uma Pessoa (id). 

     - returns: RequestBuilder<Cartao> 
     */
    public class func atribuirPessoaUsingPUTWithRequestBuilder(id id: Int, idPessoa: Int) -> RequestBuilder<Cartao> {
        var path = "/api/cartoes/{id}/atribuir-titular"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_pessoa": idPessoa
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Cartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o bloqueio de um determinado Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter idStatus: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Novo Status Cart\u00C3\u00A3o. 
     - parameter observacao: (query) Texto informando uma observa\u00C3\u00A7\u00C3\u00A3o sobre o bloqueio. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func bloquearUsingPUT(id id: Int, idStatus: Int, observacao: String, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        bloquearUsingPUTWithRequestBuilder(id: id, idStatus: idStatus, observacao: observacao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o bloqueio de um determinado Cart\u00C3\u00A3o
     
     - PUT /api/cartoes/{id}/bloquear
     - Este m\u00C3\u00A9todo permite a realiza\u00C3\u00A7\u00C3\u00A3o do bloqueio (tempor\u00C3\u00A1rio) ou do cancelamento (definitivo) de um determinado cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id). Para isso, \u00C3\u00A9 preciso informar qual o motivo deste bloqueio que nada mais \u00C3\u00A9 do que atribuir um novo StatusCartao para ele dentre as op\u00C3\u00A7\u00C3\u00B5es praticadas pelo emissor.
     - examples: [{contentType=application/json, example={
  "idConta" : 123456789,
  "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "codigoDesbloqueio" : "aeiou",
  "idEstagioCartao" : 123456789,
  "arquivoImpressao" : "aeiou",
  "numeroCartao" : "aeiou",
  "idPessoa" : 123456789,
  "idProduto" : 123456789,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idStatusCartao" : 123456789,
  "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagImpressaoOrigemComercial" : 123,
  "sequencialCartao" : 123,
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "flagVirtual" : 123,
  "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tipoPortador" : "aeiou",
  "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter idStatus: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Novo Status Cart\u00C3\u00A3o. 
     - parameter observacao: (query) Texto informando uma observa\u00C3\u00A7\u00C3\u00A3o sobre o bloqueio. 

     - returns: RequestBuilder<Cartao> 
     */
    public class func bloquearUsingPUTWithRequestBuilder(id id: Int, idStatus: Int, observacao: String) -> RequestBuilder<Cartao> {
        var path = "/api/cartoes/{id}/bloquear"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_status": idStatus,
            "observacao": observacao
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Cartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o cadastro da senha de um Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func cadastrarAlterarSenhaUsingPOST(id id: Int, completion: ((data: String?, error: ErrorType?) -> Void)) {
        cadastrarAlterarSenhaUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro da senha de um Cart\u00C3\u00A3o
     
     - POST /api/cartoes/{id}/cadastrar-senha
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que o portador de um determinado cart\u00C3\u00A3o possa definir uma senha a sua escolha.
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<String> 
     */
    public class func cadastrarAlterarSenhaUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<String> {
        var path = "/api/cartoes/{id}/cadastrar-senha"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Consultar Detalhes do Cart\u00C3\u00A3o
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarDadosReaisCartaoUsingGET(id id: Int, completion: ((data: DadosCarto?, error: ErrorType?) -> Void)) {
        consultarDadosReaisCartaoUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consultar Detalhes do Cart\u00C3\u00A3o
     
     - GET /api/cartoes/{id}/consultar-dados-reais
     - Este m\u00C3\u00A9todo permite que seja consultado os dados necessarios de um cart\u00C3\u00A3o para executar servi\u00C3\u00A7os de autoriza\u00C3\u00A7\u00C3\u00A3o.
     - examples: [{contentType=application/json, example={
  "cvv2" : "aeiou",
  "idCartao" : 123456789,
  "idStatusConta" : 123456789,
  "idConta" : 123456789,
  "statusConta" : "aeiou",
  "numeroCartao" : "aeiou",
  "numeroContaCorente" : "aeiou",
  "dataValidade" : "aeiou",
  "idStatusCartao" : 123456789,
  "nomePlastico" : "aeiou",
  "statusCartao" : "aeiou",
  "flagVirtual" : 123,
  "numeroAgencia" : 123
}}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<DadosCarto> 
     */
    public class func consultarDadosReaisCartaoUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<DadosCarto> {
        var path = "/api/cartoes/{id}/consultar-dados-reais"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<DadosCarto>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os limites do Portador do Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarLimiteDisponibilidadeUsingGET(id id: Int, completion: ((data: LimiteDisponibilidade?, error: ErrorType?) -> Void)) {
        consultarLimiteDisponibilidadeUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os limites do Portador do Cart\u00C3\u00A3o
     
     - GET /api/cartoes/{id}/limites-disponibilidades
     - Este m\u00C3\u00A9todo permite consultar os Limites configurados para o Portador de um determinado Cart\u00C3\u00A3o, seja ele o titular da conta ou um adicional, a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "saldoDisponivelCompraInternacional" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoDisponivelSaque" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteParcelas" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteSaquePeriodo" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteGlobal" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteInternacionalSaqueGlobal" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoDisponivelCompra" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteInternacionalSaquePeriodo" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteParcelado" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoDisponivelSaqueInternacional" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoPontosFidelidade" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteInternacionalParcelado" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoDisponivelParcelas" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123456789,
  "limiteConsignado" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoDisponivelGlobal" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoDisponivelParcelado" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteInternacionalParcelas" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteSaqueGlobal" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteInternacionalCompra" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteCompra" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<LimiteDisponibilidade> 
     */
    public class func consultarLimiteDisponibilidadeUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<LimiteDisponibilidade> {
        var path = "/api/cartoes/{id}/limites-disponibilidades"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<LimiteDisponibilidade>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Permite consultar um determinado Lote de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do lote de cart\u00C3\u00B5es (id) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarLotesCartoesPrePagosUsingGET(id id: Int, completion: ((data: LoteCartoesPrePagos?, error: ErrorType?) -> Void)) {
        consultarLotesCartoesPrePagosUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite consultar um determinado Lote de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
     
     - GET /api/cartoes/lotes-cartoes-pre-pagos/{id}
     - Este m\u00C3\u00A9todo permite consultar os cart\u00C3\u00B5es pr\u00C3\u00A9-pagos existentes na base do emissor atrav\u00C3\u00A9s do id do lote.
     - examples: [{contentType=application/json, example={
  "idOrigemComercial" : 123456789,
  "idProduto" : 123456789,
  "idImagem" : 123456789,
  "idEndereco" : 123456789,
  "statusProcessamento" : 123,
  "idTipoCartao" : 123456789,
  "id" : 123456789,
  "quantidade" : 123,
  "dataCadastro" : "aeiou",
  "usuarioCadastro" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do lote de cart\u00C3\u00B5es (id) 

     - returns: RequestBuilder<LoteCartoesPrePagos> 
     */
    public class func consultarLotesCartoesPrePagosUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<LoteCartoesPrePagos> {
        var path = "/api/cartoes/lotes-cartoes-pre-pagos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<LoteCartoesPrePagos>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados do Portador do Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarPortadorUsingGET(id id: Int, completion: ((data: Portador?, error: ErrorType?) -> Void)) {
        consultarPortadorUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados do Portador do Cart\u00C3\u00A3o
     
     - GET /api/cartoes/{id}/portadores
     - Este m\u00C3\u00A9todo permite consultar as informa\u00C3\u00A7\u00C3\u00B5es do Portador de um determinado Cart\u00C3\u00A3o a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "idConta" : 123456789,
  "idProduto" : 123456789,
  "dataCancelamentoPortador" : "aeiou",
  "idTipoCartao" : 123456789,
  "idParentesco" : 123456789,
  "dataCadastroPortador" : "aeiou",
  "nomeImpresso" : "aeiou",
  "flagAtivo" : 123,
  "tipoPortador" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<Portador> 
     */
    public class func consultarPortadorUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<Portador> {
        var path = "/api/cartoes/{id}/portadores"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Portador>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de um determinado Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET3(id id: Int, completion: ((data: CartaoDetalhado?, error: ErrorType?) -> Void)) {
        consultarUsingGET3WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Cart\u00C3\u00A3o
     
     - GET /api/cartoes/{id}
     - Este m\u00C3\u00A9todo permite consultar as informa\u00C3\u00A7\u00C3\u00B5es b\u00C3\u00A1sicas de um determinado Cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idConta" : 123456789,
  "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "descricaoTipoCartao" : "aeiou",
  "codigoDesbloqueio" : "aeiou",
  "idEstagioCartao" : 123456789,
  "arquivoImpressao" : "aeiou",
  "numeroCartao" : "aeiou",
  "idPessoa" : 123456789,
  "idProduto" : 123456789,
  "tipoCartao" : 123456789,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idStatusCartao" : 123456789,
  "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagImpressaoOrigemComercial" : 123,
  "sequencialCartao" : 123,
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "flagVirtual" : 123,
  "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tipoPortador" : "aeiou",
  "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<CartaoDetalhado> 
     */
    public class func consultarUsingGET3WithRequestBuilder(id id: Int) -> RequestBuilder<CartaoDetalhado> {
        var path = "/api/cartoes/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<CartaoDetalhado>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza o desbloqueio de um cart\u00C3\u00A3o bloqueado por tentativas de senha incorretas
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func desbloquearSenhaIncorretaUsingPOST(id id: Int, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        desbloquearSenhaIncorretaUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o desbloqueio de um cart\u00C3\u00A3o bloqueado por tentativas de senha incorretas
     
     - POST /api/cartoes/{id}/desbloquear-senha-incorreta
     - Este m\u00C3\u00A9todo permite que seja desbloqueado um determinado cart\u00C3\u00A3o que foi bloqueado por tentativas de senha incorretas, a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idConta" : 123456789,
  "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "codigoDesbloqueio" : "aeiou",
  "idEstagioCartao" : 123456789,
  "arquivoImpressao" : "aeiou",
  "numeroCartao" : "aeiou",
  "idPessoa" : 123456789,
  "idProduto" : 123456789,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idStatusCartao" : 123456789,
  "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagImpressaoOrigemComercial" : 123,
  "sequencialCartao" : 123,
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "flagVirtual" : 123,
  "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tipoPortador" : "aeiou",
  "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<Cartao> 
     */
    public class func desbloquearSenhaIncorretaUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<Cartao> {
        var path = "/api/cartoes/{id}/desbloquear-senha-incorreta"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Cartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza o desbloqueio de um determinado Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func desbloquearUsingPUT(id id: Int, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        desbloquearUsingPUTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o desbloqueio de um determinado Cart\u00C3\u00A3o
     
     - PUT /api/cartoes/{id}/desbloquear
     - Este m\u00C3\u00A9todo permite que seja desbloqueado um determinado cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idConta" : 123456789,
  "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "codigoDesbloqueio" : "aeiou",
  "idEstagioCartao" : 123456789,
  "arquivoImpressao" : "aeiou",
  "numeroCartao" : "aeiou",
  "idPessoa" : 123456789,
  "idProduto" : 123456789,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idStatusCartao" : 123456789,
  "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagImpressaoOrigemComercial" : 123,
  "sequencialCartao" : 123,
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "flagVirtual" : 123,
  "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tipoPortador" : "aeiou",
  "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<Cartao> 
     */
    public class func desbloquearUsingPUTWithRequestBuilder(id id: Int) -> RequestBuilder<Cartao> {
        var path = "/api/cartoes/{id}/desbloquear"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Cartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Permite gerar um novo Lote de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
     
     - parameter idOrigemComercial: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id). (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id). (optional)
     - parameter idTipoCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id). (optional)
     - parameter idImagem: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id). (optional)
     - parameter idEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (optional)
     - parameter quantidadeCartoes: (query) N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func gerarLotesCartoesPrePagosUsingPOST(idOrigemComercial idOrigemComercial: Int?, idProduto: Int?, idTipoCartao: Int?, idImagem: Int?, idEndereco: Int?, quantidadeCartoes: Int?, completion: ((data: LoteCartoesPrePagos?, error: ErrorType?) -> Void)) {
        gerarLotesCartoesPrePagosUsingPOSTWithRequestBuilder(idOrigemComercial: idOrigemComercial, idProduto: idProduto, idTipoCartao: idTipoCartao, idImagem: idImagem, idEndereco: idEndereco, quantidadeCartoes: quantidadeCartoes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite gerar um novo Lote de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
     
     - POST /api/cartoes/lotes-cartoes-pre-pagos
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores gerem uma determinada quantidade de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pagos, de forma n\u00C3\u00A3o nominal, os quais poder\u00C3\u00A3o ser comercializados e posteriormente vinculados a um cliente que o adquirir. Para isso, al\u00C3\u00A9m de definir quantos cart\u00C3\u00B5es dever\u00C3\u00A3o ser gerados, ser\u00C3\u00A1 poss\u00C3\u00ADvel definir qual a Origem Comercial, o Produto, o Tipo do Cart\u00C3\u00A3o, a Imagem e o Endere\u00C3\u00A7o para entrega dos Cart\u00C3\u00B5es presentes no lote gerado. Por padr\u00C3\u00A3o, todos os cart\u00C3\u00B5es ser\u00C3\u00A3o associados a um idPessoa fict\u00C3\u00ADcio e receber\u00C3\u00A1 um idConta \u00C3\u00BAnico para cada um deles. Feito isso, os Cart\u00C3\u00B5es gerados por esta opera\u00C3\u00A7\u00C3\u00A3o seguir\u00C3\u00A3o os mesmos processos de impress\u00C3\u00A3o via gr\u00C3\u00A1fica previamente definidos entre o Emissor e a Conductor.
     - examples: [{contentType=application/json, example={
  "idOrigemComercial" : 123456789,
  "idProduto" : 123456789,
  "idImagem" : 123456789,
  "idEndereco" : 123456789,
  "statusProcessamento" : 123,
  "idTipoCartao" : 123456789,
  "id" : 123456789,
  "quantidade" : 123,
  "dataCadastro" : "aeiou",
  "usuarioCadastro" : "aeiou"
}}]
     
     - parameter idOrigemComercial: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id). (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id). (optional)
     - parameter idTipoCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id). (optional)
     - parameter idImagem: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id). (optional)
     - parameter idEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (optional)
     - parameter quantidadeCartoes: (query) N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote. (optional)

     - returns: RequestBuilder<LoteCartoesPrePagos> 
     */
    public class func gerarLotesCartoesPrePagosUsingPOSTWithRequestBuilder(idOrigemComercial idOrigemComercial: Int?, idProduto: Int?, idTipoCartao: Int?, idImagem: Int?, idEndereco: Int?, quantidadeCartoes: Int?) -> RequestBuilder<LoteCartoesPrePagos> {
        let path = "/api/cartoes/lotes-cartoes-pre-pagos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idOrigemComercial": idOrigemComercial,
            "idProduto": idProduto,
            "idTipoCartao": idTipoCartao,
            "idImagem": idImagem,
            "idEndereco": idEndereco,
            "quantidadeCartoes": quantidadeCartoes
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<LoteCartoesPrePagos>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Gerar uma nova via de Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func gerarNovaViaUsingPOST(id id: Int, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        gerarNovaViaUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Gerar uma nova via de Cart\u00C3\u00A3o
     
     - POST /api/cartoes/{id}/gerar-nova-via
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores ou seus clientes possam solicitar a gera\u00C3\u00A7\u00C3\u00A3o de uma nova via de Cart\u00C3\u00A3o que ser\u00C3\u00A1 encaminhando para impress\u00C3\u00A3o e postagem de acordo com os fluxos padr\u00C3\u00B5es j\u00C3\u00A1 definidos pelo emissor. Para isso, \u00C3\u00A9 preciso que o cliente j\u00C3\u00A1 possua um cart\u00C3\u00A3o gerado e informar o C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o deste (idCartao) para que ele possa utilizar esta opera\u00C3\u00A7\u00C3\u00A3o. Assim, esta funcionalidade se aplica apenas para a gera\u00C3\u00A7\u00C3\u00A3o de cart\u00C3\u00B5es f\u00C3\u00ADsicos.
     - examples: [{contentType=application/json, example={
  "idConta" : 123456789,
  "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "codigoDesbloqueio" : "aeiou",
  "idEstagioCartao" : 123456789,
  "arquivoImpressao" : "aeiou",
  "numeroCartao" : "aeiou",
  "idPessoa" : 123456789,
  "idProduto" : 123456789,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idStatusCartao" : 123456789,
  "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagImpressaoOrigemComercial" : 123,
  "sequencialCartao" : 123,
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "flagVirtual" : 123,
  "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tipoPortador" : "aeiou",
  "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id) 

     - returns: RequestBuilder<Cartao> 
     */
    public class func gerarNovaViaUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<Cartao> {
        var path = "/api/cartoes/{id}/gerar-nova-via"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Cartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Permite listar os Lotes de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idOrigemComercial: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id). (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id). (optional)
     - parameter idTipoCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id). (optional)
     - parameter idImagem: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id). (optional)
     - parameter idEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (optional)
     - parameter quantidadeCartoes: (query) N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote. (optional)
     - parameter dataCadastro: (query) Data de Cadastro do Lote de Cart\u00C3\u00B5es N\u00C3\u00A3o Nominais. (optional)
     - parameter usuarioCadastro: (query) Nome do Usu\u00C3\u00A1rio que criou o Lote. (optional)
     - parameter statusProcessamento: (query) Indica o Status de Processamento do Lote. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarLotesCartoesPrePagosUsingGET(page page: Int?, limit: Int?, idOrigemComercial: Int?, idProduto: Int?, idTipoCartao: Int?, idImagem: Int?, idEndereco: Int?, quantidadeCartoes: Int?, dataCadastro: String?, usuarioCadastro: String?, statusProcessamento: Int?, completion: ((data: PageLoteCartoesPrePagosResponse?, error: ErrorType?) -> Void)) {
        listarLotesCartoesPrePagosUsingGETWithRequestBuilder(page: page, limit: limit, idOrigemComercial: idOrigemComercial, idProduto: idProduto, idTipoCartao: idTipoCartao, idImagem: idImagem, idEndereco: idEndereco, quantidadeCartoes: quantidadeCartoes, dataCadastro: dataCadastro, usuarioCadastro: usuarioCadastro, statusProcessamento: statusProcessamento).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite listar os Lotes de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
     
     - GET /api/cartoes/lotes-cartoes-pre-pagos
     - Este m\u00C3\u00A9todo permite que sejam listados os cart\u00C3\u00B5es pr\u00C3\u00A9-pagos existentes na base do emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idOrigemComercial" : 123456789,
    "idProduto" : 123456789,
    "idImagem" : 123456789,
    "idEndereco" : 123456789,
    "statusProcessamento" : 123,
    "idTipoCartao" : 123456789,
    "id" : 123456789,
    "quantidade" : 123,
    "dataCadastro" : "aeiou",
    "usuarioCadastro" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idOrigemComercial: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id). (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id). (optional)
     - parameter idTipoCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id). (optional)
     - parameter idImagem: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id). (optional)
     - parameter idEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (optional)
     - parameter quantidadeCartoes: (query) N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote. (optional)
     - parameter dataCadastro: (query) Data de Cadastro do Lote de Cart\u00C3\u00B5es N\u00C3\u00A3o Nominais. (optional)
     - parameter usuarioCadastro: (query) Nome do Usu\u00C3\u00A1rio que criou o Lote. (optional)
     - parameter statusProcessamento: (query) Indica o Status de Processamento do Lote. (optional)

     - returns: RequestBuilder<PageLoteCartoesPrePagosResponse> 
     */
    public class func listarLotesCartoesPrePagosUsingGETWithRequestBuilder(page page: Int?, limit: Int?, idOrigemComercial: Int?, idProduto: Int?, idTipoCartao: Int?, idImagem: Int?, idEndereco: Int?, quantidadeCartoes: Int?, dataCadastro: String?, usuarioCadastro: String?, statusProcessamento: Int?) -> RequestBuilder<PageLoteCartoesPrePagosResponse> {
        let path = "/api/cartoes/lotes-cartoes-pre-pagos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "idOrigemComercial": idOrigemComercial,
            "idProduto": idProduto,
            "idTipoCartao": idTipoCartao,
            "idImagem": idImagem,
            "idEndereco": idEndereco,
            "quantidadeCartoes": quantidadeCartoes,
            "dataCadastro": dataCadastro,
            "usuarioCadastro": usuarioCadastro,
            "statusProcessamento": statusProcessamento
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageLoteCartoesPrePagosResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Cart\u00C3\u00B5es gerados pelo Emissor
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idStatusCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id). (optional)
     - parameter idEstagioCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Est\u00C3\u00A1gio de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o (id). (optional)
     - parameter idConta: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta a qual o cart\u00C3\u00A3o pertence (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o cart\u00C3\u00A3o pertence (id) (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto a qual o cart\u00C3\u00A3o pertence (id). (optional)
     - parameter tipoPortador: (query) Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: (&#39;T&#39;: Titular, &#39;A&#39;: Adicional). (optional)
     - parameter numeroCartao: (query) Apresenta o n\u00C3\u00BAmero do cart\u00C3\u00A3o. (optional)
     - parameter nomeImpresso: (query) Apresenta o nome impresso no cart\u00C3\u00A3o. (optional)
     - parameter dataGeracao: (query) Apresenta a data em que o cart\u00C3\u00A3o foi gerado. (optional)
     - parameter dataStatusCartao: (query) Apresenta a data em que o idStatusCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver. (optional)
     - parameter dataEstagioCartao: (query) Apresenta a data em que o idEstagioCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver. (optional)
     - parameter dataValidade: (query) Apresenta a data de validade do cart\u00C3\u00A3o em formato yyyy-MM, quando houver. (optional)
     - parameter dataImpressao: (query) Apresenta a data em que o cart\u00C3\u00A3o fora impresso, caso impress\u00C3\u00A3o em loja, ou a data em que ele fora inclu\u00C3\u00ADdo no arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica. (optional)
     - parameter arquivoImpressao: (query) Apresenta o nome do arquivo onde o cart\u00C3\u00A3o fora inclu\u00C3\u00ADdo para impress\u00C3\u00A3o por uma gr\u00C3\u00A1fica, quando houver. (optional)
     - parameter flagImpressaoOrigemComercial: (query) Quando ativa, indica que o cart\u00C3\u00A3o fora impresso na Origem Comercial. (optional)
     - parameter flagProvisorio: (query) Quando ativa, indica que o cart\u00C3\u00A3o \u00C3\u00A9 provis\u00C3\u00B3rio. Ou seja, \u00C3\u00A9 um cart\u00C3\u00A3o para uso tempor\u00C3\u00A1rio quando se deseja permitir que o cliente transacione sem que ele tenha recebido um cart\u00C3\u00A3o definitivo. (optional)
     - parameter codigoDesbloqueio: (query) Apresenta um c\u00C3\u00B3digo espec\u00C3\u00ADfico para ser utilizado como vari\u00C3\u00A1vel no processo de desbloqueio do cart\u00C3\u00A3o para emissores que querem usar esta funcionalidade. (optional)
     - parameter sequencialCartao: (query) N\u00C3\u00BAmero sequencial do cart\u00C3\u00A3o (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET4(page page: Int?, limit: Int?, idStatusCartao: Int?, idEstagioCartao: Int?, idConta: Int?, idPessoa: Int?, idProduto: Int?, tipoPortador: String?, numeroCartao: String?, nomeImpresso: String?, dataGeracao: String?, dataStatusCartao: String?, dataEstagioCartao: String?, dataValidade: String?, dataImpressao: String?, arquivoImpressao: String?, flagImpressaoOrigemComercial: Int?, flagProvisorio: Int?, codigoDesbloqueio: String?, sequencialCartao: Int?, completion: ((data: PageCartoes?, error: ErrorType?) -> Void)) {
        listarUsingGET4WithRequestBuilder(page: page, limit: limit, idStatusCartao: idStatusCartao, idEstagioCartao: idEstagioCartao, idConta: idConta, idPessoa: idPessoa, idProduto: idProduto, tipoPortador: tipoPortador, numeroCartao: numeroCartao, nomeImpresso: nomeImpresso, dataGeracao: dataGeracao, dataStatusCartao: dataStatusCartao, dataEstagioCartao: dataEstagioCartao, dataValidade: dataValidade, dataImpressao: dataImpressao, arquivoImpressao: arquivoImpressao, flagImpressaoOrigemComercial: flagImpressaoOrigemComercial, flagProvisorio: flagProvisorio, codigoDesbloqueio: codigoDesbloqueio, sequencialCartao: sequencialCartao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Cart\u00C3\u00B5es gerados pelo Emissor
     
     - GET /api/cartoes
     - Este m\u00C3\u00A9todo permite que sejam listados os cart\u00C3\u00B5es existentes na base do emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idConta" : 123456789,
    "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "codigoDesbloqueio" : "aeiou",
    "idEstagioCartao" : 123456789,
    "arquivoImpressao" : "aeiou",
    "numeroCartao" : "aeiou",
    "idPessoa" : 123456789,
    "idProduto" : 123456789,
    "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "idStatusCartao" : 123456789,
    "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "flagImpressaoOrigemComercial" : 123,
    "sequencialCartao" : 123,
    "id" : 123456789,
    "nomeImpresso" : "aeiou",
    "flagVirtual" : 123,
    "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "tipoPortador" : "aeiou",
    "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idStatusCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id). (optional)
     - parameter idEstagioCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Est\u00C3\u00A1gio de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o (id). (optional)
     - parameter idConta: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta a qual o cart\u00C3\u00A3o pertence (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o cart\u00C3\u00A3o pertence (id) (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto a qual o cart\u00C3\u00A3o pertence (id). (optional)
     - parameter tipoPortador: (query) Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: (&#39;T&#39;: Titular, &#39;A&#39;: Adicional). (optional)
     - parameter numeroCartao: (query) Apresenta o n\u00C3\u00BAmero do cart\u00C3\u00A3o. (optional)
     - parameter nomeImpresso: (query) Apresenta o nome impresso no cart\u00C3\u00A3o. (optional)
     - parameter dataGeracao: (query) Apresenta a data em que o cart\u00C3\u00A3o foi gerado. (optional)
     - parameter dataStatusCartao: (query) Apresenta a data em que o idStatusCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver. (optional)
     - parameter dataEstagioCartao: (query) Apresenta a data em que o idEstagioCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver. (optional)
     - parameter dataValidade: (query) Apresenta a data de validade do cart\u00C3\u00A3o em formato yyyy-MM, quando houver. (optional)
     - parameter dataImpressao: (query) Apresenta a data em que o cart\u00C3\u00A3o fora impresso, caso impress\u00C3\u00A3o em loja, ou a data em que ele fora inclu\u00C3\u00ADdo no arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica. (optional)
     - parameter arquivoImpressao: (query) Apresenta o nome do arquivo onde o cart\u00C3\u00A3o fora inclu\u00C3\u00ADdo para impress\u00C3\u00A3o por uma gr\u00C3\u00A1fica, quando houver. (optional)
     - parameter flagImpressaoOrigemComercial: (query) Quando ativa, indica que o cart\u00C3\u00A3o fora impresso na Origem Comercial. (optional)
     - parameter flagProvisorio: (query) Quando ativa, indica que o cart\u00C3\u00A3o \u00C3\u00A9 provis\u00C3\u00B3rio. Ou seja, \u00C3\u00A9 um cart\u00C3\u00A3o para uso tempor\u00C3\u00A1rio quando se deseja permitir que o cliente transacione sem que ele tenha recebido um cart\u00C3\u00A3o definitivo. (optional)
     - parameter codigoDesbloqueio: (query) Apresenta um c\u00C3\u00B3digo espec\u00C3\u00ADfico para ser utilizado como vari\u00C3\u00A1vel no processo de desbloqueio do cart\u00C3\u00A3o para emissores que querem usar esta funcionalidade. (optional)
     - parameter sequencialCartao: (query) N\u00C3\u00BAmero sequencial do cart\u00C3\u00A3o (optional)

     - returns: RequestBuilder<PageCartoes> 
     */
    public class func listarUsingGET4WithRequestBuilder(page page: Int?, limit: Int?, idStatusCartao: Int?, idEstagioCartao: Int?, idConta: Int?, idPessoa: Int?, idProduto: Int?, tipoPortador: String?, numeroCartao: String?, nomeImpresso: String?, dataGeracao: String?, dataStatusCartao: String?, dataEstagioCartao: String?, dataValidade: String?, dataImpressao: String?, arquivoImpressao: String?, flagImpressaoOrigemComercial: Int?, flagProvisorio: Int?, codigoDesbloqueio: String?, sequencialCartao: Int?) -> RequestBuilder<PageCartoes> {
        let path = "/api/cartoes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "idStatusCartao": idStatusCartao,
            "idEstagioCartao": idEstagioCartao,
            "idConta": idConta,
            "idPessoa": idPessoa,
            "idProduto": idProduto,
            "tipoPortador": tipoPortador,
            "numeroCartao": numeroCartao,
            "nomeImpresso": nomeImpresso,
            "dataGeracao": dataGeracao,
            "dataStatusCartao": dataStatusCartao,
            "dataEstagioCartao": dataEstagioCartao,
            "dataValidade": dataValidade,
            "dataImpressao": dataImpressao,
            "arquivoImpressao": arquivoImpressao,
            "flagImpressaoOrigemComercial": flagImpressaoOrigemComercial,
            "flagProvisorio": flagProvisorio,
            "codigoDesbloqueio": codigoDesbloqueio,
            "sequencialCartao": sequencialCartao
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageCartoes>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Permite validar os dados impressos em um cart\u00C3\u00A3o bandeirado
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter nomePortador: (query) Nome do portador do cart\u00C3\u00A3o 
     - parameter dataValidade: (query) Data de validade do cart\u00C3\u00A3o no formato yyyy-MM 
     - parameter codigoSeguranca: (query) C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarDadosImpressosBandeiradoUsingGET(numeroCartao numeroCartao: String, nomePortador: String, dataValidade: String, codigoSeguranca: String, completion: ((data: ValidaCartao?, error: ErrorType?) -> Void)) {
        validarDadosImpressosBandeiradoUsingGETWithRequestBuilder(numeroCartao: numeroCartao, nomePortador: nomePortador, dataValidade: dataValidade, codigoSeguranca: codigoSeguranca).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite validar os dados impressos em um cart\u00C3\u00A3o bandeirado
     
     - GET /api/cartoes/validar-dados-impressos-bandeirados
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir do envio dos dados sens\u00C3\u00ADveis impressos nele. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o para a realiza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00B5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00C3\u00B4nico (URA), dentre outras.
     - examples: [{contentType=application/json, example={
  "idStatusConta" : 123456789,
  "idConta" : 123456789,
  "idStatusCartao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "criptogramaResposta" : "aeiou",
  "statusConta" : "aeiou",
  "statusCartao" : "aeiou",
  "numeroAgencia" : 123
}}]
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter nomePortador: (query) Nome do portador do cart\u00C3\u00A3o 
     - parameter dataValidade: (query) Data de validade do cart\u00C3\u00A3o no formato yyyy-MM 
     - parameter codigoSeguranca: (query) C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros 

     - returns: RequestBuilder<ValidaCartao> 
     */
    public class func validarDadosImpressosBandeiradoUsingGETWithRequestBuilder(numeroCartao numeroCartao: String, nomePortador: String, dataValidade: String, codigoSeguranca: String) -> RequestBuilder<ValidaCartao> {
        let path = "/api/cartoes/validar-dados-impressos-bandeirados"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "numero_cartao": numeroCartao,
            "nome_portador": nomePortador,
            "data_validade": dataValidade,
            "codigo_seguranca": codigoSeguranca
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ValidaCartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Permite validar os dados impressos de um cartao n\u00C3\u00A3o bandeirado
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter nomePortador: (query) Nome do portador do cart\u00C3\u00A3o 
     - parameter dataValidade: (query) Data de validade do cart\u00C3\u00A3o no formato yyyy-MM 
     - parameter codigoSeguranca: (query) C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarDadosImpressosNaoBandeiradoUsingGET(numeroCartao numeroCartao: String, nomePortador: String, dataValidade: String, codigoSeguranca: String, completion: ((data: ValidaCartao?, error: ErrorType?) -> Void)) {
        validarDadosImpressosNaoBandeiradoUsingGETWithRequestBuilder(numeroCartao: numeroCartao, nomePortador: nomePortador, dataValidade: dataValidade, codigoSeguranca: codigoSeguranca).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite validar os dados impressos de um cartao n\u00C3\u00A3o bandeirado
     
     - GET /api/cartoes/validar-dados-impressos-nao-bandeirados
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir do envio dos dados sens\u00C3\u00ADveis impressos nele. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o para a realiza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00B5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00C3\u00B4nico (URA), dentre outras.
     - examples: [{contentType=application/json, example={
  "idStatusConta" : 123456789,
  "idConta" : 123456789,
  "idStatusCartao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "criptogramaResposta" : "aeiou",
  "statusConta" : "aeiou",
  "statusCartao" : "aeiou",
  "numeroAgencia" : 123
}}]
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter nomePortador: (query) Nome do portador do cart\u00C3\u00A3o 
     - parameter dataValidade: (query) Data de validade do cart\u00C3\u00A3o no formato yyyy-MM 
     - parameter codigoSeguranca: (query) C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros 

     - returns: RequestBuilder<ValidaCartao> 
     */
    public class func validarDadosImpressosNaoBandeiradoUsingGETWithRequestBuilder(numeroCartao numeroCartao: String, nomePortador: String, dataValidade: String, codigoSeguranca: String) -> RequestBuilder<ValidaCartao> {
        let path = "/api/cartoes/validar-dados-impressos-nao-bandeirados"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "numero_cartao": numeroCartao,
            "nome_portador": nomePortador,
            "data_validade": dataValidade,
            "codigo_seguranca": codigoSeguranca
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ValidaCartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Permite validar um Cart\u00C3\u00A3o com bandeira Mastercard a partir do de55
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter criptograma: (query) Criptograma do cart\u00C3\u00A3o no formato de55 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarDe55CartaoMastercardUsingGET(numeroCartao numeroCartao: String, criptograma: String, completion: ((data: ValidaCartao?, error: ErrorType?) -> Void)) {
        validarDe55CartaoMastercardUsingGETWithRequestBuilder(numeroCartao: numeroCartao, criptograma: criptograma).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite validar um Cart\u00C3\u00A3o com bandeira Mastercard a partir do de55
     
     - GET /api/cartoes/validar-de55-mastercard
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem o DE55 gerado a partir da leitura de um chip EMV de um Cart\u00C3\u00A3o com bandeira Mastercard a fim de verificar a sua autenticidade. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o antes de permitir que o portador realize transa\u00C3\u00A7\u00C3\u00B5es diversas, como as de compra e saque na modalidade d\u00C3\u00A9bito em conta corrente, dentre outras.
     - examples: [{contentType=application/json, example={
  "idStatusConta" : 123456789,
  "idConta" : 123456789,
  "idStatusCartao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "criptogramaResposta" : "aeiou",
  "statusConta" : "aeiou",
  "statusCartao" : "aeiou",
  "numeroAgencia" : 123
}}]
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter criptograma: (query) Criptograma do cart\u00C3\u00A3o no formato de55 

     - returns: RequestBuilder<ValidaCartao> 
     */
    public class func validarDe55CartaoMastercardUsingGETWithRequestBuilder(numeroCartao numeroCartao: String, criptograma: String) -> RequestBuilder<ValidaCartao> {
        let path = "/api/cartoes/validar-de55-mastercard"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "numero_cartao": numeroCartao,
            "criptograma": criptograma
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ValidaCartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Permite validar a senha de um Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarSenhaUsingGET(id id: Int, completion: ((data: ValidaSenhaCartao?, error: ErrorType?) -> Void)) {
        validarSenhaUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite validar a senha de um Cart\u00C3\u00A3o
     
     - GET /api/cartoes/{id}/validar-senha
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir validar que a senha informada pelo portador de um determinado cart\u00C3\u00A3o est\u00C3\u00A1 correta.
     - examples: [{contentType=application/json, example={
  "quantidadeTentativas" : 123,
  "idStatusCartao" : 123456789,
  "mensagem" : "aeiou",
  "quantidadeMaximaTentativas" : 123,
  "statusCartao" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<ValidaSenhaCartao> 
     */
    public class func validarSenhaUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<ValidaSenhaCartao> {
        var path = "/api/cartoes/{id}/validar-senha"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ValidaSenhaCartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Permite validar um Cart\u00C3\u00A3o Bandeirado a partir da Tarja
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter trilha1: (query) Trilha 1 do cart\u00C3\u00A3o a ser validado 
     - parameter trilha2: (query) Trilha 2 do cart\u00C3\u00A3o a ser validado 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarTarjaUsingGET(numeroCartao numeroCartao: String, trilha1: String, trilha2: String, completion: ((data: ValidaCartao?, error: ErrorType?) -> Void)) {
        validarTarjaUsingGETWithRequestBuilder(numeroCartao: numeroCartao, trilha1: trilha1, trilha2: trilha2).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite validar um Cart\u00C3\u00A3o Bandeirado a partir da Tarja
     
     - GET /api/cartoes/validar-tarja
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir da leitura da tarja magn\u00C3\u00A9tica do mesmo. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o antes de permitir que o portador realize transa\u00C3\u00A7\u00C3\u00B5es diversas, como as de compra e saque na modalidade d\u00C3\u00A9bito em conta corrente, dentre outras.
     - examples: [{contentType=application/json, example={
  "idStatusConta" : 123456789,
  "idConta" : 123456789,
  "idStatusCartao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "criptogramaResposta" : "aeiou",
  "statusConta" : "aeiou",
  "statusCartao" : "aeiou",
  "numeroAgencia" : 123
}}]
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter trilha1: (query) Trilha 1 do cart\u00C3\u00A3o a ser validado 
     - parameter trilha2: (query) Trilha 2 do cart\u00C3\u00A3o a ser validado 

     - returns: RequestBuilder<ValidaCartao> 
     */
    public class func validarTarjaUsingGETWithRequestBuilder(numeroCartao numeroCartao: String, trilha1: String, trilha2: String) -> RequestBuilder<ValidaCartao> {
        let path = "/api/cartoes/validar-tarja"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "numero_cartao": numeroCartao,
            "trilha1": trilha1,
            "trilha2": trilha2
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ValidaCartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

}
