//
// CartaoAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CartaoAPI: APIBase {
    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o da senha de um Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarAlterarSenhaUsingPUT(id id: Int, completion: ((data: String?, error: ErrorType?) -> Void)) {
        alterarAlterarSenhaUsingPUTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o da senha de um Cart\u00C3\u00A3o
     
     - PUT /api/cartoes/{id}/alterar-senha
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que o portador de um determinado cart\u00C3\u00A3o possa definir uma senha a sua escolha.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<String> 
     */
    public class func alterarAlterarSenhaUsingPUTWithRequestBuilder(id id: Int) -> RequestBuilder<String> {
        var path = "/api/cartoes/{id}/alterar-senha"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o do Status de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter idStatusImpressao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status Impress\u00C3\u00A3o (Id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarStatusImpressaoUsingPUT(id id: Int, idStatusImpressao: Int, completion: ((data: HistoricoImpressaoCartao?, error: ErrorType?) -> Void)) {
        alterarStatusImpressaoUsingPUTWithRequestBuilder(id: id, idStatusImpressao: idStatusImpressao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o do Status de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o
     
     - PUT /api/cartoes/{id}/alterar-status-impressao
     - Este m\u00C3\u00A9todo permite que uma Aplica\u00C3\u00A7\u00C3\u00A3o que realize a impress\u00C3\u00A3o de cart\u00C3\u00B5es possa indicar que um determinado idCartao fora impresso ou est\u00C3\u00A1 em processo de impress\u00C3\u00A3o. Para isso, basta informar o respectivo c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do cart\u00C3\u00A3o (id) que deseja ter seu um determinado id_status_impressao atribu\u00C3\u00ADdo a ele. Por padr\u00C3\u00A3o, cart\u00C3\u00B5es provis\u00C3\u00B3rios ou que j\u00C3\u00A1 tenham sido inclu\u00C3\u00ADdos em um arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica ter\u00C3\u00A3o esta requisi\u00C3\u00A7\u00C3\u00A3o negada, se utilizada.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idStatusImpressaoCartao" : 123456789,
  "idCartao" : 123456789,
  "mensagemHistorico" : "aeiou",
  "dataHistorico" : "2000-01-23T04:56:07.000+0000",
  "id" : 123456789
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter idStatusImpressao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status Impress\u00C3\u00A3o (Id). 

     - returns: RequestBuilder<HistoricoImpressaoCartao> 
     */
    public class func alterarStatusImpressaoUsingPUTWithRequestBuilder(id id: Int, idStatusImpressao: Int) -> RequestBuilder<HistoricoImpressaoCartao> {
        var path = "/api/cartoes/{id}/alterar-status-impressao"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_status_impressao": idStatusImpressao
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<HistoricoImpressaoCartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza a atribui\u00C3\u00A7\u00C3\u00A3o de um cart\u00C3\u00A3o pr\u00C3\u00A9-pago a uma pessoa
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id) 
     - parameter idPessoa: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de uma Pessoa (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func atribuirPessoaUsingPUT(id id: Int, idPessoa: Int, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        atribuirPessoaUsingPUTWithRequestBuilder(id: id, idPessoa: idPessoa).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a atribui\u00C3\u00A7\u00C3\u00A3o de um cart\u00C3\u00A3o pr\u00C3\u00A9-pago a uma pessoa
     
     - PUT /api/cartoes/{id}/atribuir-pessoa
     - Esta m\u00C3\u00A9todo permite que um cart\u00C3\u00A3o pr\u00C3\u00A9-pago impresso de forma avulsa e an\u00C3\u00B4nimo seja atribu\u00C3\u00ADdo a uma pessoa para que esta passe a ser a portadora titular dele.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idConta" : 123456789,
  "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "codigoDesbloqueio" : "aeiou",
  "idEstagioCartao" : 123456789,
  "arquivoImpressao" : "aeiou",
  "numeroCartao" : "aeiou",
  "idPessoa" : 123456789,
  "idProduto" : 123456789,
  "flagProvisorio" : 123,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idStatusCartao" : 123456789,
  "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagImpressaoOrigemComercial" : 123,
  "sequencialCartao" : 123,
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tipoPortador" : "aeiou",
  "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id) 
     - parameter idPessoa: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de uma Pessoa (id). 

     - returns: RequestBuilder<Cartao> 
     */
    public class func atribuirPessoaUsingPUTWithRequestBuilder(id id: Int, idPessoa: Int) -> RequestBuilder<Cartao> {
        var path = "/api/cartoes/{id}/atribuir-pessoa"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_pessoa": idPessoa
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Cartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o bloqueio de um determinado Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter idStatus: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Novo Status Cart\u00C3\u00A3o. 
     - parameter observacao: (query) Texto informando uma observa\u00C3\u00A7\u00C3\u00A3o sobre o bloqueio. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func bloquearUsingPUT(id id: Int, idStatus: Int, observacao: String, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        bloquearUsingPUTWithRequestBuilder(id: id, idStatus: idStatus, observacao: observacao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o bloqueio de um determinado Cart\u00C3\u00A3o
     
     - PUT /api/cartoes/{id}/bloquear
     - Este m\u00C3\u00A9todo permite a realiza\u00C3\u00A7\u00C3\u00A3o do bloqueio (tempor\u00C3\u00A1rio) ou do cancelamento (definitivo) de um determinado cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id). Para isso, \u00C3\u00A9 preciso informar qual o motivo deste bloqueio que nada mais \u00C3\u00A9 do que atribuir um novo StatusCartao para ele dentre as op\u00C3\u00A7\u00C3\u00B5es praticadas pelo emissor.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idConta" : 123456789,
  "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "codigoDesbloqueio" : "aeiou",
  "idEstagioCartao" : 123456789,
  "arquivoImpressao" : "aeiou",
  "numeroCartao" : "aeiou",
  "idPessoa" : 123456789,
  "idProduto" : 123456789,
  "flagProvisorio" : 123,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idStatusCartao" : 123456789,
  "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagImpressaoOrigemComercial" : 123,
  "sequencialCartao" : 123,
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tipoPortador" : "aeiou",
  "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter idStatus: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Novo Status Cart\u00C3\u00A3o. 
     - parameter observacao: (query) Texto informando uma observa\u00C3\u00A7\u00C3\u00A3o sobre o bloqueio. 

     - returns: RequestBuilder<Cartao> 
     */
    public class func bloquearUsingPUTWithRequestBuilder(id id: Int, idStatus: Int, observacao: String) -> RequestBuilder<Cartao> {
        var path = "/api/cartoes/{id}/bloquear"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_status": idStatus,
            "observacao": observacao
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Cartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o cadastro da senha de um Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func cadastrarAlterarSenhaUsingPOST(id id: Int, completion: ((data: String?, error: ErrorType?) -> Void)) {
        cadastrarAlterarSenhaUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro da senha de um Cart\u00C3\u00A3o
     
     - POST /api/cartoes/{id}/cadastrar-senha
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que o portador de um determinado cart\u00C3\u00A3o possa definir uma senha a sua escolha.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<String> 
     */
    public class func cadastrarAlterarSenhaUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<String> {
        var path = "/api/cartoes/{id}/cadastrar-senha"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os limites do Portador do Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarLimiteDisponibilidadeUsingGET(id id: Int, completion: ((data: LimiteDisponibilidade?, error: ErrorType?) -> Void)) {
        consultarLimiteDisponibilidadeUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os limites do Portador do Cart\u00C3\u00A3o
     
     - GET /api/cartoes/{id}/limites-disponibilidades
     - Este m\u00C3\u00A9todo permite consultar os Limites configurados para o Portador de um determinado Cart\u00C3\u00A3o, seja ele o titular da conta ou um adicional, a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "saldoDisponivelCompraInternacional" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoDisponivelSaque" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteParcelas" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteSaquePeriodo" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteGlobal" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteInternacionalSaqueGlobal" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoDisponivelCompra" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteInternacionalSaquePeriodo" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteParcelado" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoDisponivelSaqueInternacional" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoPontosFidelidade" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteInternacionalParcelado" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoDisponivelParcelas" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123456789,
  "limiteConsignado" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoDisponivelGlobal" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoDisponivelParcelado" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteInternacionalParcelas" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteSaqueGlobal" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteInternacionalCompra" : 1.3579000000000001069366817318950779736042022705078125,
  "limiteCompra" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<LimiteDisponibilidade> 
     */
    public class func consultarLimiteDisponibilidadeUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<LimiteDisponibilidade> {
        var path = "/api/cartoes/{id}/limites-disponibilidades"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<LimiteDisponibilidade>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Permite consultar um determinado Lote de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do lote de cart\u00C3\u00B5es (id) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarLotesCartoesPrePagosUsingGET(id id: Int, completion: ((data: LoteCartoesPrePagos?, error: ErrorType?) -> Void)) {
        consultarLotesCartoesPrePagosUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite consultar um determinado Lote de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
     
     - GET /api/cartoes/lotes-cartoes-pre-pagos/{id}
     - Este m\u00C3\u00A9todo permite consultar os cart\u00C3\u00B5es pr\u00C3\u00A9-pagos existentes na base do emissor atrav\u00C3\u00A9s do id do lote.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idOrigemComercial" : 123456789,
  "idProduto" : 123456789,
  "idImagem" : 123456789,
  "idEndereco" : 123456789,
  "statusProcessamento" : 123,
  "idTipoCartao" : 123456789,
  "id" : 123456789,
  "quantidade" : 123,
  "dataCadastro" : "2000-01-23T04:56:07.000+0000",
  "usuarioCadastro" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do lote de cart\u00C3\u00B5es (id) 

     - returns: RequestBuilder<LoteCartoesPrePagos> 
     */
    public class func consultarLotesCartoesPrePagosUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<LoteCartoesPrePagos> {
        var path = "/api/cartoes/lotes-cartoes-pre-pagos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<LoteCartoesPrePagos>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados do Portador do Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarPortadorUsingGET(id id: Int, completion: ((data: Portador?, error: ErrorType?) -> Void)) {
        consultarPortadorUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados do Portador do Cart\u00C3\u00A3o
     
     - GET /api/cartoes/{id}/portadores
     - Este m\u00C3\u00A9todo permite consultar as informa\u00C3\u00A7\u00C3\u00B5es do Portador de um determinado Cart\u00C3\u00A3o a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "idConta" : 123456789,
  "idProduto" : 123456789,
  "dataCancelamentoPortador" : "2000-01-23T04:56:07.000+0000",
  "idTipoCartao" : 123456789,
  "idParentesco" : 123456789,
  "dataCadastroPortador" : "2000-01-23T04:56:07.000+0000",
  "nomeImpresso" : "aeiou",
  "flagAtivo" : 123,
  "tipoPortador" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<Portador> 
     */
    public class func consultarPortadorUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<Portador> {
        var path = "/api/cartoes/{id}/portadores"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Portador>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de um determinado Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET2(id id: Int, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        consultarUsingGET2WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Cart\u00C3\u00A3o
     
     - GET /api/cartoes/{id}
     - Este m\u00C3\u00A9todo permite consultar as informa\u00C3\u00A7\u00C3\u00B5es b\u00C3\u00A1sicas de um determinado Cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idConta" : 123456789,
  "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "codigoDesbloqueio" : "aeiou",
  "idEstagioCartao" : 123456789,
  "arquivoImpressao" : "aeiou",
  "numeroCartao" : "aeiou",
  "idPessoa" : 123456789,
  "idProduto" : 123456789,
  "flagProvisorio" : 123,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idStatusCartao" : 123456789,
  "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagImpressaoOrigemComercial" : 123,
  "sequencialCartao" : 123,
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tipoPortador" : "aeiou",
  "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<Cartao> 
     */
    public class func consultarUsingGET2WithRequestBuilder(id id: Int) -> RequestBuilder<Cartao> {
        var path = "/api/cartoes/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Cartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Consultar uma transfer\u00C3\u00AAncia banc\u00C3\u00A1ria
     
     - parameter id: (path) Id Cart\u00C3\u00A3o 
     - parameter idTransferencia: (path) Id Transfer\u00C3\u00AAncia 
     - parameter idContaBancariaDestino: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria de destino (id) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET20(id id: Int, idTransferencia: Int, idContaBancariaDestino: Int?, completion: ((data: LinkTransferenciaBancariaResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET20WithRequestBuilder(id: id, idTransferencia: idTransferencia, idContaBancariaDestino: idContaBancariaDestino).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consultar uma transfer\u00C3\u00AAncia banc\u00C3\u00A1ria
     
     - GET /api/cartoes/{id}/transferencias-creditos-contas-bancarias/{idTransferencia}
     - Este recurso permite consultar os detalhes de uma determinada transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito realizada entre contas. De modo geral, esta opera\u00C3\u00A7\u00C3\u00A3o poder\u00C3\u00A1 ser utilizada para uma consulta simples destes detalhes ou para realizar a montagem de um comprovante de 2\u00C2\u00AA via de transfer\u00C3\u00AAncia entre contas.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "numeroParcelas" : 123,
  "idOperacao" : 123456789,
  "idAutorizacao" : 123456789,
  "origem" : "aeiou",
  "valorCompra" : 1.3579000000000001069366817318950779736042022705078125,
  "idTransferencia" : 123456789,
  "idContaPortador" : 123456789,
  "dataCompra" : "2000-01-23T04:56:07.000+0000",
  "dataVencimentoPadrao" : "aeiou",
  "nsuorigem" : 123456789,
  "valorContrato" : 1.3579000000000001069366817318950779736042022705078125,
  "valorTAC" : 1.3579000000000001069366817318950779736042022705078125,
  "dataAutorizacao" : "2000-01-23T04:56:07.000+0000",
  "valorEntrada" : 1.3579000000000001069366817318950779736042022705078125,
  "idCartao" : 123456789,
  "idEstabelecimento" : 123456789,
  "idConta" : 123456789,
  "valor" : 1.3579000000000001069366817318950779736042022705078125,
  "terminal" : "aeiou",
  "codigoAutorizacao" : "aeiou",
  "valorParcela" : 1.3579000000000001069366817318950779736042022705078125,
  "dataMovimento" : "2000-01-23T04:56:07.000+0000",
  "taxaJuros" : 1.3579000000000001069366817318950779736042022705078125,
  "numeroEstabelecimento" : 123456789,
  "dataVencimentoReal" : "2000-01-23T04:56:07.000+0000",
  "valorIOF" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) Id Cart\u00C3\u00A3o 
     - parameter idTransferencia: (path) Id Transfer\u00C3\u00AAncia 
     - parameter idContaBancariaDestino: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria de destino (id) (optional)

     - returns: RequestBuilder<LinkTransferenciaBancariaResponse> 
     */
    public class func consultarUsingGET20WithRequestBuilder(id id: Int, idTransferencia: Int, idContaBancariaDestino: Int?) -> RequestBuilder<LinkTransferenciaBancariaResponse> {
        var path = "/api/cartoes/{id}/transferencias-creditos-contas-bancarias/{idTransferencia}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{idTransferencia}", withString: "\(idTransferencia)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_conta_bancaria_destino": idContaBancariaDestino
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<LinkTransferenciaBancariaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o desbloqueio de um determinado Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func desbloquearUsingPUT(id id: Int, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        desbloquearUsingPUTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o desbloqueio de um determinado Cart\u00C3\u00A3o
     
     - PUT /api/cartoes/{id}/desbloquear
     - Este m\u00C3\u00A9todo permite que seja desbloqueado um determinado cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idConta" : 123456789,
  "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "codigoDesbloqueio" : "aeiou",
  "idEstagioCartao" : 123456789,
  "arquivoImpressao" : "aeiou",
  "numeroCartao" : "aeiou",
  "idPessoa" : 123456789,
  "idProduto" : 123456789,
  "flagProvisorio" : 123,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idStatusCartao" : 123456789,
  "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagImpressaoOrigemComercial" : 123,
  "sequencialCartao" : 123,
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tipoPortador" : "aeiou",
  "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<Cartao> 
     */
    public class func desbloquearUsingPUTWithRequestBuilder(id id: Int) -> RequestBuilder<Cartao> {
        var path = "/api/cartoes/{id}/desbloquear"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Cartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Permite gerar um novo Lote de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
     
     - parameter idOrigemComercial: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id). (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id). (optional)
     - parameter idTipoCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id). (optional)
     - parameter idImagem: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id). (optional)
     - parameter idEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (optional)
     - parameter quantidadeCartoes: (query) N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func gerarLotesCartoesPrePagosUsingPOST(idOrigemComercial idOrigemComercial: Int?, idProduto: Int?, idTipoCartao: Int?, idImagem: Int?, idEndereco: Int?, quantidadeCartoes: Int?, completion: ((data: LoteCartoesPrePagos?, error: ErrorType?) -> Void)) {
        gerarLotesCartoesPrePagosUsingPOSTWithRequestBuilder(idOrigemComercial: idOrigemComercial, idProduto: idProduto, idTipoCartao: idTipoCartao, idImagem: idImagem, idEndereco: idEndereco, quantidadeCartoes: quantidadeCartoes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite gerar um novo Lote de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
     
     - POST /api/cartoes/lotes-cartoes-pre-pagos
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores gerem uma determinada quantidade de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pagos, de forma n\u00C3\u00A3o nominal, os quais poder\u00C3\u00A3o ser comercializados e posteriormente vinculados a um cliente que o adquirir. Para isso, al\u00C3\u00A9m de definir quantos cart\u00C3\u00B5es dever\u00C3\u00A3o ser gerados, ser\u00C3\u00A1 poss\u00C3\u00ADvel definir qual a Origem Comercial, o Produto, o Tipo do Cart\u00C3\u00A3o, a Imagem e o Endere\u00C3\u00A7o para entrega dos Cart\u00C3\u00B5es presentes no lote gerado. Por padr\u00C3\u00A3o, todos os cart\u00C3\u00B5es ser\u00C3\u00A3o associados a um idPessoa fict\u00C3\u00ADcio e receber\u00C3\u00A1 um idConta \u00C3\u00BAnico para cada um deles. Feito isso, os Cart\u00C3\u00B5es gerados por esta opera\u00C3\u00A7\u00C3\u00A3o seguir\u00C3\u00A3o os mesmos processos de impress\u00C3\u00A3o via gr\u00C3\u00A1fica previamente definidos entre o Emissor e a Conductor.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idOrigemComercial" : 123456789,
  "idProduto" : 123456789,
  "idImagem" : 123456789,
  "idEndereco" : 123456789,
  "statusProcessamento" : 123,
  "idTipoCartao" : 123456789,
  "id" : 123456789,
  "quantidade" : 123,
  "dataCadastro" : "2000-01-23T04:56:07.000+0000",
  "usuarioCadastro" : "aeiou"
}}]
     
     - parameter idOrigemComercial: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id). (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id). (optional)
     - parameter idTipoCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id). (optional)
     - parameter idImagem: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id). (optional)
     - parameter idEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (optional)
     - parameter quantidadeCartoes: (query) N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote. (optional)

     - returns: RequestBuilder<LoteCartoesPrePagos> 
     */
    public class func gerarLotesCartoesPrePagosUsingPOSTWithRequestBuilder(idOrigemComercial idOrigemComercial: Int?, idProduto: Int?, idTipoCartao: Int?, idImagem: Int?, idEndereco: Int?, quantidadeCartoes: Int?) -> RequestBuilder<LoteCartoesPrePagos> {
        let path = "/api/cartoes/lotes-cartoes-pre-pagos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idOrigemComercial": idOrigemComercial,
            "idProduto": idProduto,
            "idTipoCartao": idTipoCartao,
            "idImagem": idImagem,
            "idEndereco": idEndereco,
            "quantidadeCartoes": quantidadeCartoes
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<LoteCartoesPrePagos>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Gerar uma nova via de Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func gerarNovaViaUsingPOST(id id: Int, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        gerarNovaViaUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Gerar uma nova via de Cart\u00C3\u00A3o
     
     - POST /api/cartoes/{id}/gerar-nova-via
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores ou seus clientes possam solicitar a gera\u00C3\u00A7\u00C3\u00A3o de uma nova via de Cart\u00C3\u00A3o que ser\u00C3\u00A1 encaminhando para impress\u00C3\u00A3o e postagem de acordo com os fluxos padr\u00C3\u00B5es j\u00C3\u00A1 definidos pelo emissor. Para isso, \u00C3\u00A9 preciso que o cliente j\u00C3\u00A1 possua um cart\u00C3\u00A3o gerado e informar o C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o deste (idCartao) para que ele possa utilizar esta opera\u00C3\u00A7\u00C3\u00A3o. Assim, esta funcionalidade se aplica apenas para a gera\u00C3\u00A7\u00C3\u00A3o de cart\u00C3\u00B5es f\u00C3\u00ADsicos.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idConta" : 123456789,
  "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "codigoDesbloqueio" : "aeiou",
  "idEstagioCartao" : 123456789,
  "arquivoImpressao" : "aeiou",
  "numeroCartao" : "aeiou",
  "idPessoa" : 123456789,
  "idProduto" : 123456789,
  "flagProvisorio" : 123,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idStatusCartao" : 123456789,
  "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagImpressaoOrigemComercial" : 123,
  "sequencialCartao" : 123,
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tipoPortador" : "aeiou",
  "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id) 

     - returns: RequestBuilder<Cartao> 
     */
    public class func gerarNovaViaUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<Cartao> {
        var path = "/api/cartoes/{id}/gerar-nova-via"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Cartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Permite listar os Lotes de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     - parameter idOrigemComercial: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id). (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id). (optional)
     - parameter idTipoCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id). (optional)
     - parameter idImagem: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id). (optional)
     - parameter idEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (optional)
     - parameter quantidadeCartoes: (query) N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote. (optional)
     - parameter dataCadastro: (query) Data de Cadastro do Lote de Cart\u00C3\u00B5es N\u00C3\u00A3o Nominais. (optional)
     - parameter usuarioCadastro: (query) Nome do Usu\u00C3\u00A1rio que criou o Lote. (optional)
     - parameter statusProcessamento: (query) Indica o Status de Processamento do Lote. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarLotesCartoesPrePagosUsingGET(page page: Int?, limit: Int?, idOrigemComercial: Int?, idProduto: Int?, idTipoCartao: Int?, idImagem: Int?, idEndereco: Int?, quantidadeCartoes: Int?, dataCadastro: NSDate?, usuarioCadastro: String?, statusProcessamento: Int?, completion: ((data: PageLoteCartoesPrePagosResponse?, error: ErrorType?) -> Void)) {
        listarLotesCartoesPrePagosUsingGETWithRequestBuilder(page: page, limit: limit, idOrigemComercial: idOrigemComercial, idProduto: idProduto, idTipoCartao: idTipoCartao, idImagem: idImagem, idEndereco: idEndereco, quantidadeCartoes: quantidadeCartoes, dataCadastro: dataCadastro, usuarioCadastro: usuarioCadastro, statusProcessamento: statusProcessamento).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite listar os Lotes de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
     
     - GET /api/cartoes/lotes-cartoes-pre-pagos
     - Este m\u00C3\u00A9todo permite que sejam listados os cart\u00C3\u00B5es pr\u00C3\u00A9-pagos existentes na base do emissor.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idOrigemComercial" : 123456789,
    "idProduto" : 123456789,
    "idImagem" : 123456789,
    "idEndereco" : 123456789,
    "statusProcessamento" : 123,
    "idTipoCartao" : 123456789,
    "id" : 123456789,
    "quantidade" : 123,
    "dataCadastro" : "2000-01-23T04:56:07.000+0000",
    "usuarioCadastro" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     - parameter idOrigemComercial: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id). (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id). (optional)
     - parameter idTipoCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id). (optional)
     - parameter idImagem: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id). (optional)
     - parameter idEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (optional)
     - parameter quantidadeCartoes: (query) N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote. (optional)
     - parameter dataCadastro: (query) Data de Cadastro do Lote de Cart\u00C3\u00B5es N\u00C3\u00A3o Nominais. (optional)
     - parameter usuarioCadastro: (query) Nome do Usu\u00C3\u00A1rio que criou o Lote. (optional)
     - parameter statusProcessamento: (query) Indica o Status de Processamento do Lote. (optional)

     - returns: RequestBuilder<PageLoteCartoesPrePagosResponse> 
     */
    public class func listarLotesCartoesPrePagosUsingGETWithRequestBuilder(page page: Int?, limit: Int?, idOrigemComercial: Int?, idProduto: Int?, idTipoCartao: Int?, idImagem: Int?, idEndereco: Int?, quantidadeCartoes: Int?, dataCadastro: NSDate?, usuarioCadastro: String?, statusProcessamento: Int?) -> RequestBuilder<PageLoteCartoesPrePagosResponse> {
        let path = "/api/cartoes/lotes-cartoes-pre-pagos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "idOrigemComercial": idOrigemComercial,
            "idProduto": idProduto,
            "idTipoCartao": idTipoCartao,
            "idImagem": idImagem,
            "idEndereco": idEndereco,
            "quantidadeCartoes": quantidadeCartoes,
            "dataCadastro": dataCadastro,
            "usuarioCadastro": usuarioCadastro,
            "statusProcessamento": statusProcessamento
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageLoteCartoesPrePagosResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Listar as transfer\u00C3\u00AAncias banc\u00C3\u00A1rias realizadas
     
     - parameter id: (path) Id Cart\u00C3\u00A3o 
     - parameter idContaBancariaDestino: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria de destino (id) (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET19(id id: Int, idContaBancariaDestino: Int?, page: Int?, limit: Int?, completion: ((data: LinkPageTransferenciaBancariaResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET19WithRequestBuilder(id: id, idContaBancariaDestino: idContaBancariaDestino, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Listar as transfer\u00C3\u00AAncias banc\u00C3\u00A1rias realizadas
     
     - GET /api/cartoes/{id}/transferencias-creditos-contas-bancarias
     - Este recurso tem como objetivo permitir que o portador de um Cart\u00C3\u00A3o possa consultar uma lista das Transfer\u00C3\u00AAncias Banc\u00C3\u00A1rias para os Favorecidos cadastrados.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "numeroParcelas" : 123,
    "idOperacao" : 123456789,
    "idAutorizacao" : 123456789,
    "origem" : "aeiou",
    "valorCompra" : 1.3579000000000001069366817318950779736042022705078125,
    "idTransferencia" : 123456789,
    "idContaPortador" : 123456789,
    "dataCompra" : "2000-01-23T04:56:07.000+0000",
    "dataVencimentoPadrao" : "aeiou",
    "nsuorigem" : 123456789,
    "valorContrato" : 1.3579000000000001069366817318950779736042022705078125,
    "valorTAC" : 1.3579000000000001069366817318950779736042022705078125,
    "dataAutorizacao" : "2000-01-23T04:56:07.000+0000",
    "valorEntrada" : 1.3579000000000001069366817318950779736042022705078125,
    "idCartao" : 123456789,
    "idEstabelecimento" : 123456789,
    "idConta" : 123456789,
    "valor" : 1.3579000000000001069366817318950779736042022705078125,
    "terminal" : "aeiou",
    "codigoAutorizacao" : "aeiou",
    "valorParcela" : 1.3579000000000001069366817318950779736042022705078125,
    "dataMovimento" : "2000-01-23T04:56:07.000+0000",
    "taxaJuros" : 1.3579000000000001069366817318950779736042022705078125,
    "numeroEstabelecimento" : 123456789,
    "dataVencimentoReal" : "2000-01-23T04:56:07.000+0000",
    "valorIOF" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (path) Id Cart\u00C3\u00A3o 
     - parameter idContaBancariaDestino: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria de destino (id) (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)

     - returns: RequestBuilder<LinkPageTransferenciaBancariaResponse> 
     */
    public class func listarUsingGET19WithRequestBuilder(id id: Int, idContaBancariaDestino: Int?, page: Int?, limit: Int?) -> RequestBuilder<LinkPageTransferenciaBancariaResponse> {
        var path = "/api/cartoes/{id}/transferencias-creditos-contas-bancarias"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_conta_bancaria_destino": idContaBancariaDestino,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<LinkPageTransferenciaBancariaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Cart\u00C3\u00B5es gerados pelo Emissor
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     - parameter idStatusCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id). (optional)
     - parameter idEstagioCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Est\u00C3\u00A1gio de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o (id). (optional)
     - parameter idConta: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta a qual o cart\u00C3\u00A3o pertence (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o cart\u00C3\u00A3o pertence (id) (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto a qual o cart\u00C3\u00A3o pertence (id). (optional)
     - parameter tipoPortador: (query) Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: (&#39;T&#39;: Titular, &#39;A&#39;: Adicional). (optional)
     - parameter numeroCartao: (query) Apresenta o n\u00C3\u00BAmero do cart\u00C3\u00A3o. (optional)
     - parameter nomeImpresso: (query) Apresenta o nome impresso no cart\u00C3\u00A3o. (optional)
     - parameter dataGeracao: (query) Apresenta a data em que o cart\u00C3\u00A3o foi gerado. (optional)
     - parameter dataStatusCartao: (query) Apresenta a data em que o idStatusCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver. (optional)
     - parameter dataEstagioCartao: (query) Apresenta a data em que o idEstagioCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver. (optional)
     - parameter dataValidade: (query) Apresenta a data de validade do cart\u00C3\u00A3o em formato yyyy-MM, quando houver. (optional)
     - parameter dataImpressao: (query) Apresenta a data em que o cart\u00C3\u00A3o fora impresso, caso impress\u00C3\u00A3o em loja, ou a data em que ele fora inclu\u00C3\u00ADdo no arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica. (optional)
     - parameter arquivoImpressao: (query) Apresenta o nome do arquivo onde o cart\u00C3\u00A3o fora inclu\u00C3\u00ADdo para impress\u00C3\u00A3o por uma gr\u00C3\u00A1fica, quando houver. (optional)
     - parameter flagImpressaoOrigemComercial: (query) Quando ativa, indica que o cart\u00C3\u00A3o fora impresso na Origem Comercial. (optional)
     - parameter flagProvisorio: (query) Quando ativa, indica que o cart\u00C3\u00A3o \u00C3\u00A9 provis\u00C3\u00B3rio. Ou seja, \u00C3\u00A9 um cart\u00C3\u00A3o para uso tempor\u00C3\u00A1rio quando se deseja permitir que o cliente transacione sem que ele tenha recebido um cart\u00C3\u00A3o definitivo. (optional)
     - parameter codigoDesbloqueio: (query) Apresenta um c\u00C3\u00B3digo espec\u00C3\u00ADfico para ser utilizado como vari\u00C3\u00A1vel no processo de desbloqueio do cart\u00C3\u00A3o para emissores que querem usar esta funcionalidade. (optional)
     - parameter sequencialCartao: (query) N\u00C3\u00BAmero sequencial do cart\u00C3\u00A3o (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET2(page page: Int?, limit: Int?, idStatusCartao: Int?, idEstagioCartao: Int?, idConta: Int?, idPessoa: Int?, idProduto: Int?, tipoPortador: String?, numeroCartao: String?, nomeImpresso: String?, dataGeracao: NSDate?, dataStatusCartao: NSDate?, dataEstagioCartao: NSDate?, dataValidade: String?, dataImpressao: NSDate?, arquivoImpressao: String?, flagImpressaoOrigemComercial: Int?, flagProvisorio: Int?, codigoDesbloqueio: String?, sequencialCartao: Int?, completion: ((data: PageCartoes?, error: ErrorType?) -> Void)) {
        listarUsingGET2WithRequestBuilder(page: page, limit: limit, idStatusCartao: idStatusCartao, idEstagioCartao: idEstagioCartao, idConta: idConta, idPessoa: idPessoa, idProduto: idProduto, tipoPortador: tipoPortador, numeroCartao: numeroCartao, nomeImpresso: nomeImpresso, dataGeracao: dataGeracao, dataStatusCartao: dataStatusCartao, dataEstagioCartao: dataEstagioCartao, dataValidade: dataValidade, dataImpressao: dataImpressao, arquivoImpressao: arquivoImpressao, flagImpressaoOrigemComercial: flagImpressaoOrigemComercial, flagProvisorio: flagProvisorio, codigoDesbloqueio: codigoDesbloqueio, sequencialCartao: sequencialCartao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Cart\u00C3\u00B5es gerados pelo Emissor
     
     - GET /api/cartoes
     - Este m\u00C3\u00A9todo permite que sejam listados os cart\u00C3\u00B5es existentes na base do emissor.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idConta" : 123456789,
    "dataStatusCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "codigoDesbloqueio" : "aeiou",
    "idEstagioCartao" : 123456789,
    "arquivoImpressao" : "aeiou",
    "numeroCartao" : "aeiou",
    "idPessoa" : 123456789,
    "idProduto" : 123456789,
    "flagProvisorio" : 123,
    "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "idStatusCartao" : 123456789,
    "dataEstagioCartao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "flagImpressaoOrigemComercial" : 123,
    "sequencialCartao" : 123,
    "id" : 123456789,
    "nomeImpresso" : "aeiou",
    "dataImpressao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "tipoPortador" : "aeiou",
    "dataGeracao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     - parameter idStatusCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id). (optional)
     - parameter idEstagioCartao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Est\u00C3\u00A1gio de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o (id). (optional)
     - parameter idConta: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta a qual o cart\u00C3\u00A3o pertence (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o cart\u00C3\u00A3o pertence (id) (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto a qual o cart\u00C3\u00A3o pertence (id). (optional)
     - parameter tipoPortador: (query) Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: (&#39;T&#39;: Titular, &#39;A&#39;: Adicional). (optional)
     - parameter numeroCartao: (query) Apresenta o n\u00C3\u00BAmero do cart\u00C3\u00A3o. (optional)
     - parameter nomeImpresso: (query) Apresenta o nome impresso no cart\u00C3\u00A3o. (optional)
     - parameter dataGeracao: (query) Apresenta a data em que o cart\u00C3\u00A3o foi gerado. (optional)
     - parameter dataStatusCartao: (query) Apresenta a data em que o idStatusCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver. (optional)
     - parameter dataEstagioCartao: (query) Apresenta a data em que o idEstagioCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver. (optional)
     - parameter dataValidade: (query) Apresenta a data de validade do cart\u00C3\u00A3o em formato yyyy-MM, quando houver. (optional)
     - parameter dataImpressao: (query) Apresenta a data em que o cart\u00C3\u00A3o fora impresso, caso impress\u00C3\u00A3o em loja, ou a data em que ele fora inclu\u00C3\u00ADdo no arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica. (optional)
     - parameter arquivoImpressao: (query) Apresenta o nome do arquivo onde o cart\u00C3\u00A3o fora inclu\u00C3\u00ADdo para impress\u00C3\u00A3o por uma gr\u00C3\u00A1fica, quando houver. (optional)
     - parameter flagImpressaoOrigemComercial: (query) Quando ativa, indica que o cart\u00C3\u00A3o fora impresso na Origem Comercial. (optional)
     - parameter flagProvisorio: (query) Quando ativa, indica que o cart\u00C3\u00A3o \u00C3\u00A9 provis\u00C3\u00B3rio. Ou seja, \u00C3\u00A9 um cart\u00C3\u00A3o para uso tempor\u00C3\u00A1rio quando se deseja permitir que o cliente transacione sem que ele tenha recebido um cart\u00C3\u00A3o definitivo. (optional)
     - parameter codigoDesbloqueio: (query) Apresenta um c\u00C3\u00B3digo espec\u00C3\u00ADfico para ser utilizado como vari\u00C3\u00A1vel no processo de desbloqueio do cart\u00C3\u00A3o para emissores que querem usar esta funcionalidade. (optional)
     - parameter sequencialCartao: (query) N\u00C3\u00BAmero sequencial do cart\u00C3\u00A3o (optional)

     - returns: RequestBuilder<PageCartoes> 
     */
    public class func listarUsingGET2WithRequestBuilder(page page: Int?, limit: Int?, idStatusCartao: Int?, idEstagioCartao: Int?, idConta: Int?, idPessoa: Int?, idProduto: Int?, tipoPortador: String?, numeroCartao: String?, nomeImpresso: String?, dataGeracao: NSDate?, dataStatusCartao: NSDate?, dataEstagioCartao: NSDate?, dataValidade: String?, dataImpressao: NSDate?, arquivoImpressao: String?, flagImpressaoOrigemComercial: Int?, flagProvisorio: Int?, codigoDesbloqueio: String?, sequencialCartao: Int?) -> RequestBuilder<PageCartoes> {
        let path = "/api/cartoes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "idStatusCartao": idStatusCartao,
            "idEstagioCartao": idEstagioCartao,
            "idConta": idConta,
            "idPessoa": idPessoa,
            "idProduto": idProduto,
            "tipoPortador": tipoPortador,
            "numeroCartao": numeroCartao,
            "nomeImpresso": nomeImpresso,
            "dataGeracao": dataGeracao,
            "dataStatusCartao": dataStatusCartao,
            "dataEstagioCartao": dataEstagioCartao,
            "dataValidade": dataValidade,
            "dataImpressao": dataImpressao,
            "arquivoImpressao": arquivoImpressao,
            "flagImpressaoOrigemComercial": flagImpressaoOrigemComercial,
            "flagProvisorio": flagProvisorio,
            "codigoDesbloqueio": codigoDesbloqueio,
            "sequencialCartao": sequencialCartao
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageCartoes>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realizar transfer\u00C3\u00AAncia banc\u00C3\u00A1ria entre bancos / contas
     
     - parameter id: (path) Id Cart\u00C3\u00A3o 
     - parameter dataCompra: (query) Data da transfer\u00C3\u00AAncia 
     - parameter proximoVencimentoPadrao: (query) Dia do vencimento padr\u00C3\u00A3o da fatura 
     - parameter proximoVencimentoReal: (query) Data do vencimento real da fatura 
     - parameter valorCompra: (query) Valor da transfer\u00C3\u00AAncia 
     - parameter nomeFavorecido: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. 
     - parameter documentoFavorecido: (query) N\u00C3\u00BAmero do CPF ou CNPJ. 
     - parameter banco: (query) C\u00C3\u00B3digo do banco 
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia 
     - parameter numeroConta: (query) N\u00C3\u00BAmero da conta 
     - parameter flagContaPoupanca: (query) Sinaliza se conta banc\u00C3\u00A1ria \u00C3\u00A9 poupan\u00C3\u00A7a (1: Poupan\u00C3\u00A7a, 0: Conta corrente) 
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     - parameter digitoAgencia: (query) D\u00C3\u00ADgito da ag\u00C3\u00AAncia (optional)
     - parameter digitoConta: (query) D\u00C3\u00ADgito da conta (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func transferirUsingPOST(id id: Int, dataCompra: NSDate, proximoVencimentoPadrao: NSDate, proximoVencimentoReal: NSDate, valorCompra: Double, nomeFavorecido: String, documentoFavorecido: String, banco: Int, numeroAgencia: String, numeroConta: String, flagContaPoupanca: Int, page: Int?, limit: Int?, digitoAgencia: String?, digitoConta: String?, completion: ((data: LinkTransferenciaBancariaResponse?, error: ErrorType?) -> Void)) {
        transferirUsingPOSTWithRequestBuilder(id: id, dataCompra: dataCompra, proximoVencimentoPadrao: proximoVencimentoPadrao, proximoVencimentoReal: proximoVencimentoReal, valorCompra: valorCompra, nomeFavorecido: nomeFavorecido, documentoFavorecido: documentoFavorecido, banco: banco, numeroAgencia: numeroAgencia, numeroConta: numeroConta, flagContaPoupanca: flagContaPoupanca, page: page, limit: limit, digitoAgencia: digitoAgencia, digitoConta: digitoConta).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realizar transfer\u00C3\u00AAncia banc\u00C3\u00A1ria entre bancos / contas
     
     - POST /api/cartoes/{id}/transferencias-creditos-contas-bancarias
     - Este recurso tem como objetivo permitir que o portador de um cart\u00C3\u00A3o possa realizar a transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito para outro cliente do mesmo emissor. Assim, o valor do cr\u00C3\u00A9dito somado a tarifa para transfer\u00C3\u00AAncia, quando praticada pelo emissor, ser\u00C3\u00A1 debitado da conta de origem, se houver saldo suficiente, e ser\u00C3\u00A1 creditado na conta de destino.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "numeroParcelas" : 123,
  "idOperacao" : 123456789,
  "idAutorizacao" : 123456789,
  "origem" : "aeiou",
  "valorCompra" : 1.3579000000000001069366817318950779736042022705078125,
  "idTransferencia" : 123456789,
  "idContaPortador" : 123456789,
  "dataCompra" : "2000-01-23T04:56:07.000+0000",
  "dataVencimentoPadrao" : "aeiou",
  "nsuorigem" : 123456789,
  "valorContrato" : 1.3579000000000001069366817318950779736042022705078125,
  "valorTAC" : 1.3579000000000001069366817318950779736042022705078125,
  "dataAutorizacao" : "2000-01-23T04:56:07.000+0000",
  "valorEntrada" : 1.3579000000000001069366817318950779736042022705078125,
  "idCartao" : 123456789,
  "idEstabelecimento" : 123456789,
  "idConta" : 123456789,
  "valor" : 1.3579000000000001069366817318950779736042022705078125,
  "terminal" : "aeiou",
  "codigoAutorizacao" : "aeiou",
  "valorParcela" : 1.3579000000000001069366817318950779736042022705078125,
  "dataMovimento" : "2000-01-23T04:56:07.000+0000",
  "taxaJuros" : 1.3579000000000001069366817318950779736042022705078125,
  "numeroEstabelecimento" : 123456789,
  "dataVencimentoReal" : "2000-01-23T04:56:07.000+0000",
  "valorIOF" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) Id Cart\u00C3\u00A3o 
     - parameter dataCompra: (query) Data da transfer\u00C3\u00AAncia 
     - parameter proximoVencimentoPadrao: (query) Dia do vencimento padr\u00C3\u00A3o da fatura 
     - parameter proximoVencimentoReal: (query) Data do vencimento real da fatura 
     - parameter valorCompra: (query) Valor da transfer\u00C3\u00AAncia 
     - parameter nomeFavorecido: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. 
     - parameter documentoFavorecido: (query) N\u00C3\u00BAmero do CPF ou CNPJ. 
     - parameter banco: (query) C\u00C3\u00B3digo do banco 
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia 
     - parameter numeroConta: (query) N\u00C3\u00BAmero da conta 
     - parameter flagContaPoupanca: (query) Sinaliza se conta banc\u00C3\u00A1ria \u00C3\u00A9 poupan\u00C3\u00A7a (1: Poupan\u00C3\u00A7a, 0: Conta corrente) 
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     - parameter digitoAgencia: (query) D\u00C3\u00ADgito da ag\u00C3\u00AAncia (optional)
     - parameter digitoConta: (query) D\u00C3\u00ADgito da conta (optional)

     - returns: RequestBuilder<LinkTransferenciaBancariaResponse> 
     */
    public class func transferirUsingPOSTWithRequestBuilder(id id: Int, dataCompra: NSDate, proximoVencimentoPadrao: NSDate, proximoVencimentoReal: NSDate, valorCompra: Double, nomeFavorecido: String, documentoFavorecido: String, banco: Int, numeroAgencia: String, numeroConta: String, flagContaPoupanca: Int, page: Int?, limit: Int?, digitoAgencia: String?, digitoConta: String?) -> RequestBuilder<LinkTransferenciaBancariaResponse> {
        var path = "/api/cartoes/{id}/transferencias-creditos-contas-bancarias"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "dataCompra": dataCompra,
            "proximoVencimentoPadrao": proximoVencimentoPadrao,
            "proximoVencimentoReal": proximoVencimentoReal,
            "valorCompra": valorCompra,
            "nomeFavorecido": nomeFavorecido,
            "documentoFavorecido": documentoFavorecido,
            "banco": banco,
            "numeroAgencia": numeroAgencia,
            "digitoAgencia": digitoAgencia,
            "numeroConta": numeroConta,
            "digitoConta": digitoConta,
            "flagContaPoupanca": flagContaPoupanca
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<LinkTransferenciaBancariaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Permite validar um Cart\u00C3\u00A3o com bandeira Mastercard a partir do chip
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter criptograma: (query) Criptograma do cart\u00C3\u00A3o no formato de55 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarCartaoChipBandeiradoUsingGET(numeroCartao numeroCartao: String, criptograma: String, completion: ((data: ValidaCartao?, error: ErrorType?) -> Void)) {
        validarCartaoChipBandeiradoUsingGETWithRequestBuilder(numeroCartao: numeroCartao, criptograma: criptograma).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite validar um Cart\u00C3\u00A3o com bandeira Mastercard a partir do chip
     
     - GET /api/cartoes/bandeirados/validar-chip
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem o criptograma gerado a partir da leitura de um chip EMV de um Cart\u00C3\u00A3o com bandeira Mastercard a fim de verificar a sua autenticidade. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o antes de permitir que o portador realize transa\u00C3\u00A7\u00C3\u00B5es diversas, como as de compra e saque na modalidade d\u00C3\u00A9bito em conta corrente, dentre outras.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idStatusConta" : 123456789,
  "idConta" : 123456789,
  "idStatusCartao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "criptogramaResposta" : "aeiou",
  "statusConta" : "aeiou",
  "statusCartao" : "aeiou",
  "numeroAgencia" : 123
}}]
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter criptograma: (query) Criptograma do cart\u00C3\u00A3o no formato de55 

     - returns: RequestBuilder<ValidaCartao> 
     */
    public class func validarCartaoChipBandeiradoUsingGETWithRequestBuilder(numeroCartao numeroCartao: String, criptograma: String) -> RequestBuilder<ValidaCartao> {
        let path = "/api/cartoes/bandeirados/validar-chip"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "numero_cartao": numeroCartao,
            "criptograma": criptograma
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ValidaCartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Permite validar um Cart\u00C3\u00A3o bandeirado a partir dos dados Impressos
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter nomePortador: (query) Nome do portador do cart\u00C3\u00A3o 
     - parameter dataValidade: (query) Data de validade do cart\u00C3\u00A3o no formato yyyy-MM 
     - parameter codigoSeguranca: (query) C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarCartaoDigitadoBandeiradoUsingGET(numeroCartao numeroCartao: String, nomePortador: String, dataValidade: String, codigoSeguranca: String, completion: ((data: ValidaCartao?, error: ErrorType?) -> Void)) {
        validarCartaoDigitadoBandeiradoUsingGETWithRequestBuilder(numeroCartao: numeroCartao, nomePortador: nomePortador, dataValidade: dataValidade, codigoSeguranca: codigoSeguranca).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite validar um Cart\u00C3\u00A3o bandeirado a partir dos dados Impressos
     
     - GET /api/cartoes/bandeirados/validar-digitado
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir do envio dos dados sens\u00C3\u00ADveis impressos nele. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o para a realiza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00B5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00C3\u00B4nico (URA), dentre outras.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idStatusConta" : 123456789,
  "idConta" : 123456789,
  "idStatusCartao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "criptogramaResposta" : "aeiou",
  "statusConta" : "aeiou",
  "statusCartao" : "aeiou",
  "numeroAgencia" : 123
}}]
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter nomePortador: (query) Nome do portador do cart\u00C3\u00A3o 
     - parameter dataValidade: (query) Data de validade do cart\u00C3\u00A3o no formato yyyy-MM 
     - parameter codigoSeguranca: (query) C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros 

     - returns: RequestBuilder<ValidaCartao> 
     */
    public class func validarCartaoDigitadoBandeiradoUsingGETWithRequestBuilder(numeroCartao numeroCartao: String, nomePortador: String, dataValidade: String, codigoSeguranca: String) -> RequestBuilder<ValidaCartao> {
        let path = "/api/cartoes/bandeirados/validar-digitado"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "numero_cartao": numeroCartao,
            "nome_portador": nomePortador,
            "data_validade": dataValidade,
            "codigo_seguranca": codigoSeguranca
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ValidaCartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Permite validar um Cart\u00C3\u00A3o a partir dos dados Impressos
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter nomePortador: (query) Nome do portador do cart\u00C3\u00A3o 
     - parameter dataValidade: (query) Data de validade do cart\u00C3\u00A3o no formato yyyy-MM 
     - parameter codigoSeguranca: (query) C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarCartaoDigitadoNaoBandeiradoUsingGET(numeroCartao numeroCartao: String, nomePortador: String, dataValidade: String, codigoSeguranca: String, completion: ((data: ValidaCartao?, error: ErrorType?) -> Void)) {
        validarCartaoDigitadoNaoBandeiradoUsingGETWithRequestBuilder(numeroCartao: numeroCartao, nomePortador: nomePortador, dataValidade: dataValidade, codigoSeguranca: codigoSeguranca).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite validar um Cart\u00C3\u00A3o a partir dos dados Impressos
     
     - GET /api/cartoes/nao-bandeirados/validar-digitado
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir do envio dos dados sens\u00C3\u00ADveis impressos nele. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o para a realiza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00B5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00C3\u00B4nico (URA), dentre outras.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idStatusConta" : 123456789,
  "idConta" : 123456789,
  "idStatusCartao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "criptogramaResposta" : "aeiou",
  "statusConta" : "aeiou",
  "statusCartao" : "aeiou",
  "numeroAgencia" : 123
}}]
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter nomePortador: (query) Nome do portador do cart\u00C3\u00A3o 
     - parameter dataValidade: (query) Data de validade do cart\u00C3\u00A3o no formato yyyy-MM 
     - parameter codigoSeguranca: (query) C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros 

     - returns: RequestBuilder<ValidaCartao> 
     */
    public class func validarCartaoDigitadoNaoBandeiradoUsingGETWithRequestBuilder(numeroCartao numeroCartao: String, nomePortador: String, dataValidade: String, codigoSeguranca: String) -> RequestBuilder<ValidaCartao> {
        let path = "/api/cartoes/nao-bandeirados/validar-digitado"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "numero_cartao": numeroCartao,
            "nome_portador": nomePortador,
            "data_validade": dataValidade,
            "codigo_seguranca": codigoSeguranca
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ValidaCartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Permite validar um Cart\u00C3\u00A3o Bandeirado a partir da Tarja
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter trilha1: (query) Trilha 1 do cart\u00C3\u00A3o a ser validado 
     - parameter trilha2: (query) Trilha 2 do cart\u00C3\u00A3o a ser validado 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarCartaoTarjaBandeiradoUsingGET(numeroCartao numeroCartao: String, trilha1: String, trilha2: String, completion: ((data: ValidaCartao?, error: ErrorType?) -> Void)) {
        validarCartaoTarjaBandeiradoUsingGETWithRequestBuilder(numeroCartao: numeroCartao, trilha1: trilha1, trilha2: trilha2).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite validar um Cart\u00C3\u00A3o Bandeirado a partir da Tarja
     
     - GET /api/cartoes/bandeirados/validar-tarja
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir da leitura da tarja magn\u00C3\u00A9tica do mesmo. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o antes de permitir que o portador realize transa\u00C3\u00A7\u00C3\u00B5es diversas, como as de compra e saque na modalidade d\u00C3\u00A9bito em conta corrente, dentre outras.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idStatusConta" : 123456789,
  "idConta" : 123456789,
  "idStatusCartao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "criptogramaResposta" : "aeiou",
  "statusConta" : "aeiou",
  "statusCartao" : "aeiou",
  "numeroAgencia" : 123
}}]
     
     - parameter numeroCartao: (query) N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. 
     - parameter trilha1: (query) Trilha 1 do cart\u00C3\u00A3o a ser validado 
     - parameter trilha2: (query) Trilha 2 do cart\u00C3\u00A3o a ser validado 

     - returns: RequestBuilder<ValidaCartao> 
     */
    public class func validarCartaoTarjaBandeiradoUsingGETWithRequestBuilder(numeroCartao numeroCartao: String, trilha1: String, trilha2: String) -> RequestBuilder<ValidaCartao> {
        let path = "/api/cartoes/bandeirados/validar-tarja"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "numero_cartao": numeroCartao,
            "trilha1": trilha1,
            "trilha2": trilha2
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ValidaCartao>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Permite validar a senha de um Cart\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarSenhaUsingGET(id id: Int, completion: ((data: String?, error: ErrorType?) -> Void)) {
        validarSenhaUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite validar a senha de um Cart\u00C3\u00A3o
     
     - GET /api/cartoes/{id}/validar-senha
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir validar que a senha informada pelo portador de um determinado cart\u00C3\u00A3o est\u00C3\u00A1 correta.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). 

     - returns: RequestBuilder<String> 
     */
    public class func validarSenhaUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<String> {
        var path = "/api/cartoes/{id}/validar-senha"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

}
