//
// GlobaltagwebhookAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class GlobaltagwebhookAPI: APIBase {
    /**
     
     {{{web_hook_resource_alterar}}}
     
     - parameter id: (path) {{{web_hook_resource_alterar_param_id}}} 
     - parameter webhook: (body) webhook 
     - parameter status: (query) {{{web_hook_resource_alterar_param_status}}} (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT24(id id: Int, webhook: WebHookPersistValue, status: String?, completion: ((data: WebHookResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT24WithRequestBuilder(id: id, webhook: webhook, status: status).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{web_hook_resource_alterar}}}
     
     - PUT /api/webhooks/{id}
     - {{{web_hook_resource_alterar_notes}}}
     - examples: [{contentType=application/json, example={
  "tipoEvento" : "aeiou",
  "id" : 123456789,
  "metodo" : "aeiou",
  "url" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) {{{web_hook_resource_alterar_param_id}}} 
     - parameter webhook: (body) webhook 
     - parameter status: (query) {{{web_hook_resource_alterar_param_status}}} (optional)

     - returns: RequestBuilder<WebHookResponse> 
     */
    public class func alterarUsingPUT24WithRequestBuilder(id id: Int, webhook: WebHookPersistValue, status: String?) -> RequestBuilder<WebHookResponse> {
        var path = "/api/webhooks/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = webhook.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<WebHookResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     {{{web_hook_resource_consultar}}}
     
     - parameter id: (path) {{{web_hook_resource_consultar_param_id}}} 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET53(id id: Int, completion: ((data: WebHookResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET53WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{web_hook_resource_consultar}}}
     
     - GET /api/webhooks/{id}
     - {{{web_hook_resource_consultar_notes}}}
     - examples: [{contentType=application/json, example={
  "tipoEvento" : "aeiou",
  "id" : 123456789,
  "metodo" : "aeiou",
  "url" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) {{{web_hook_resource_consultar_param_id}}} 

     - returns: RequestBuilder<WebHookResponse> 
     */
    public class func consultarUsingGET53WithRequestBuilder(id id: Int) -> RequestBuilder<WebHookResponse> {
        var path = "/api/webhooks/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<WebHookResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{web_hook_resource_listar}}}
     
     - parameter sort: (query) {{{global_menssagem_sort_sort}}} (optional)
     - parameter page: (query) {{{global_menssagem_sort_page_value}}} (optional)
     - parameter limit: (query) {{{global_menssagem_sort_limit}}} (optional)
     - parameter id: (query) {{{web_hook_request_id_value}}} (optional)
     - parameter tipoEvento: (query) {{{web_hook_request_tipo_evento_value}}} (optional)
     - parameter metodo: (query) {{{web_hook_request_metodo_value}}} (optional)
     - parameter url: (query) {{{web_hook_request_url_value}}} (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET66(sort sort: [String]?, page: Int?, limit: Int?, id: Int?, tipoEvento: String?, metodo: String?, url: String?, completion: ((data: PageWebHookResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET66WithRequestBuilder(sort: sort, page: page, limit: limit, id: id, tipoEvento: tipoEvento, metodo: metodo, url: url).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{web_hook_resource_listar}}}
     
     - GET /api/webhooks
     - {{{web_hook_resource_listar_notes}}}
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "tipoEvento" : "aeiou",
    "id" : 123456789,
    "metodo" : "aeiou",
    "url" : "aeiou",
    "status" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) {{{global_menssagem_sort_sort}}} (optional)
     - parameter page: (query) {{{global_menssagem_sort_page_value}}} (optional)
     - parameter limit: (query) {{{global_menssagem_sort_limit}}} (optional)
     - parameter id: (query) {{{web_hook_request_id_value}}} (optional)
     - parameter tipoEvento: (query) {{{web_hook_request_tipo_evento_value}}} (optional)
     - parameter metodo: (query) {{{web_hook_request_metodo_value}}} (optional)
     - parameter url: (query) {{{web_hook_request_url_value}}} (optional)

     - returns: RequestBuilder<PageWebHookResponse> 
     */
    public class func listarUsingGET66WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, id: Int?, tipoEvento: String?, metodo: String?, url: String?) -> RequestBuilder<PageWebHookResponse> {
        let path = "/api/webhooks"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "id": id,
            "tipoEvento": tipoEvento,
            "metodo": metodo,
            "url": url
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageWebHookResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     {{{web_hook_resource_salvar}}}
     
     - parameter webhook: (body) webhook 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST35(webhook webhook: WebHookPersistValue, completion: ((data: WebHookResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST35WithRequestBuilder(webhook: webhook).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{web_hook_resource_salvar}}}
     
     - POST /api/webhooks
     - {{{web_hook_resource_salvar_notes}}}
     - examples: [{contentType=application/json, example={
  "tipoEvento" : "aeiou",
  "id" : 123456789,
  "metodo" : "aeiou",
  "url" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter webhook: (body) webhook 

     - returns: RequestBuilder<WebHookResponse> 
     */
    public class func salvarUsingPOST35WithRequestBuilder(webhook webhook: WebHookPersistValue) -> RequestBuilder<WebHookResponse> {
        let path = "/api/webhooks"
        let URLString = PierAPI.basePath + path
        
        let parameters = webhook.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<WebHookResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

}
