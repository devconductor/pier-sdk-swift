//
// EstabelecimentoAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class EstabelecimentoAPI: APIBase {
    /**
     
     Alterar Origem Comercial
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da origem comercial 
     - parameter origemComercialUpdate: (body) origemComercialUpdate 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarOrigemComercialUsingPUT(id id: Int, origemComercialUpdate: OrigemComercialUpdate, completion: ((data: OrigemComercialResponse?, error: ErrorType?) -> Void)) {
        alterarOrigemComercialUsingPUTWithRequestBuilder(id: id, origemComercialUpdate: origemComercialUpdate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Alterar Origem Comercial
     
     - PUT /api/origens-comerciais/{id}
     - Altera uma origem comercial.
     - examples: [{contentType=application/json, example={
  "flagConcedeLimiteProvisorio" : true,
  "idGrupoOrigemComercial" : 1,
  "tipoPessoa" : "PESSOA_FISICA",
  "produtosOrigem" : [ {
    "idProduto" : 123456789
  } ],
  "flagDigitalizarDoc" : true,
  "nomeTipoOrigemComercial" : "NOME DO TIPO DE ORIGEM COMERCIAL",
  "flagAprovacaoImediata" : true,
  "flagOrigemExterna" : true,
  "senha" : "21031408",
  "flagPreAprovado" : true,
  "nomeFantasiaPlastico" : "COMÃRCIO LTDA",
  "flagCartaoProvisorio" : true,
  "id" : 10,
  "flagConsultaPrevia" : true,
  "nomeGrupoOrigemComercial" : "NOME DO GRUPO DA ORIGEM COMERCIAL",
  "idEstabelecimento" : 1,
  "flagCartaoDefinitivo" : true,
  "nome" : "COMÃRCIO LTDA",
  "descricao" : "DESCRIÃÃO DA ORIGEM COMERCIAL",
  "idTipoOrigemComercial" : 1,
  "flagEmbossingLoja" : true,
  "usuario" : "usuario01",
  "flagCreditoFaturamento" : true,
  "flagModificado" : true,
  "flagEnviaFaturaUsuario" : true,
  "status" : 1
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da origem comercial 
     - parameter origemComercialUpdate: (body) origemComercialUpdate 

     - returns: RequestBuilder<OrigemComercialResponse> 
     */
    public class func alterarOrigemComercialUsingPUTWithRequestBuilder(id id: Int, origemComercialUpdate: OrigemComercialUpdate) -> RequestBuilder<OrigemComercialResponse> {
        var path = "/api/origens-comerciais/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = origemComercialUpdate.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<OrigemComercialResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Altera uma Maquineta
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Maquineta (id). 
     - parameter maquinetaUpdate: (body) maquinetaUpdate 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT10(id id: Int, maquinetaUpdate: MaquinetaUpdate, completion: ((data: MaquinetaResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT10WithRequestBuilder(id: id, maquinetaUpdate: maquinetaUpdate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Altera uma Maquineta
     
     - PUT /api/maquinetas/{id}
     - Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o das maquinetas dos estabelecimentos.
     - examples: [{contentType=application/json, example={
  "dataHoraCadastramento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idEstabelecimento" : 123456789,
  "usuarioApl" : "aeiou",
  "valor" : 1.3579000000000001069366817318950779736042022705078125,
  "idTipoMaquineta" : 123456789,
  "id" : 123456789,
  "terminal" : "aeiou",
  "dataHoraImplantacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Maquineta (id). 
     - parameter maquinetaUpdate: (body) maquinetaUpdate 

     - returns: RequestBuilder<MaquinetaResponse> 
     */
    public class func alterarUsingPUT10WithRequestBuilder(id id: Int, maquinetaUpdate: MaquinetaUpdate) -> RequestBuilder<MaquinetaResponse> {
        var path = "/api/maquinetas/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = maquinetaUpdate.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<MaquinetaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Altera uma Regra Opera\u00C3\u00A7\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Regra Opera\u00C3\u00A7\u00C3\u00A3o (id). 
     - parameter operacaoCredorUpdate: (body) operacaoCredorUpdate 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT11(id id: Int, operacaoCredorUpdate: OperacaoCredorUpdate, completion: ((data: OperacaoCredorResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT11WithRequestBuilder(id: id, operacaoCredorUpdate: operacaoCredorUpdate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Altera uma Regra Opera\u00C3\u00A7\u00C3\u00A3o
     
     - PUT /api/regras-operacoes-estabelecimentos/{id}
     - Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o de uma regra opera\u00C3\u00A7\u00C3\u00A3o.
     - examples: [{contentType=application/json, example={
  "diasAfastamento" : 29,
  "fatorMultiplicador" : "AGENDA",
  "idOperacao" : 2,
  "vencimentoPrimeiraParcela" : 29,
  "planoMaximo" : 5,
  "planoMinimo" : 1,
  "idProduto" : 1,
  "remuneracaoPercentual" : 0.04,
  "flagTaxaFixada" : true,
  "idCredor" : 1,
  "remuneracaoFixa" : 0.0,
  "periodicidade" : "MENSAL",
  "id" : 2
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Regra Opera\u00C3\u00A7\u00C3\u00A3o (id). 
     - parameter operacaoCredorUpdate: (body) operacaoCredorUpdate 

     - returns: RequestBuilder<OperacaoCredorResponse> 
     */
    public class func alterarUsingPUT11WithRequestBuilder(id id: Int, operacaoCredorUpdate: OperacaoCredorUpdate) -> RequestBuilder<OperacaoCredorResponse> {
        var path = "/api/regras-operacoes-estabelecimentos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = operacaoCredorUpdate.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<OperacaoCredorResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Altera um Telefone do estabelecimento
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone Estabelecimento (id). 
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). 
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. 
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT15(id id: Int, ddd: String, telefone: String, ramal: String?, completion: ((data: TelefoneEstabelecimentoResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT15WithRequestBuilder(id: id, ddd: ddd, telefone: telefone, ramal: ramal).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Altera um Telefone do estabelecimento
     
     - PUT /api/telefones-estabelecimentos/{id}
     - Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o dos telefones dos estabelecimentos.
     - examples: [{contentType=application/json, example={
  "idEstabelecimento" : 123456789,
  "telefone" : "aeiou",
  "ddd" : "aeiou",
  "id" : 123456789,
  "ramal" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone Estabelecimento (id). 
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). 
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. 
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)

     - returns: RequestBuilder<TelefoneEstabelecimentoResponse> 
     */
    public class func alterarUsingPUT15WithRequestBuilder(id id: Int, ddd: String, telefone: String, ramal: String?) -> RequestBuilder<TelefoneEstabelecimentoResponse> {
        var path = "/api/telefones-estabelecimentos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "ddd": ddd,
            "telefone": telefone,
            "ramal": ramal
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TelefoneEstabelecimentoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Altera um Terminal
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do terminal (id). 
     - parameter terminalUpdate: (body) terminalUpdate 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT17(id id: Int, terminalUpdate: TerminalUpdate, completion: ((data: TerminalResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT17WithRequestBuilder(id: id, terminalUpdate: terminalUpdate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Altera um Terminal
     
     - PUT /api/terminais/{id}
     - Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o dos Terminais.
     - examples: [{contentType=application/json, example={
  "flagTerminalVirtual" : false,
  "idEstabelecimento" : 123456789,
  "flagConsultaExtrato" : false,
  "id" : 123456789,
  "terminal" : "aeiou",
  "numeroEstabelecimento" : 123456789
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do terminal (id). 
     - parameter terminalUpdate: (body) terminalUpdate 

     - returns: RequestBuilder<TerminalResponse> 
     */
    public class func alterarUsingPUT17WithRequestBuilder(id id: Int, terminalUpdate: TerminalUpdate) -> RequestBuilder<TerminalResponse> {
        var path = "/api/terminais/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = terminalUpdate.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<TerminalResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Alterar um estabelecimento
     
     - parameter id: (path) Id 
     - parameter update: (body) update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT6(id id: Int, update: EstabelecimentoUpdate, completion: ((data: EstabelecimentoResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT6WithRequestBuilder(id: id, update: update).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Alterar um estabelecimento
     
     - PUT /api/estabelecimentos/{id}
     - Altera um estabelecimento
     - examples: [{contentType=application/json, example={
  "uf2" : "aeiou",
  "obs" : "aeiou",
  "cidade" : "aeiou",
  "idPais" : 123456789,
  "numeroReceitaFederal" : 123456789,
  "flagMatriz" : 123,
  "bairro2" : "aeiou",
  "flagArquivoSecrFazenda" : 123,
  "cep2" : "aeiou",
  "mcc" : 123456789,
  "cep" : "aeiou",
  "uf" : "aeiou",
  "idTipoEstabelecimento" : 123456789,
  "nomeFantasia" : "aeiou",
  "complemento" : "aeiou",
  "flagCartaoDigitado" : 123,
  "id" : 123456789,
  "contato" : "aeiou",
  "consulta" : {
    "tipoEntidade" : "aeiou",
    "dataHoraConsulta" : "aeiou",
    "status" : "aeiou"
  },
  "email" : "aeiou",
  "complemento2" : "aeiou",
  "nomeLogradouro" : "aeiou",
  "bairro" : "aeiou",
  "idMoeda" : 123456789,
  "cargoContato" : "aeiou",
  "dataCadastramento" : "aeiou",
  "tipoCorrespondencia" : "aeiou",
  "nome" : "aeiou",
  "cidade2" : "aeiou",
  "numeroEndereco2" : "aeiou",
  "terminal" : "aeiou",
  "descricao" : "aeiou",
  "numeroEndereco" : "aeiou",
  "associadoSPCBrasil" : 123,
  "nomeLogradouro2" : "aeiou",
  "idCredor" : 123456789,
  "consulta3" : "",
  "inativo" : 123,
  "consulta2" : "",
  "usuario" : "aeiou",
  "numeroEstabelecimento" : "aeiou",
  "tipoPagamento" : "aeiou"
}}]
     
     - parameter id: (path) Id 
     - parameter update: (body) update 

     - returns: RequestBuilder<EstabelecimentoResponse> 
     */
    public class func alterarUsingPUT6WithRequestBuilder(id id: Int, update: EstabelecimentoUpdate) -> RequestBuilder<EstabelecimentoResponse> {
        var path = "/api/estabelecimentos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = update.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<EstabelecimentoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Alterar Grupo Econ\u00C3\u00B4mico
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do grupo econ\u00C3\u00B4mico 
     - parameter grupoEconomicoDTO: (body) grupoEconomicoDTO 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT8(id id: Int, grupoEconomicoDTO: GrupoEconomicoDTO, completion: ((data: GrupoEconomicoResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT8WithRequestBuilder(id: id, grupoEconomicoDTO: grupoEconomicoDTO).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Alterar Grupo Econ\u00C3\u00B4mico
     
     - PUT /api/grupos-economicos/{id}
     - Altera um grupo econ\u00C3\u00B4mico.
     - examples: [{contentType=application/json, example={
  "digitoAgencia" : "aeiou",
  "numeroReceitaFederal" : "aeiou",
  "percentualRAV" : 0.015,
  "pagamentoDecendialTerceiro" : 25,
  "pagamentoQuinzenalPrimeiro" : 5,
  "pagamentoDecendialSegundo" : 15,
  "agencia" : 123,
  "nomeCredor" : "Exemplo",
  "taxaBanco" : 0.1,
  "taxaAdm" : 0.1,
  "pagamentoMensal" : 10,
  "id" : 123456789,
  "contato" : "aeiou",
  "digitoContaCorrente" : "aeiou",
  "pagamentoQuinzenalSegundo" : 20,
  "banco" : 123,
  "recebeRAV" : "NAO_TEM_PERMISSAO_RAV",
  "percentualMultiplica" : 0.1,
  "pagamentoDecendialPrimeiro" : 5,
  "inscricaoEstadual" : "aeiou",
  "contaCorrente" : "aeiou",
  "usuario" : "aeiou",
  "periodicidade" : "DIARIO",
  "razaoSocial" : "aeiou",
  "limiteRAV" : 0.015,
  "pagamentoSemanal" : "SEGUNDA"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do grupo econ\u00C3\u00B4mico 
     - parameter grupoEconomicoDTO: (body) grupoEconomicoDTO 

     - returns: RequestBuilder<GrupoEconomicoResponse> 
     */
    public class func alterarUsingPUT8WithRequestBuilder(id id: Int, grupoEconomicoDTO: GrupoEconomicoDTO) -> RequestBuilder<GrupoEconomicoResponse> {
        var path = "/api/grupos-economicos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = grupoEconomicoDTO.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<GrupoEconomicoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Cadastrar Origem Comercial
     
     - parameter origemComercialPersist: (body) origemComercialPersist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func cadastrarOrigemComercialUsingPOST(origemComercialPersist origemComercialPersist: OrigemComercialPersist, completion: ((data: OrigemComercialResponse?, error: ErrorType?) -> Void)) {
        cadastrarOrigemComercialUsingPOSTWithRequestBuilder(origemComercialPersist: origemComercialPersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Cadastrar Origem Comercial
     
     - POST /api/origens-comerciais
     - Cadastra uma origem comercial.
     - examples: [{contentType=application/json, example={
  "flagConcedeLimiteProvisorio" : true,
  "idGrupoOrigemComercial" : 1,
  "tipoPessoa" : "PESSOA_FISICA",
  "produtosOrigem" : [ {
    "idProduto" : 123456789
  } ],
  "flagDigitalizarDoc" : true,
  "nomeTipoOrigemComercial" : "NOME DO TIPO DE ORIGEM COMERCIAL",
  "flagAprovacaoImediata" : true,
  "flagOrigemExterna" : true,
  "senha" : "21031408",
  "flagPreAprovado" : true,
  "nomeFantasiaPlastico" : "COMÃRCIO LTDA",
  "flagCartaoProvisorio" : true,
  "id" : 10,
  "flagConsultaPrevia" : true,
  "nomeGrupoOrigemComercial" : "NOME DO GRUPO DA ORIGEM COMERCIAL",
  "idEstabelecimento" : 1,
  "flagCartaoDefinitivo" : true,
  "nome" : "COMÃRCIO LTDA",
  "descricao" : "DESCRIÃÃO DA ORIGEM COMERCIAL",
  "idTipoOrigemComercial" : 1,
  "flagEmbossingLoja" : true,
  "usuario" : "usuario01",
  "flagCreditoFaturamento" : true,
  "flagModificado" : true,
  "flagEnviaFaturaUsuario" : true,
  "status" : 1
}}]
     
     - parameter origemComercialPersist: (body) origemComercialPersist 

     - returns: RequestBuilder<OrigemComercialResponse> 
     */
    public class func cadastrarOrigemComercialUsingPOSTWithRequestBuilder(origemComercialPersist origemComercialPersist: OrigemComercialPersist) -> RequestBuilder<OrigemComercialResponse> {
        let path = "/api/origens-comerciais"
        let URLString = PierAPI.basePath + path
        
        let parameters = origemComercialPersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<OrigemComercialResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Cadastrar um estabelecimento
     
     - parameter persist: (body) persist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func cadastrarUsingPOST2(persist persist: EstabelecimentoPersist, completion: ((data: EstabelecimentoResponse?, error: ErrorType?) -> Void)) {
        cadastrarUsingPOST2WithRequestBuilder(persist: persist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Cadastrar um estabelecimento
     
     - POST /api/estabelecimentos
     - Cadastra um novo estabelecimento
     - examples: [{contentType=application/json, example={
  "uf2" : "aeiou",
  "obs" : "aeiou",
  "cidade" : "aeiou",
  "idPais" : 123456789,
  "numeroReceitaFederal" : 123456789,
  "flagMatriz" : 123,
  "bairro2" : "aeiou",
  "flagArquivoSecrFazenda" : 123,
  "cep2" : "aeiou",
  "mcc" : 123456789,
  "cep" : "aeiou",
  "uf" : "aeiou",
  "idTipoEstabelecimento" : 123456789,
  "nomeFantasia" : "aeiou",
  "complemento" : "aeiou",
  "flagCartaoDigitado" : 123,
  "id" : 123456789,
  "contato" : "aeiou",
  "consulta" : {
    "tipoEntidade" : "aeiou",
    "dataHoraConsulta" : "aeiou",
    "status" : "aeiou"
  },
  "email" : "aeiou",
  "complemento2" : "aeiou",
  "nomeLogradouro" : "aeiou",
  "bairro" : "aeiou",
  "idMoeda" : 123456789,
  "cargoContato" : "aeiou",
  "dataCadastramento" : "aeiou",
  "tipoCorrespondencia" : "aeiou",
  "nome" : "aeiou",
  "cidade2" : "aeiou",
  "numeroEndereco2" : "aeiou",
  "terminal" : "aeiou",
  "descricao" : "aeiou",
  "numeroEndereco" : "aeiou",
  "associadoSPCBrasil" : 123,
  "nomeLogradouro2" : "aeiou",
  "idCredor" : 123456789,
  "consulta3" : "",
  "inativo" : 123,
  "consulta2" : "",
  "usuario" : "aeiou",
  "numeroEstabelecimento" : "aeiou",
  "tipoPagamento" : "aeiou"
}}]
     
     - parameter persist: (body) persist 

     - returns: RequestBuilder<EstabelecimentoResponse> 
     */
    public class func cadastrarUsingPOST2WithRequestBuilder(persist persist: EstabelecimentoPersist) -> RequestBuilder<EstabelecimentoResponse> {
        let path = "/api/estabelecimentos"
        let URLString = PierAPI.basePath + path
        
        let parameters = persist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<EstabelecimentoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Cadastrar Grupo Econ\u00C3\u00B4mico
     
     - parameter grupoEconomicoDTO: (body) GrupoEconomicoDTO 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func cadastrarUsingPOST3(grupoEconomicoDTO grupoEconomicoDTO: GrupoEconomicoDTO, completion: ((data: GrupoEconomicoResponse?, error: ErrorType?) -> Void)) {
        cadastrarUsingPOST3WithRequestBuilder(grupoEconomicoDTO: grupoEconomicoDTO).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Cadastrar Grupo Econ\u00C3\u00B4mico
     
     - POST /api/grupos-economicos
     - Cadastra um grupo econ\u00C3\u00B4mico.
     - examples: [{contentType=application/json, example={
  "digitoAgencia" : "aeiou",
  "numeroReceitaFederal" : "aeiou",
  "percentualRAV" : 0.015,
  "pagamentoDecendialTerceiro" : 25,
  "pagamentoQuinzenalPrimeiro" : 5,
  "pagamentoDecendialSegundo" : 15,
  "agencia" : 123,
  "nomeCredor" : "Exemplo",
  "taxaBanco" : 0.1,
  "taxaAdm" : 0.1,
  "pagamentoMensal" : 10,
  "id" : 123456789,
  "contato" : "aeiou",
  "digitoContaCorrente" : "aeiou",
  "pagamentoQuinzenalSegundo" : 20,
  "banco" : 123,
  "recebeRAV" : "NAO_TEM_PERMISSAO_RAV",
  "percentualMultiplica" : 0.1,
  "pagamentoDecendialPrimeiro" : 5,
  "inscricaoEstadual" : "aeiou",
  "contaCorrente" : "aeiou",
  "usuario" : "aeiou",
  "periodicidade" : "DIARIO",
  "razaoSocial" : "aeiou",
  "limiteRAV" : 0.015,
  "pagamentoSemanal" : "SEGUNDA"
}}]
     
     - parameter grupoEconomicoDTO: (body) GrupoEconomicoDTO 

     - returns: RequestBuilder<GrupoEconomicoResponse> 
     */
    public class func cadastrarUsingPOST3WithRequestBuilder(grupoEconomicoDTO grupoEconomicoDTO: GrupoEconomicoDTO) -> RequestBuilder<GrupoEconomicoResponse> {
        let path = "/api/grupos-economicos"
        let URLString = PierAPI.basePath + path
        
        let parameters = grupoEconomicoDTO.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<GrupoEconomicoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta dados de um determinado tipo de opera\u00C3\u00A7\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de processamento da opera\u00C3\u00A7\u00C3\u00A3o (idOperacao). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultaOperacaoUsingGET(id id: Int, completion: ((data: DetalheOperacaoResponse?, error: ErrorType?) -> Void)) {
        consultaOperacaoUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta dados de um determinado tipo de opera\u00C3\u00A7\u00C3\u00A3o
     
     - GET /api/tipos-operacoes-estabelecimentos/{id}
     - Este recurso permite consultar dados de um determinado tipo opera\u00C3\u00A7\u00C3\u00A3o a partir do idoperacao
     - examples: [{contentType=application/json, example={
  "carencia" : 123,
  "flagPermitirParcelamento" : false,
  "idOperacao" : 123456789,
  "valorOperacao" : 1.3579000000000001069366817318950779736042022705078125,
  "codigoProcessamento" : "aeiou",
  "codigoProcessamentoCancelamento" : "aeiou",
  "planoMaximo" : 123,
  "descricaoOperacao" : "aeiou",
  "nomeOperacao" : "aeiou",
  "percentualTac" : 1.3579000000000001069366817318950779736042022705078125,
  "valorMaximo" : 1.3579000000000001069366817318950779736042022705078125,
  "valorTac" : 1.3579000000000001069366817318950779736042022705078125,
  "planoMinimo" : 123,
  "flagCobraJuros" : false,
  "taxaTarifa" : 1.3579000000000001069366817318950779736042022705078125,
  "excedentePermitido" : 1.3579000000000001069366817318950779736042022705078125,
  "taxaJuros" : 1.3579000000000001069366817318950779736042022705078125,
  "valorMinimo" : 1.3579000000000001069366817318950779736042022705078125,
  "flagCobraTarifa" : false
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de processamento da opera\u00C3\u00A7\u00C3\u00A3o (idOperacao). 

     - returns: RequestBuilder<DetalheOperacaoResponse> 
     */
    public class func consultaOperacaoUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<DetalheOperacaoResponse> {
        var path = "/api/tipos-operacoes-estabelecimentos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<DetalheOperacaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Consultar Origem Comercial
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da origem comercial 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarOrigemComercialUsingGET(id id: Int, completion: ((data: OrigemComercialResponse?, error: ErrorType?) -> Void)) {
        consultarOrigemComercialUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consultar Origem Comercial
     
     - GET /api/origens-comerciais/{id}
     - Consulta uma origem comercial atrav\u00C3\u00A9s do seu identificador.
     - examples: [{contentType=application/json, example={
  "flagConcedeLimiteProvisorio" : true,
  "idGrupoOrigemComercial" : 1,
  "tipoPessoa" : "PESSOA_FISICA",
  "produtosOrigem" : [ {
    "idProduto" : 123456789
  } ],
  "flagDigitalizarDoc" : true,
  "nomeTipoOrigemComercial" : "NOME DO TIPO DE ORIGEM COMERCIAL",
  "flagAprovacaoImediata" : true,
  "flagOrigemExterna" : true,
  "senha" : "21031408",
  "flagPreAprovado" : true,
  "nomeFantasiaPlastico" : "COMÃRCIO LTDA",
  "flagCartaoProvisorio" : true,
  "id" : 10,
  "flagConsultaPrevia" : true,
  "nomeGrupoOrigemComercial" : "NOME DO GRUPO DA ORIGEM COMERCIAL",
  "idEstabelecimento" : 1,
  "flagCartaoDefinitivo" : true,
  "nome" : "COMÃRCIO LTDA",
  "descricao" : "DESCRIÃÃO DA ORIGEM COMERCIAL",
  "idTipoOrigemComercial" : 1,
  "flagEmbossingLoja" : true,
  "usuario" : "usuario01",
  "flagCreditoFaturamento" : true,
  "flagModificado" : true,
  "flagEnviaFaturaUsuario" : true,
  "status" : 1
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da origem comercial 

     - returns: RequestBuilder<OrigemComercialResponse> 
     */
    public class func consultarOrigemComercialUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<OrigemComercialResponse> {
        var path = "/api/origens-comerciais/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<OrigemComercialResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Consultar estabelecimento por id
     
     - parameter id: (path) Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET16(id id: Int, completion: ((data: EstabelecimentoResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET16WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consultar estabelecimento por id
     
     - GET /api/estabelecimentos/{id}
     - Consulta os detalhes de um determinado estabelecimento
     - examples: [{contentType=application/json, example={
  "uf2" : "aeiou",
  "obs" : "aeiou",
  "cidade" : "aeiou",
  "idPais" : 123456789,
  "numeroReceitaFederal" : 123456789,
  "flagMatriz" : 123,
  "bairro2" : "aeiou",
  "flagArquivoSecrFazenda" : 123,
  "cep2" : "aeiou",
  "mcc" : 123456789,
  "cep" : "aeiou",
  "uf" : "aeiou",
  "idTipoEstabelecimento" : 123456789,
  "nomeFantasia" : "aeiou",
  "complemento" : "aeiou",
  "flagCartaoDigitado" : 123,
  "id" : 123456789,
  "contato" : "aeiou",
  "consulta" : {
    "tipoEntidade" : "aeiou",
    "dataHoraConsulta" : "aeiou",
    "status" : "aeiou"
  },
  "email" : "aeiou",
  "complemento2" : "aeiou",
  "nomeLogradouro" : "aeiou",
  "bairro" : "aeiou",
  "idMoeda" : 123456789,
  "cargoContato" : "aeiou",
  "dataCadastramento" : "aeiou",
  "tipoCorrespondencia" : "aeiou",
  "nome" : "aeiou",
  "cidade2" : "aeiou",
  "numeroEndereco2" : "aeiou",
  "terminal" : "aeiou",
  "descricao" : "aeiou",
  "numeroEndereco" : "aeiou",
  "associadoSPCBrasil" : 123,
  "nomeLogradouro2" : "aeiou",
  "idCredor" : 123456789,
  "consulta3" : "",
  "inativo" : 123,
  "consulta2" : "",
  "usuario" : "aeiou",
  "numeroEstabelecimento" : "aeiou",
  "tipoPagamento" : "aeiou"
}}]
     
     - parameter id: (path) Id 

     - returns: RequestBuilder<EstabelecimentoResponse> 
     */
    public class func consultarUsingGET16WithRequestBuilder(id id: Int) -> RequestBuilder<EstabelecimentoResponse> {
        var path = "/api/estabelecimentos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<EstabelecimentoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Consultar grupo econ\u00C3\u00B4mico
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do grupo econ\u00C3\u00B4mico 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET18(id id: Int, completion: ((data: GrupoEconomicoResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET18WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consultar grupo econ\u00C3\u00B4mico
     
     - GET /api/grupos-economicos/{id}
     - Consulta um grupo econ\u00C3\u00B4mico atrav\u00C3\u00A9s do seu identificador.
     - examples: [{contentType=application/json, example={
  "digitoAgencia" : "aeiou",
  "numeroReceitaFederal" : "aeiou",
  "percentualRAV" : 0.015,
  "pagamentoDecendialTerceiro" : 25,
  "pagamentoQuinzenalPrimeiro" : 5,
  "pagamentoDecendialSegundo" : 15,
  "agencia" : 123,
  "nomeCredor" : "Exemplo",
  "taxaBanco" : 0.1,
  "taxaAdm" : 0.1,
  "pagamentoMensal" : 10,
  "id" : 123456789,
  "contato" : "aeiou",
  "digitoContaCorrente" : "aeiou",
  "pagamentoQuinzenalSegundo" : 20,
  "banco" : 123,
  "recebeRAV" : "NAO_TEM_PERMISSAO_RAV",
  "percentualMultiplica" : 0.1,
  "pagamentoDecendialPrimeiro" : 5,
  "inscricaoEstadual" : "aeiou",
  "contaCorrente" : "aeiou",
  "usuario" : "aeiou",
  "periodicidade" : "DIARIO",
  "razaoSocial" : "aeiou",
  "limiteRAV" : 0.015,
  "pagamentoSemanal" : "SEGUNDA"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do grupo econ\u00C3\u00B4mico 

     - returns: RequestBuilder<GrupoEconomicoResponse> 
     */
    public class func consultarUsingGET18WithRequestBuilder(id id: Int) -> RequestBuilder<GrupoEconomicoResponse> {
        var path = "/api/grupos-economicos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<GrupoEconomicoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de uma determinada maquineta
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Maquineta (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET20(id id: Int, completion: ((data: MaquinetaResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET20WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de uma determinada maquineta
     
     - GET /api/maquinetas/{id}
     - Este m\u00C3\u00A9todo permite consultar uma determinada maquineta a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "dataHoraCadastramento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idEstabelecimento" : 123456789,
  "usuarioApl" : "aeiou",
  "valor" : 1.3579000000000001069366817318950779736042022705078125,
  "idTipoMaquineta" : 123456789,
  "id" : 123456789,
  "terminal" : "aeiou",
  "dataHoraImplantacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Maquineta (id). 

     - returns: RequestBuilder<MaquinetaResponse> 
     */
    public class func consultarUsingGET20WithRequestBuilder(id id: Int) -> RequestBuilder<MaquinetaResponse> {
        var path = "/api/maquinetas/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<MaquinetaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de uma determinada Regra Opera\u00C3\u00A7\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Regra Opera\u00C3\u00A7\u00C3\u00A3o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET21(id id: Int, completion: ((data: OperacaoCredorResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET21WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de uma determinada Regra Opera\u00C3\u00A7\u00C3\u00A3o
     
     - GET /api/regras-operacoes-estabelecimentos/{id}
     - Este m\u00C3\u00A9todo permite consultar uma determinada regra opera\u00C3\u00A7\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "diasAfastamento" : 29,
  "fatorMultiplicador" : "AGENDA",
  "idOperacao" : 2,
  "vencimentoPrimeiraParcela" : 29,
  "planoMaximo" : 5,
  "planoMinimo" : 1,
  "idProduto" : 1,
  "remuneracaoPercentual" : 0.04,
  "flagTaxaFixada" : true,
  "idCredor" : 1,
  "remuneracaoFixa" : 0.0,
  "periodicidade" : "MENSAL",
  "id" : 2
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Regra Opera\u00C3\u00A7\u00C3\u00A3o (id). 

     - returns: RequestBuilder<OperacaoCredorResponse> 
     */
    public class func consultarUsingGET21WithRequestBuilder(id id: Int) -> RequestBuilder<OperacaoCredorResponse> {
        var path = "/api/regras-operacoes-estabelecimentos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<OperacaoCredorResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de um determinado telefone de um estabelecimento
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone Estabelecimento (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET29(id id: Int, completion: ((data: TelefoneEstabelecimentoResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET29WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado telefone de um estabelecimento
     
     - GET /api/telefones-estabelecimentos/{id}
     - Este m\u00C3\u00A9todo permite consultar um determinado telefone de um estabelecimento a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idEstabelecimento" : 123456789,
  "telefone" : "aeiou",
  "ddd" : "aeiou",
  "id" : 123456789,
  "ramal" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone Estabelecimento (id). 

     - returns: RequestBuilder<TelefoneEstabelecimentoResponse> 
     */
    public class func consultarUsingGET29WithRequestBuilder(id id: Int) -> RequestBuilder<TelefoneEstabelecimentoResponse> {
        var path = "/api/telefones-estabelecimentos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TelefoneEstabelecimentoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de um determinado Terminal
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Terminal (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET31(id id: Int, completion: ((data: TerminalResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET31WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Terminal
     
     - GET /api/terminais/{id}
     - Este m\u00C3\u00A9todo permite consultar um determinado Terminal a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "flagTerminalVirtual" : false,
  "idEstabelecimento" : 123456789,
  "flagConsultaExtrato" : false,
  "id" : 123456789,
  "terminal" : "aeiou",
  "numeroEstabelecimento" : 123456789
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Terminal (id). 

     - returns: RequestBuilder<TerminalResponse> 
     */
    public class func consultarUsingGET31WithRequestBuilder(id id: Int) -> RequestBuilder<TerminalResponse> {
        var path = "/api/terminais/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TerminalResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de um determinado V\u00C3\u00ADnculo
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do V\u00C3\u008Dnculo (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET43(id id: Int, completion: ((data: VinculoEstabelecimentoAdquirenteResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET43WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado V\u00C3\u00ADnculo
     
     - GET /api/adquirentes-estabelecimento/{id}
     - Este m\u00C3\u00A9todo permite consultar um determinado V\u00C3\u00ADnculo a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idAdquirente" : 123456789,
  "idEstabelecimento" : 123456789,
  "mensagem" : "aeiou",
  "dataHoraCadastro" : "aeiou",
  "id" : 123456789,
  "codigoEstabelecimentoAdquirente" : "aeiou",
  "status" : 123
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do V\u00C3\u008Dnculo (id). 

     - returns: RequestBuilder<VinculoEstabelecimentoAdquirenteResponse> 
     */
    public class func consultarUsingGET43WithRequestBuilder(id id: Int) -> RequestBuilder<VinculoEstabelecimentoAdquirenteResponse> {
        var path = "/api/adquirentes-estabelecimento/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<VinculoEstabelecimentoAdquirenteResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Desabilitar um V\u00C3\u00ADnculo
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do V\u00C3\u00ADnculo (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func desabilitarVinculoUsingPOST(id id: Int, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        desabilitarVinculoUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Desabilitar um V\u00C3\u00ADnculo
     
     - POST /api/adquirentes-estabelecimento/{id}/desabilitar
     - Este m\u00C3\u00A9todo realiza a desativa\u00C3\u00A7\u00C3\u00A3o de um v\u00C3\u00ADnculo.
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do V\u00C3\u00ADnculo (id). 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func desabilitarVinculoUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<AnyObject> {
        var path = "/api/adquirentes-estabelecimento/{id}/desabilitar"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<AnyObject>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Desabilitar um v\u00C3\u00ADnculo opera\u00C3\u00A7\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id). 
     - parameter vinculoOperacaoPersist: (body) vinculoOperacaoPersist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func desabilitarVinculoUsingPOST1(id id: Int, vinculoOperacaoPersist: VinculoOperacaoPersist, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        desabilitarVinculoUsingPOST1WithRequestBuilder(id: id, vinculoOperacaoPersist: vinculoOperacaoPersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Desabilitar um v\u00C3\u00ADnculo opera\u00C3\u00A7\u00C3\u00A3o
     
     - POST /api/estabelecimentos/{id}/desabilitar-operacao
     - Este m\u00C3\u00A9todo permite desabilitar um v\u00C3\u00ADnculo.
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id). 
     - parameter vinculoOperacaoPersist: (body) vinculoOperacaoPersist 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func desabilitarVinculoUsingPOST1WithRequestBuilder(id id: Int, vinculoOperacaoPersist: VinculoOperacaoPersist) -> RequestBuilder<AnyObject> {
        var path = "/api/estabelecimentos/{id}/desabilitar-operacao"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = vinculoOperacaoPersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<AnyObject>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Habilitar um V\u00C3\u00ADnculo
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do V\u00C3\u00ADnculo (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func habilitarVinculoUsingPOST(id id: Int, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        habilitarVinculoUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Habilitar um V\u00C3\u00ADnculo
     
     - POST /api/adquirentes-estabelecimento/{id}/habilitar
     - Este m\u00C3\u00A9todo realiza a ativa\u00C3\u00A7\u00C3\u00A3o de um v\u00C3\u00ADnculo.
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do V\u00C3\u00ADnculo (id). 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func habilitarVinculoUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<AnyObject> {
        var path = "/api/adquirentes-estabelecimento/{id}/habilitar"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<AnyObject>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Habilitar um v\u00C3\u00ADnculo opera\u00C3\u00A7\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id). 
     - parameter vinculoOperacaoPersist: (body) vinculoOperacaoPersist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func habilitarVinculoUsingPOST1(id id: Int, vinculoOperacaoPersist: VinculoOperacaoPersist, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        habilitarVinculoUsingPOST1WithRequestBuilder(id: id, vinculoOperacaoPersist: vinculoOperacaoPersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Habilitar um v\u00C3\u00ADnculo opera\u00C3\u00A7\u00C3\u00A3o
     
     - POST /api/estabelecimentos/{id}/habilitar-operacao
     - Este m\u00C3\u00A9todo permite habilitar um v\u00C3\u00ADnculo.
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id). 
     - parameter vinculoOperacaoPersist: (body) vinculoOperacaoPersist 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func habilitarVinculoUsingPOST1WithRequestBuilder(id id: Int, vinculoOperacaoPersist: VinculoOperacaoPersist) -> RequestBuilder<AnyObject> {
        var path = "/api/estabelecimentos/{id}/habilitar-operacao"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = vinculoOperacaoPersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<AnyObject>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta dados de opera\u00C3\u00A7\u00C3\u00B5es em uma lista
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idOperacao: (query) C\u00C3\u00B3digo que identifica a opera\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter codigoProcessamento: (query) C\u00C3\u00B3digo de processamento usado em transa\u00C3\u00A7\u00C3\u00B5es com o autorizador (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listaOperacaoUsingGET(sort sort: [String]?, page: Int?, limit: Int?, idOperacao: Int?, codigoProcessamento: String?, completion: ((data: PageOperacaoResponse?, error: ErrorType?) -> Void)) {
        listaOperacaoUsingGETWithRequestBuilder(sort: sort, page: page, limit: limit, idOperacao: idOperacao, codigoProcessamento: codigoProcessamento).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta dados de opera\u00C3\u00A7\u00C3\u00B5es em uma lista
     
     - GET /api/tipos-operacoes-estabelecimentos
     - Este recurso permite listar as opera\u00C3\u00A7\u00C3\u00A3o
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "nomeOperacao" : "aeiou",
    "carencia" : 123,
    "flagCobraJuros" : false,
    "flagPermitirParcelamento" : false,
    "idOperacao" : 123456789,
    "codigoProcessamento" : "aeiou",
    "codigoProcessamentoCancelamento" : "aeiou",
    "flagCobraTarifa" : false
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idOperacao: (query) C\u00C3\u00B3digo que identifica a opera\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter codigoProcessamento: (query) C\u00C3\u00B3digo de processamento usado em transa\u00C3\u00A7\u00C3\u00B5es com o autorizador (optional)

     - returns: RequestBuilder<PageOperacaoResponse> 
     */
    public class func listaOperacaoUsingGETWithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, idOperacao: Int?, codigoProcessamento: String?) -> RequestBuilder<PageOperacaoResponse> {
        let path = "/api/tipos-operacoes-estabelecimentos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "idOperacao": idOperacao,
            "codigoProcessamento": codigoProcessamento
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageOperacaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os MCCs
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarMCCUsingGET(sort sort: [String]?, page: Int?, limit: Int?, completion: ((data: PageMCCResponse?, error: ErrorType?) -> Void)) {
        listarMCCUsingGETWithRequestBuilder(sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os MCCs
     
     - GET /api/mcc-estabelecimentos
     - Este m\u00C3\u00A9todo permite que sejam listados os MCCs existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "id" : 123456789,
    "descricao" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageMCCResponse> 
     */
    public class func listarMCCUsingGETWithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PageMCCResponse> {
        let path = "/api/mcc-estabelecimentos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageMCCResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Listar Origens Comerciais
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) Id da origem comercial (optional)
     - parameter nome: (query) Nome da origem comercial (optional)
     - parameter status: (query) Indica o status da origem comercial (optional)
     - parameter idEstabelecimento: (query) Identificador do estabelecimento (optional)
     - parameter idProduto: (query) Identificador do produto (optional)
     - parameter descricao: (query) Descri\u00C3\u00A7\u00C3\u00A3o da origem comercial (optional)
     - parameter idTipoOrigemComercial: (query) Identificador do tipo de origem comercial (optional)
     - parameter idGrupoOrigemComercial: (query) Identificador do grupo de origem comercial (optional)
     - parameter flagPreAprovado: (query) Indica se permite pr\u00C3\u00A9 aprova\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter flagAprovacaoImediata: (query) Indica se permite aprova\u00C3\u00A7\u00C3\u00A3o imediata (optional)
     - parameter nomeFantasiaPlastico: (query) Nome fantasia impresso no pl\u00C3\u00A1stico (optional)
     - parameter flagCartaoProvisorio: (query) Indica se permite cart\u00C3\u00A3o provis\u00C3\u00B3rio (optional)
     - parameter flagCartaoDefinitivo: (query) Indica se permite cart\u00C3\u00A3o definitivo (optional)
     - parameter usuario: (query) Usu\u00C3\u00A1rio para autentica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter senha: (query) Senha para autentica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter flagOrigemExterna: (query) Indica se \u00C3\u00A9 origem externa (optional)
     - parameter flagModificado: (query) Indica se h\u00C3\u00A1 modifica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter flagEnviaFaturaUsuario: (query) Indica se envia fatura (optional)
     - parameter flagCreditoFaturamento: (query) Indica se permite cr\u00C3\u00A9dito de faturamento (optional)
     - parameter flagConcedeLimiteProvisorio: (query) Indica se concede limite provis\u00C3\u00B3rio (optional)
     - parameter flagDigitalizarDoc: (query) Indica se digitaliza documento (optional)
     - parameter flagEmbossingLoja: (query) Indica se realiza embossing em loja (optional)
     - parameter flagConsultaPrevia: (query) Indica se realiza consulta pr\u00C3\u00A9via (optional)
     - parameter tipoPessoa: (query) Tipo de pessoa (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarOrigensComerciaisUsingGET(sort sort: [String]?, page: Int?, limit: Int?, id: Int?, nome: String?, status: Int?, idEstabelecimento: Int?, idProduto: Int?, descricao: String?, idTipoOrigemComercial: Int?, idGrupoOrigemComercial: Int?, flagPreAprovado: Bool?, flagAprovacaoImediata: Bool?, nomeFantasiaPlastico: String?, flagCartaoProvisorio: Bool?, flagCartaoDefinitivo: Bool?, usuario: String?, senha: String?, flagOrigemExterna: Bool?, flagModificado: Bool?, flagEnviaFaturaUsuario: Bool?, flagCreditoFaturamento: Bool?, flagConcedeLimiteProvisorio: Bool?, flagDigitalizarDoc: Bool?, flagEmbossingLoja: Bool?, flagConsultaPrevia: Bool?, tipoPessoa: String?, completion: ((data: PageOrigemComercialResponse?, error: ErrorType?) -> Void)) {
        listarOrigensComerciaisUsingGETWithRequestBuilder(sort: sort, page: page, limit: limit, id: id, nome: nome, status: status, idEstabelecimento: idEstabelecimento, idProduto: idProduto, descricao: descricao, idTipoOrigemComercial: idTipoOrigemComercial, idGrupoOrigemComercial: idGrupoOrigemComercial, flagPreAprovado: flagPreAprovado, flagAprovacaoImediata: flagAprovacaoImediata, nomeFantasiaPlastico: nomeFantasiaPlastico, flagCartaoProvisorio: flagCartaoProvisorio, flagCartaoDefinitivo: flagCartaoDefinitivo, usuario: usuario, senha: senha, flagOrigemExterna: flagOrigemExterna, flagModificado: flagModificado, flagEnviaFaturaUsuario: flagEnviaFaturaUsuario, flagCreditoFaturamento: flagCreditoFaturamento, flagConcedeLimiteProvisorio: flagConcedeLimiteProvisorio, flagDigitalizarDoc: flagDigitalizarDoc, flagEmbossingLoja: flagEmbossingLoja, flagConsultaPrevia: flagConsultaPrevia, tipoPessoa: tipoPessoa).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Listar Origens Comerciais
     
     - GET /api/origens-comerciais
     - Lista origens comerciais cadastradas.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "flagConcedeLimiteProvisorio" : true,
    "idGrupoOrigemComercial" : 1,
    "tipoPessoa" : "PESSOA_FISICA",
    "produtosOrigem" : [ {
      "idProduto" : 123456789
    } ],
    "flagDigitalizarDoc" : true,
    "nomeTipoOrigemComercial" : "NOME DO TIPO DE ORIGEM COMERCIAL",
    "flagAprovacaoImediata" : true,
    "flagOrigemExterna" : true,
    "senha" : "21031408",
    "flagPreAprovado" : true,
    "nomeFantasiaPlastico" : "COMÃRCIO LTDA",
    "flagCartaoProvisorio" : true,
    "id" : 10,
    "flagConsultaPrevia" : true,
    "nomeGrupoOrigemComercial" : "NOME DO GRUPO DA ORIGEM COMERCIAL",
    "idEstabelecimento" : 1,
    "flagCartaoDefinitivo" : true,
    "nome" : "COMÃRCIO LTDA",
    "descricao" : "DESCRIÃÃO DA ORIGEM COMERCIAL",
    "idTipoOrigemComercial" : 1,
    "flagEmbossingLoja" : true,
    "usuario" : "usuario01",
    "flagCreditoFaturamento" : true,
    "flagModificado" : true,
    "flagEnviaFaturaUsuario" : true,
    "status" : 1
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) Id da origem comercial (optional)
     - parameter nome: (query) Nome da origem comercial (optional)
     - parameter status: (query) Indica o status da origem comercial (optional)
     - parameter idEstabelecimento: (query) Identificador do estabelecimento (optional)
     - parameter idProduto: (query) Identificador do produto (optional)
     - parameter descricao: (query) Descri\u00C3\u00A7\u00C3\u00A3o da origem comercial (optional)
     - parameter idTipoOrigemComercial: (query) Identificador do tipo de origem comercial (optional)
     - parameter idGrupoOrigemComercial: (query) Identificador do grupo de origem comercial (optional)
     - parameter flagPreAprovado: (query) Indica se permite pr\u00C3\u00A9 aprova\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter flagAprovacaoImediata: (query) Indica se permite aprova\u00C3\u00A7\u00C3\u00A3o imediata (optional)
     - parameter nomeFantasiaPlastico: (query) Nome fantasia impresso no pl\u00C3\u00A1stico (optional)
     - parameter flagCartaoProvisorio: (query) Indica se permite cart\u00C3\u00A3o provis\u00C3\u00B3rio (optional)
     - parameter flagCartaoDefinitivo: (query) Indica se permite cart\u00C3\u00A3o definitivo (optional)
     - parameter usuario: (query) Usu\u00C3\u00A1rio para autentica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter senha: (query) Senha para autentica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter flagOrigemExterna: (query) Indica se \u00C3\u00A9 origem externa (optional)
     - parameter flagModificado: (query) Indica se h\u00C3\u00A1 modifica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter flagEnviaFaturaUsuario: (query) Indica se envia fatura (optional)
     - parameter flagCreditoFaturamento: (query) Indica se permite cr\u00C3\u00A9dito de faturamento (optional)
     - parameter flagConcedeLimiteProvisorio: (query) Indica se concede limite provis\u00C3\u00B3rio (optional)
     - parameter flagDigitalizarDoc: (query) Indica se digitaliza documento (optional)
     - parameter flagEmbossingLoja: (query) Indica se realiza embossing em loja (optional)
     - parameter flagConsultaPrevia: (query) Indica se realiza consulta pr\u00C3\u00A9via (optional)
     - parameter tipoPessoa: (query) Tipo de pessoa (optional)

     - returns: RequestBuilder<PageOrigemComercialResponse> 
     */
    public class func listarOrigensComerciaisUsingGETWithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, id: Int?, nome: String?, status: Int?, idEstabelecimento: Int?, idProduto: Int?, descricao: String?, idTipoOrigemComercial: Int?, idGrupoOrigemComercial: Int?, flagPreAprovado: Bool?, flagAprovacaoImediata: Bool?, nomeFantasiaPlastico: String?, flagCartaoProvisorio: Bool?, flagCartaoDefinitivo: Bool?, usuario: String?, senha: String?, flagOrigemExterna: Bool?, flagModificado: Bool?, flagEnviaFaturaUsuario: Bool?, flagCreditoFaturamento: Bool?, flagConcedeLimiteProvisorio: Bool?, flagDigitalizarDoc: Bool?, flagEmbossingLoja: Bool?, flagConsultaPrevia: Bool?, tipoPessoa: String?) -> RequestBuilder<PageOrigemComercialResponse> {
        let path = "/api/origens-comerciais"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "id": id,
            "nome": nome,
            "status": status,
            "idEstabelecimento": idEstabelecimento,
            "idProduto": idProduto,
            "descricao": descricao,
            "idTipoOrigemComercial": idTipoOrigemComercial,
            "idGrupoOrigemComercial": idGrupoOrigemComercial,
            "flagPreAprovado": flagPreAprovado,
            "flagAprovacaoImediata": flagAprovacaoImediata,
            "nomeFantasiaPlastico": nomeFantasiaPlastico,
            "flagCartaoProvisorio": flagCartaoProvisorio,
            "flagCartaoDefinitivo": flagCartaoDefinitivo,
            "usuario": usuario,
            "senha": senha,
            "flagOrigemExterna": flagOrigemExterna,
            "flagModificado": flagModificado,
            "flagEnviaFaturaUsuario": flagEnviaFaturaUsuario,
            "flagCreditoFaturamento": flagCreditoFaturamento,
            "flagConcedeLimiteProvisorio": flagConcedeLimiteProvisorio,
            "flagDigitalizarDoc": flagDigitalizarDoc,
            "flagEmbossingLoja": flagEmbossingLoja,
            "flagConsultaPrevia": flagConsultaPrevia,
            "tipoPessoa": tipoPessoa
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageOrigemComercialResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Tipos de adquirentes
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarTiposAdquirentesUsingGET(sort sort: [String]?, page: Int?, limit: Int?, completion: ((data: PageEntidadeResponse?, error: ErrorType?) -> Void)) {
        listarTiposAdquirentesUsingGETWithRequestBuilder(sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Tipos de adquirentes
     
     - GET /api/tipos-adquirentes
     - Este m\u00C3\u00A9todo permite que sejam listados os tipos de adquirentes.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "id" : 123456789,
    "flagAtivo" : false,
    "descricao" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageEntidadeResponse> 
     */
    public class func listarTiposAdquirentesUsingGETWithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PageEntidadeResponse> {
        let path = "/api/tipos-adquirentes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageEntidadeResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Tipos de  Maquinetas
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarTiposMaquinetasUsingGET(sort sort: [String]?, page: Int?, limit: Int?, completion: ((data: PageCampoCodificadoDescricaoResponse?, error: ErrorType?) -> Void)) {
        listarTiposMaquinetasUsingGETWithRequestBuilder(sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Tipos de  Maquinetas
     
     - GET /api/tipos-maquinetas
     - Este m\u00C3\u00A9todo permite que sejam listadas os Tipos de maquinetas existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "codigo" : 123456789,
    "descricao" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageCampoCodificadoDescricaoResponse> 
     */
    public class func listarTiposMaquinetasUsingGETWithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PageCampoCodificadoDescricaoResponse> {
        let path = "/api/tipos-maquinetas"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageCampoCodificadoDescricaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Tipos Terminais
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarTiposTerminaisUsingGET1(sort sort: [String]?, page: Int?, limit: Int?, completion: ((data: PageTipoTerminalResponse?, error: ErrorType?) -> Void)) {
        listarTiposTerminaisUsingGET1WithRequestBuilder(sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Tipos Terminais
     
     - GET /api/tipos-terminais-estabelecimento
     - Este m\u00C3\u00A9todo permite que sejam listados os tipos de terminais existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "descricaoTerminal" : "aeiou",
    "id" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageTipoTerminalResponse> 
     */
    public class func listarTiposTerminaisUsingGET1WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PageTipoTerminalResponse> {
        let path = "/api/tipos-terminais-estabelecimento"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTipoTerminalResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista Estabelecimentos
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id). (optional)
     - parameter idCredor: (query) Apresenta o n\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Credor. (optional)
     - parameter numeroReceitaFederal: (query) Apresenta o n\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento na Receita Federal. (optional)
     - parameter nome: (query) Nome do Estabelecimento. (optional)
     - parameter descricao: (query) Raz\u00C3\u00A3o Social do Estabelecimento. (optional)
     - parameter nomeFantasia: (query) T\u00C3\u00ADtulo Comercial do Estabelecimento. (optional)
     - parameter cep: (query) C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP). (optional)
     - parameter nomeLogradouro: (query) Nome do Logradouro. (optional)
     - parameter numeroEndereco: (query) N\u00C3\u00BAmero do endere\u00C3\u00A7o. (optional)
     - parameter complemento: (query) Descri\u00C3\u00A7\u00C3\u00B5es complementares referente ao endere\u00C3\u00A7o. (optional)
     - parameter bairro: (query) Nome do bairro do endere\u00C3\u00A7o. (optional)
     - parameter cidade: (query) Nome da cidade do endere\u00C3\u00A7o. (optional)
     - parameter uf: (query) Sigla de identifica\u00C3\u00A7\u00C3\u00A3o da Unidade Federativa do endere\u00C3\u00A7o. (optional)
     - parameter pais: (query) Nome do pa\u00C3\u00ADs. (optional)
     - parameter dataCadastramento: (query) Data de Cadastro do Estabelecimento, no formato yyyy-MM-dd. (optional)
     - parameter contato: (query) Nome da pessoa para contato com o Estabelecimento. (optional)
     - parameter email: (query) E-mail da pessoa para contato com o Estabelecimento. (optional)
     - parameter flagArquivoSecrFazenda: (query) Indica se o estabelecimento ser\u00C3\u00A1 inclu\u00C3\u00ADdo no arquivo de registro para a Secretaria da Fazenda Estadual. (optional)
     - parameter flagCartaoDigitado: (query) Indica se o estabelecimento poder\u00C3\u00A1 originar transa\u00C3\u00A7\u00C3\u00B5es sem a leitura da tarja ou do chip do cart\u00C3\u00A3o. (optional)
     - parameter inativo: (query) Indica se o estabelecimento est\u00C3\u00A1 inativo. (optional)
     - parameter idPais: (query) Identificador de Pa\u00C3\u00ADs. (optional)
     - parameter mcc: (query) C\u00C3\u00B3digo de Categoria de Mercado (optional)
     - parameter idTipoEstabelecimento: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento. (optional)
     - parameter idMoeda: (query) C\u00C3\u00B3digo identificador da moeda. (optional)
     - parameter tipoPagamento: (query) Tipo do regime de pagamento do estabelecimento. (optional)
     - parameter numeroEstabelecimento: (query) N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento na Conductor. (optional)
     - parameter cep2: (query) C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP). (optional)
     - parameter nomeLogradouro2: (query) Nome do Logradouro. (optional)
     - parameter numeroEndereco2: (query) N\u00C3\u00BAmero do endere\u00C3\u00A7o. (optional)
     - parameter complemento2: (query) Descri\u00C3\u00A7\u00C3\u00B5es complementares referente ao endere\u00C3\u00A7o. (optional)
     - parameter bairro2: (query) Nome do bairro do endere\u00C3\u00A7o. (optional)
     - parameter cidade2: (query) Nome da cidade do endere\u00C3\u00A7o. (optional)
     - parameter uf2: (query) Sigla de identifica\u00C3\u00A7\u00C3\u00A3o da Unidade Federativa do endere\u00C3\u00A7o. (optional)
     - parameter flagMatriz: (query) Indica se \u00C3\u00A9 matriz ou filial. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET21(sort sort: [String]?, page: Int?, limit: Int?, id: Int?, idCredor: Int?, numeroReceitaFederal: String?, nome: String?, descricao: String?, nomeFantasia: String?, cep: String?, nomeLogradouro: String?, numeroEndereco: Int?, complemento: String?, bairro: String?, cidade: String?, uf: String?, pais: String?, dataCadastramento: String?, contato: String?, email: String?, flagArquivoSecrFazenda: Int?, flagCartaoDigitado: Int?, inativo: Int?, idPais: Int?, mcc: Int?, idTipoEstabelecimento: Int?, idMoeda: Int?, tipoPagamento: String?, numeroEstabelecimento: String?, cep2: String?, nomeLogradouro2: String?, numeroEndereco2: Int?, complemento2: String?, bairro2: String?, cidade2: String?, uf2: String?, flagMatriz: Int?, completion: ((data: PageEstabelecimentoResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET21WithRequestBuilder(sort: sort, page: page, limit: limit, id: id, idCredor: idCredor, numeroReceitaFederal: numeroReceitaFederal, nome: nome, descricao: descricao, nomeFantasia: nomeFantasia, cep: cep, nomeLogradouro: nomeLogradouro, numeroEndereco: numeroEndereco, complemento: complemento, bairro: bairro, cidade: cidade, uf: uf, pais: pais, dataCadastramento: dataCadastramento, contato: contato, email: email, flagArquivoSecrFazenda: flagArquivoSecrFazenda, flagCartaoDigitado: flagCartaoDigitado, inativo: inativo, idPais: idPais, mcc: mcc, idTipoEstabelecimento: idTipoEstabelecimento, idMoeda: idMoeda, tipoPagamento: tipoPagamento, numeroEstabelecimento: numeroEstabelecimento, cep2: cep2, nomeLogradouro2: nomeLogradouro2, numeroEndereco2: numeroEndereco2, complemento2: complemento2, bairro2: bairro2, cidade2: cidade2, uf2: uf2, flagMatriz: flagMatriz).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista Estabelecimentos
     
     - GET /api/estabelecimentos
     - Lista todas os Estabelecimentos
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "uf2" : "aeiou",
    "obs" : "aeiou",
    "cidade" : "aeiou",
    "idPais" : 123456789,
    "numeroReceitaFederal" : 123456789,
    "flagMatriz" : 123,
    "bairro2" : "aeiou",
    "flagArquivoSecrFazenda" : 123,
    "cep2" : "aeiou",
    "mcc" : 123456789,
    "cep" : "aeiou",
    "uf" : "aeiou",
    "idTipoEstabelecimento" : 123456789,
    "nomeFantasia" : "aeiou",
    "complemento" : "aeiou",
    "flagCartaoDigitado" : 123,
    "id" : 123456789,
    "contato" : "aeiou",
    "consulta" : {
      "tipoEntidade" : "aeiou",
      "dataHoraConsulta" : "aeiou",
      "status" : "aeiou"
    },
    "email" : "aeiou",
    "complemento2" : "aeiou",
    "nomeLogradouro" : "aeiou",
    "bairro" : "aeiou",
    "idMoeda" : 123456789,
    "cargoContato" : "aeiou",
    "dataCadastramento" : "aeiou",
    "tipoCorrespondencia" : "aeiou",
    "nome" : "aeiou",
    "cidade2" : "aeiou",
    "numeroEndereco2" : "aeiou",
    "terminal" : "aeiou",
    "descricao" : "aeiou",
    "numeroEndereco" : "aeiou",
    "associadoSPCBrasil" : 123,
    "nomeLogradouro2" : "aeiou",
    "idCredor" : 123456789,
    "consulta3" : "",
    "inativo" : 123,
    "consulta2" : "",
    "usuario" : "aeiou",
    "numeroEstabelecimento" : "aeiou",
    "tipoPagamento" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id). (optional)
     - parameter idCredor: (query) Apresenta o n\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Credor. (optional)
     - parameter numeroReceitaFederal: (query) Apresenta o n\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento na Receita Federal. (optional)
     - parameter nome: (query) Nome do Estabelecimento. (optional)
     - parameter descricao: (query) Raz\u00C3\u00A3o Social do Estabelecimento. (optional)
     - parameter nomeFantasia: (query) T\u00C3\u00ADtulo Comercial do Estabelecimento. (optional)
     - parameter cep: (query) C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP). (optional)
     - parameter nomeLogradouro: (query) Nome do Logradouro. (optional)
     - parameter numeroEndereco: (query) N\u00C3\u00BAmero do endere\u00C3\u00A7o. (optional)
     - parameter complemento: (query) Descri\u00C3\u00A7\u00C3\u00B5es complementares referente ao endere\u00C3\u00A7o. (optional)
     - parameter bairro: (query) Nome do bairro do endere\u00C3\u00A7o. (optional)
     - parameter cidade: (query) Nome da cidade do endere\u00C3\u00A7o. (optional)
     - parameter uf: (query) Sigla de identifica\u00C3\u00A7\u00C3\u00A3o da Unidade Federativa do endere\u00C3\u00A7o. (optional)
     - parameter pais: (query) Nome do pa\u00C3\u00ADs. (optional)
     - parameter dataCadastramento: (query) Data de Cadastro do Estabelecimento, no formato yyyy-MM-dd. (optional)
     - parameter contato: (query) Nome da pessoa para contato com o Estabelecimento. (optional)
     - parameter email: (query) E-mail da pessoa para contato com o Estabelecimento. (optional)
     - parameter flagArquivoSecrFazenda: (query) Indica se o estabelecimento ser\u00C3\u00A1 inclu\u00C3\u00ADdo no arquivo de registro para a Secretaria da Fazenda Estadual. (optional)
     - parameter flagCartaoDigitado: (query) Indica se o estabelecimento poder\u00C3\u00A1 originar transa\u00C3\u00A7\u00C3\u00B5es sem a leitura da tarja ou do chip do cart\u00C3\u00A3o. (optional)
     - parameter inativo: (query) Indica se o estabelecimento est\u00C3\u00A1 inativo. (optional)
     - parameter idPais: (query) Identificador de Pa\u00C3\u00ADs. (optional)
     - parameter mcc: (query) C\u00C3\u00B3digo de Categoria de Mercado (optional)
     - parameter idTipoEstabelecimento: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento. (optional)
     - parameter idMoeda: (query) C\u00C3\u00B3digo identificador da moeda. (optional)
     - parameter tipoPagamento: (query) Tipo do regime de pagamento do estabelecimento. (optional)
     - parameter numeroEstabelecimento: (query) N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento na Conductor. (optional)
     - parameter cep2: (query) C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP). (optional)
     - parameter nomeLogradouro2: (query) Nome do Logradouro. (optional)
     - parameter numeroEndereco2: (query) N\u00C3\u00BAmero do endere\u00C3\u00A7o. (optional)
     - parameter complemento2: (query) Descri\u00C3\u00A7\u00C3\u00B5es complementares referente ao endere\u00C3\u00A7o. (optional)
     - parameter bairro2: (query) Nome do bairro do endere\u00C3\u00A7o. (optional)
     - parameter cidade2: (query) Nome da cidade do endere\u00C3\u00A7o. (optional)
     - parameter uf2: (query) Sigla de identifica\u00C3\u00A7\u00C3\u00A3o da Unidade Federativa do endere\u00C3\u00A7o. (optional)
     - parameter flagMatriz: (query) Indica se \u00C3\u00A9 matriz ou filial. (optional)

     - returns: RequestBuilder<PageEstabelecimentoResponse> 
     */
    public class func listarUsingGET21WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, id: Int?, idCredor: Int?, numeroReceitaFederal: String?, nome: String?, descricao: String?, nomeFantasia: String?, cep: String?, nomeLogradouro: String?, numeroEndereco: Int?, complemento: String?, bairro: String?, cidade: String?, uf: String?, pais: String?, dataCadastramento: String?, contato: String?, email: String?, flagArquivoSecrFazenda: Int?, flagCartaoDigitado: Int?, inativo: Int?, idPais: Int?, mcc: Int?, idTipoEstabelecimento: Int?, idMoeda: Int?, tipoPagamento: String?, numeroEstabelecimento: String?, cep2: String?, nomeLogradouro2: String?, numeroEndereco2: Int?, complemento2: String?, bairro2: String?, cidade2: String?, uf2: String?, flagMatriz: Int?) -> RequestBuilder<PageEstabelecimentoResponse> {
        let path = "/api/estabelecimentos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "id": id,
            "idCredor": idCredor,
            "numeroReceitaFederal": numeroReceitaFederal,
            "nome": nome,
            "descricao": descricao,
            "nomeFantasia": nomeFantasia,
            "cep": cep,
            "nomeLogradouro": nomeLogradouro,
            "numeroEndereco": numeroEndereco,
            "complemento": complemento,
            "bairro": bairro,
            "cidade": cidade,
            "uf": uf,
            "pais": pais,
            "dataCadastramento": dataCadastramento,
            "contato": contato,
            "email": email,
            "flagArquivoSecrFazenda": flagArquivoSecrFazenda,
            "flagCartaoDigitado": flagCartaoDigitado,
            "inativo": inativo,
            "idPais": idPais,
            "mcc": mcc,
            "idTipoEstabelecimento": idTipoEstabelecimento,
            "idMoeda": idMoeda,
            "tipoPagamento": tipoPagamento,
            "numeroEstabelecimento": numeroEstabelecimento,
            "cep2": cep2,
            "nomeLogradouro2": nomeLogradouro2,
            "numeroEndereco2": numeroEndereco2,
            "complemento2": complemento2,
            "bairro2": bairro2,
            "cidade2": cidade2,
            "uf2": uf2,
            "flagMatriz": flagMatriz
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageEstabelecimentoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Listar grupos econ\u00C3\u00B4micos
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter razaoSocial: (query) Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica (optional)
     - parameter nomeCredor: (query) Nome do credor (optional)
     - parameter numeroReceitaFederal: (query) N\u00C3\u00BAmero da Receita Federal (optional)
     - parameter inscricaoEstadual: (query) N\u00C3\u00BAmero da inscri\u00C3\u00A7\u00C3\u00A3o estadual (optional)
     - parameter contato: (query) Nome da pessoa para entrar em contato (optional)
     - parameter banco: (query) C\u00C3\u00B3digo do banco (optional)
     - parameter agencia: (query) Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica (optional)
     - parameter digitoAgencia: (query) D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia (optional)
     - parameter contaCorrente: (query) C\u00C3\u00B3digo da Conta Corrente (optional)
     - parameter digitoContaCorrente: (query) D\u00C3\u00ADgito Verificador da Conta Corrente (optional)
     - parameter periodicidade: (query) Periodicidade do pagamento (optional)
     - parameter pagamentoSemanal: (query) Dia para pagamento semanal (optional)
     - parameter pagamentoMensal: (query) Dia da data para o pagamento mensal (optional)
     - parameter pagamentoDecendialPrimeiro: (query) Dia da data para o primeiro pagamento decendial (optional)
     - parameter pagamentoDecendialSegundo: (query) Dia da data para o segundo pagamento decendial (optional)
     - parameter pagamentoDecendialTerceiro: (query) Dia da data para o terceiro pagamento decendial (optional)
     - parameter pagamentoQuinzenalPrimeiro: (query) Dia da data para o primeiro pagamento quinzenal (optional)
     - parameter pagamentoQuinzenalSegundo: (query) Dia da data para o segundo pagamento quinzenal (optional)
     - parameter percentualRAV: (query) Valor percentual do RAV do credor (optional)
     - parameter recebeRAV: (query) Indica se o credor recebe RAV e o tipo (optional)
     - parameter percentualMultiplica: (query) Percentual Multiplica (optional)
     - parameter taxaAdm: (query) Taxa Administrativa (optional)
     - parameter taxaBanco: (query) Taxa do Banco (optional)
     - parameter limiteRAV: (query) Valor limite do RAV (optional)
     - parameter idCredorRAV: (query) C\u00C3\u00B3digo identificador do credor RAV (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET23(sort sort: [String]?, page: Int?, limit: Int?, razaoSocial: String?, nomeCredor: String?, numeroReceitaFederal: String?, inscricaoEstadual: String?, contato: String?, banco: Int?, agencia: Int?, digitoAgencia: String?, contaCorrente: String?, digitoContaCorrente: String?, periodicidade: String?, pagamentoSemanal: String?, pagamentoMensal: Int?, pagamentoDecendialPrimeiro: Int?, pagamentoDecendialSegundo: Int?, pagamentoDecendialTerceiro: Int?, pagamentoQuinzenalPrimeiro: Int?, pagamentoQuinzenalSegundo: Int?, percentualRAV: Double?, recebeRAV: String?, percentualMultiplica: Double?, taxaAdm: Double?, taxaBanco: Double?, limiteRAV: Double?, idCredorRAV: Int?, completion: ((data: PageGrupoEconomicoResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET23WithRequestBuilder(sort: sort, page: page, limit: limit, razaoSocial: razaoSocial, nomeCredor: nomeCredor, numeroReceitaFederal: numeroReceitaFederal, inscricaoEstadual: inscricaoEstadual, contato: contato, banco: banco, agencia: agencia, digitoAgencia: digitoAgencia, contaCorrente: contaCorrente, digitoContaCorrente: digitoContaCorrente, periodicidade: periodicidade, pagamentoSemanal: pagamentoSemanal, pagamentoMensal: pagamentoMensal, pagamentoDecendialPrimeiro: pagamentoDecendialPrimeiro, pagamentoDecendialSegundo: pagamentoDecendialSegundo, pagamentoDecendialTerceiro: pagamentoDecendialTerceiro, pagamentoQuinzenalPrimeiro: pagamentoQuinzenalPrimeiro, pagamentoQuinzenalSegundo: pagamentoQuinzenalSegundo, percentualRAV: percentualRAV, recebeRAV: recebeRAV, percentualMultiplica: percentualMultiplica, taxaAdm: taxaAdm, taxaBanco: taxaBanco, limiteRAV: limiteRAV, idCredorRAV: idCredorRAV).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Listar grupos econ\u00C3\u00B4micos
     
     - GET /api/grupos-economicos
     - Lista grupos econ\u00C3\u00B4micos cadastrados. 
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "digitoAgencia" : "aeiou",
    "numeroReceitaFederal" : "aeiou",
    "percentualRAV" : 0.015,
    "pagamentoDecendialTerceiro" : 25,
    "pagamentoQuinzenalPrimeiro" : 5,
    "pagamentoDecendialSegundo" : 15,
    "agencia" : 123,
    "nomeCredor" : "Exemplo",
    "taxaBanco" : 0.1,
    "taxaAdm" : 0.1,
    "pagamentoMensal" : 10,
    "id" : 123456789,
    "contato" : "aeiou",
    "digitoContaCorrente" : "aeiou",
    "pagamentoQuinzenalSegundo" : 20,
    "banco" : 123,
    "recebeRAV" : "NAO_TEM_PERMISSAO_RAV",
    "percentualMultiplica" : 0.1,
    "pagamentoDecendialPrimeiro" : 5,
    "inscricaoEstadual" : "aeiou",
    "contaCorrente" : "aeiou",
    "usuario" : "aeiou",
    "periodicidade" : "DIARIO",
    "razaoSocial" : "aeiou",
    "limiteRAV" : 0.015,
    "pagamentoSemanal" : "SEGUNDA"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter razaoSocial: (query) Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica (optional)
     - parameter nomeCredor: (query) Nome do credor (optional)
     - parameter numeroReceitaFederal: (query) N\u00C3\u00BAmero da Receita Federal (optional)
     - parameter inscricaoEstadual: (query) N\u00C3\u00BAmero da inscri\u00C3\u00A7\u00C3\u00A3o estadual (optional)
     - parameter contato: (query) Nome da pessoa para entrar em contato (optional)
     - parameter banco: (query) C\u00C3\u00B3digo do banco (optional)
     - parameter agencia: (query) Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica (optional)
     - parameter digitoAgencia: (query) D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia (optional)
     - parameter contaCorrente: (query) C\u00C3\u00B3digo da Conta Corrente (optional)
     - parameter digitoContaCorrente: (query) D\u00C3\u00ADgito Verificador da Conta Corrente (optional)
     - parameter periodicidade: (query) Periodicidade do pagamento (optional)
     - parameter pagamentoSemanal: (query) Dia para pagamento semanal (optional)
     - parameter pagamentoMensal: (query) Dia da data para o pagamento mensal (optional)
     - parameter pagamentoDecendialPrimeiro: (query) Dia da data para o primeiro pagamento decendial (optional)
     - parameter pagamentoDecendialSegundo: (query) Dia da data para o segundo pagamento decendial (optional)
     - parameter pagamentoDecendialTerceiro: (query) Dia da data para o terceiro pagamento decendial (optional)
     - parameter pagamentoQuinzenalPrimeiro: (query) Dia da data para o primeiro pagamento quinzenal (optional)
     - parameter pagamentoQuinzenalSegundo: (query) Dia da data para o segundo pagamento quinzenal (optional)
     - parameter percentualRAV: (query) Valor percentual do RAV do credor (optional)
     - parameter recebeRAV: (query) Indica se o credor recebe RAV e o tipo (optional)
     - parameter percentualMultiplica: (query) Percentual Multiplica (optional)
     - parameter taxaAdm: (query) Taxa Administrativa (optional)
     - parameter taxaBanco: (query) Taxa do Banco (optional)
     - parameter limiteRAV: (query) Valor limite do RAV (optional)
     - parameter idCredorRAV: (query) C\u00C3\u00B3digo identificador do credor RAV (optional)

     - returns: RequestBuilder<PageGrupoEconomicoResponse> 
     */
    public class func listarUsingGET23WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, razaoSocial: String?, nomeCredor: String?, numeroReceitaFederal: String?, inscricaoEstadual: String?, contato: String?, banco: Int?, agencia: Int?, digitoAgencia: String?, contaCorrente: String?, digitoContaCorrente: String?, periodicidade: String?, pagamentoSemanal: String?, pagamentoMensal: Int?, pagamentoDecendialPrimeiro: Int?, pagamentoDecendialSegundo: Int?, pagamentoDecendialTerceiro: Int?, pagamentoQuinzenalPrimeiro: Int?, pagamentoQuinzenalSegundo: Int?, percentualRAV: Double?, recebeRAV: String?, percentualMultiplica: Double?, taxaAdm: Double?, taxaBanco: Double?, limiteRAV: Double?, idCredorRAV: Int?) -> RequestBuilder<PageGrupoEconomicoResponse> {
        let path = "/api/grupos-economicos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "razaoSocial": razaoSocial,
            "nomeCredor": nomeCredor,
            "numeroReceitaFederal": numeroReceitaFederal,
            "inscricaoEstadual": inscricaoEstadual,
            "contato": contato,
            "banco": banco,
            "agencia": agencia,
            "digitoAgencia": digitoAgencia,
            "contaCorrente": contaCorrente,
            "digitoContaCorrente": digitoContaCorrente,
            "periodicidade": periodicidade,
            "pagamentoSemanal": pagamentoSemanal,
            "pagamentoMensal": pagamentoMensal,
            "pagamentoDecendialPrimeiro": pagamentoDecendialPrimeiro,
            "pagamentoDecendialSegundo": pagamentoDecendialSegundo,
            "pagamentoDecendialTerceiro": pagamentoDecendialTerceiro,
            "pagamentoQuinzenalPrimeiro": pagamentoQuinzenalPrimeiro,
            "pagamentoQuinzenalSegundo": pagamentoQuinzenalSegundo,
            "percentualRAV": percentualRAV,
            "recebeRAV": recebeRAV,
            "percentualMultiplica": percentualMultiplica,
            "taxaAdm": taxaAdm,
            "taxaBanco": taxaBanco,
            "limiteRAV": limiteRAV,
            "idCredorRAV": idCredorRAV
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageGrupoEconomicoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista as Maquinetas
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idEstabelecimento: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Estabelecimento (id). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET25(sort sort: [String]?, page: Int?, limit: Int?, idEstabelecimento: Int?, completion: ((data: PageMaquinetaResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET25WithRequestBuilder(sort: sort, page: page, limit: limit, idEstabelecimento: idEstabelecimento).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista as Maquinetas
     
     - GET /api/maquinetas
     - Este m\u00C3\u00A9todo permite que sejam listadas as maquinetas existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "dataHoraCadastramento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "idEstabelecimento" : 123456789,
    "usuarioApl" : "aeiou",
    "valor" : 1.3579000000000001069366817318950779736042022705078125,
    "idTipoMaquineta" : 123456789,
    "id" : 123456789,
    "terminal" : "aeiou",
    "dataHoraImplantacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idEstabelecimento: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Estabelecimento (id). (optional)

     - returns: RequestBuilder<PageMaquinetaResponse> 
     */
    public class func listarUsingGET25WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, idEstabelecimento: Int?) -> RequestBuilder<PageMaquinetaResponse> {
        let path = "/api/maquinetas"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "idEstabelecimento": idEstabelecimento
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageMaquinetaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os tipos de moedas do emissor 
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter codigoMoeda: (query) C\u00C3\u00B3digo identificador do tipo de moeda. (optional)
     - parameter simbolo: (query) S\u00C3\u00ADmbolo da Moeda. (optional)
     - parameter descricao: (query) Descri\u00C3\u00A7\u00C3\u00A3o do tipo da moeda. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET26(sort sort: [String]?, page: Int?, limit: Int?, codigoMoeda: String?, simbolo: String?, descricao: String?, completion: ((data: PageMoedaResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET26WithRequestBuilder(sort: sort, page: page, limit: limit, codigoMoeda: codigoMoeda, simbolo: simbolo, descricao: descricao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os tipos de moedas do emissor 
     
     - GET /api/tipos-moedas
     - Este recurso permite que sejam listados os tipos de moedas existentes na base de dados do emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "simbolo" : "aeiou",
    "id" : 123456789,
    "codigoMoeda" : "aeiou",
    "descricao" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter codigoMoeda: (query) C\u00C3\u00B3digo identificador do tipo de moeda. (optional)
     - parameter simbolo: (query) S\u00C3\u00ADmbolo da Moeda. (optional)
     - parameter descricao: (query) Descri\u00C3\u00A7\u00C3\u00A3o do tipo da moeda. (optional)

     - returns: RequestBuilder<PageMoedaResponse> 
     */
    public class func listarUsingGET26WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, codigoMoeda: String?, simbolo: String?, descricao: String?) -> RequestBuilder<PageMoedaResponse> {
        let path = "/api/tipos-moedas"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "codigoMoeda": codigoMoeda,
            "simbolo": simbolo,
            "descricao": descricao
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageMoedaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista as Regras Opera\u00C3\u00A7\u00C3\u00B5es
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idOperacao: (query) Apresenta o id da Opera\u00C3\u00A7\u00C3\u00A3o. (optional)
     - parameter idCredor: (query) Apresenta o id do Credor. (optional)
     - parameter idProduto: (query) Apresenta o id do produto que vai ser alterado. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET27(sort sort: [String]?, page: Int?, limit: Int?, idOperacao: Int?, idCredor: Int?, idProduto: Int?, completion: ((data: PageOperacaoCredorResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET27WithRequestBuilder(sort: sort, page: page, limit: limit, idOperacao: idOperacao, idCredor: idCredor, idProduto: idProduto).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista as Regras Opera\u00C3\u00A7\u00C3\u00B5es
     
     - GET /api/regras-operacoes-estabelecimentos
     - Este m\u00C3\u00A9todo permite que sejam listados as Regras opera\u00C3\u00A7\u00C3\u00B5es existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "diasAfastamento" : 29,
    "fatorMultiplicador" : "AGENDA",
    "idOperacao" : 2,
    "vencimentoPrimeiraParcela" : 29,
    "planoMaximo" : 5,
    "planoMinimo" : 1,
    "idProduto" : 1,
    "remuneracaoPercentual" : 0.04,
    "flagTaxaFixada" : true,
    "idCredor" : 1,
    "remuneracaoFixa" : 0.0,
    "periodicidade" : "MENSAL",
    "id" : 2
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idOperacao: (query) Apresenta o id da Opera\u00C3\u00A7\u00C3\u00A3o. (optional)
     - parameter idCredor: (query) Apresenta o id do Credor. (optional)
     - parameter idProduto: (query) Apresenta o id do produto que vai ser alterado. (optional)

     - returns: RequestBuilder<PageOperacaoCredorResponse> 
     */
    public class func listarUsingGET27WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, idOperacao: Int?, idCredor: Int?, idProduto: Int?) -> RequestBuilder<PageOperacaoCredorResponse> {
        let path = "/api/regras-operacoes-estabelecimentos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "idOperacao": idOperacao,
            "idCredor": idCredor,
            "idProduto": idProduto
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageOperacaoCredorResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Telefones Estabelecimentos
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idEstabelecimento: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Estabelecimento (id). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET38(sort sort: [String]?, page: Int?, limit: Int?, idEstabelecimento: Int?, completion: ((data: PageTelefoneEstabelecimentoResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET38WithRequestBuilder(sort: sort, page: page, limit: limit, idEstabelecimento: idEstabelecimento).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Telefones Estabelecimentos
     
     - GET /api/telefones-estabelecimentos
     - Este m\u00C3\u00A9todo permite que sejam listados os telefones dos estabelecimentos existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idEstabelecimento" : 123456789,
    "telefone" : "aeiou",
    "ddd" : "aeiou",
    "id" : 123456789,
    "ramal" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idEstabelecimento: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Estabelecimento (id). (optional)

     - returns: RequestBuilder<PageTelefoneEstabelecimentoResponse> 
     */
    public class func listarUsingGET38WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, idEstabelecimento: Int?) -> RequestBuilder<PageTelefoneEstabelecimentoResponse> {
        let path = "/api/telefones-estabelecimentos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "idEstabelecimento": idEstabelecimento
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTelefoneEstabelecimentoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Terminais cadastrados no Emissor
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Terminal (id). (optional)
     - parameter terminal: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do terminal. (optional)
     - parameter numeroEstabelecimento: (query) N\u00C3\u00BAmero do estabelecimento a qual o terminal pertence. (optional)
     - parameter idEstabelecimento: (query) N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento a qual o terminal pertence. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET40(sort sort: [String]?, page: Int?, limit: Int?, id: Int?, terminal: String?, numeroEstabelecimento: Int?, idEstabelecimento: Int?, completion: ((data: PageTerminalResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET40WithRequestBuilder(sort: sort, page: page, limit: limit, id: id, terminal: terminal, numeroEstabelecimento: numeroEstabelecimento, idEstabelecimento: idEstabelecimento).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Terminais cadastrados no Emissor
     
     - GET /api/terminais
     - Este m\u00C3\u00A9todo permite que sejam listados os terminais existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "flagTerminalVirtual" : false,
    "idEstabelecimento" : 123456789,
    "flagConsultaExtrato" : false,
    "id" : 123456789,
    "terminal" : "aeiou",
    "numeroEstabelecimento" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Terminal (id). (optional)
     - parameter terminal: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do terminal. (optional)
     - parameter numeroEstabelecimento: (query) N\u00C3\u00BAmero do estabelecimento a qual o terminal pertence. (optional)
     - parameter idEstabelecimento: (query) N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento a qual o terminal pertence. (optional)

     - returns: RequestBuilder<PageTerminalResponse> 
     */
    public class func listarUsingGET40WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, id: Int?, terminal: String?, numeroEstabelecimento: Int?, idEstabelecimento: Int?) -> RequestBuilder<PageTerminalResponse> {
        let path = "/api/terminais"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "id": id,
            "terminal": terminal,
            "numeroEstabelecimento": numeroEstabelecimento,
            "idEstabelecimento": idEstabelecimento
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTerminalResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os V\u00C3\u00ADnculos dos estabelecimento com os adquirentes
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idAdquirente: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do adquirente (id). (optional)
     - parameter idEstabelecimento: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento. (optional)
     - parameter codigoEstabelecimentoAdquirente: (query) C\u00C3\u00B3digo do v\u00C3\u00ADnculo entre o estabelecimento e o adquirente. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET51(sort sort: [String]?, page: Int?, limit: Int?, idAdquirente: Int?, idEstabelecimento: Int?, codigoEstabelecimentoAdquirente: String?, completion: ((data: PageVinculoEstabelecimentoAdquirenteResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET51WithRequestBuilder(sort: sort, page: page, limit: limit, idAdquirente: idAdquirente, idEstabelecimento: idEstabelecimento, codigoEstabelecimentoAdquirente: codigoEstabelecimentoAdquirente).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os V\u00C3\u00ADnculos dos estabelecimento com os adquirentes
     
     - GET /api/adquirentes-estabelecimento
     - Este m\u00C3\u00A9todo permite que sejam listados os V\u00C3\u00ADnculos dos estabelecimento com os adquirentes.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idAdquirente" : 123456789,
    "idEstabelecimento" : 123456789,
    "mensagem" : "aeiou",
    "dataHoraCadastro" : "aeiou",
    "id" : 123456789,
    "codigoEstabelecimentoAdquirente" : "aeiou",
    "status" : 123
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idAdquirente: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do adquirente (id). (optional)
     - parameter idEstabelecimento: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento. (optional)
     - parameter codigoEstabelecimentoAdquirente: (query) C\u00C3\u00B3digo do v\u00C3\u00ADnculo entre o estabelecimento e o adquirente. (optional)

     - returns: RequestBuilder<PageVinculoEstabelecimentoAdquirenteResponse> 
     */
    public class func listarUsingGET51WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, idAdquirente: Int?, idEstabelecimento: Int?, codigoEstabelecimentoAdquirente: String?) -> RequestBuilder<PageVinculoEstabelecimentoAdquirenteResponse> {
        let path = "/api/adquirentes-estabelecimento"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "idAdquirente": idAdquirente,
            "idEstabelecimento": idEstabelecimento,
            "codigoEstabelecimentoAdquirente": codigoEstabelecimentoAdquirente
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageVinculoEstabelecimentoAdquirenteResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os v\u00C3\u00ADnculos cadastrados no Emissor
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id). 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id). (optional)
     - parameter idOperacao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Opera\u00C3\u00A7\u00C3\u00A3o (id). (optional)
     - parameter codigoMCC: (query) C\u00C3\u00B3digo MCC. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET52(id id: Int, sort: [String]?, page: Int?, limit: Int?, idProduto: Int?, idOperacao: Int?, codigoMCC: Int?, completion: ((data: PageVinculoOperacaoResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET52WithRequestBuilder(id: id, sort: sort, page: page, limit: limit, idProduto: idProduto, idOperacao: idOperacao, codigoMCC: codigoMCC).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os v\u00C3\u00ADnculos cadastrados no Emissor
     
     - GET /api/estabelecimentos/{id}/operacoes
     - Este m\u00C3\u00A9todo permite que sejam listados os v\u00C3\u00ADnculos opera\u00C3\u00A7\u00C3\u00B5es existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "codigoMCC" : 123,
    "idProduto" : 123456789,
    "idOperacao" : 123456789,
    "codigoProcessamento" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id). 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id). (optional)
     - parameter idOperacao: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Opera\u00C3\u00A7\u00C3\u00A3o (id). (optional)
     - parameter codigoMCC: (query) C\u00C3\u00B3digo MCC. (optional)

     - returns: RequestBuilder<PageVinculoOperacaoResponse> 
     */
    public class func listarUsingGET52WithRequestBuilder(id id: Int, sort: [String]?, page: Int?, limit: Int?, idProduto: Int?, idOperacao: Int?, codigoMCC: Int?) -> RequestBuilder<PageVinculoOperacaoResponse> {
        var path = "/api/estabelecimentos/{id}/operacoes"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "idProduto": idProduto,
            "idOperacao": idOperacao,
            "codigoMCC": codigoMCC
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageVinculoOperacaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o cadastro de uma nova maquineta para um estabelecimento 
     
     - parameter maquinetaPersist: (body) maquinetaPersist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST16(maquinetaPersist maquinetaPersist: MaquinetaPersist, completion: ((data: MaquinetaResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST16WithRequestBuilder(maquinetaPersist: maquinetaPersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de uma nova maquineta para um estabelecimento 
     
     - POST /api/maquinetas
     - Este m\u00C3\u00A9todo permite que seja cadastrada uma nova maquineta para um estabelecimento.
     - examples: [{contentType=application/json, example={
  "dataHoraCadastramento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idEstabelecimento" : 123456789,
  "usuarioApl" : "aeiou",
  "valor" : 1.3579000000000001069366817318950779736042022705078125,
  "idTipoMaquineta" : 123456789,
  "id" : 123456789,
  "terminal" : "aeiou",
  "dataHoraImplantacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
}}]
     
     - parameter maquinetaPersist: (body) maquinetaPersist 

     - returns: RequestBuilder<MaquinetaResponse> 
     */
    public class func salvarUsingPOST16WithRequestBuilder(maquinetaPersist maquinetaPersist: MaquinetaPersist) -> RequestBuilder<MaquinetaResponse> {
        let path = "/api/maquinetas"
        let URLString = PierAPI.basePath + path
        
        let parameters = maquinetaPersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<MaquinetaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza o cadastro de uma nova Regra Opera\u00C3\u00A7\u00C3\u00A3o
     
     - parameter oprecaoCredorPersist: (body) oprecaoCredorPersist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST17(oprecaoCredorPersist oprecaoCredorPersist: OperacaoCredorPersist, completion: ((data: OperacaoCredorResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST17WithRequestBuilder(oprecaoCredorPersist: oprecaoCredorPersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de uma nova Regra Opera\u00C3\u00A7\u00C3\u00A3o
     
     - POST /api/regras-operacoes-estabelecimentos
     - Este m\u00C3\u00A9todo permite que seja cadastrada uma nova Regra Opera\u00C3\u00A7\u00C3\u00A3o.
     - examples: [{contentType=application/json, example={
  "diasAfastamento" : 29,
  "fatorMultiplicador" : "AGENDA",
  "idOperacao" : 2,
  "vencimentoPrimeiraParcela" : 29,
  "planoMaximo" : 5,
  "planoMinimo" : 1,
  "idProduto" : 1,
  "remuneracaoPercentual" : 0.04,
  "flagTaxaFixada" : true,
  "idCredor" : 1,
  "remuneracaoFixa" : 0.0,
  "periodicidade" : "MENSAL",
  "id" : 2
}}]
     
     - parameter oprecaoCredorPersist: (body) oprecaoCredorPersist 

     - returns: RequestBuilder<OperacaoCredorResponse> 
     */
    public class func salvarUsingPOST17WithRequestBuilder(oprecaoCredorPersist oprecaoCredorPersist: OperacaoCredorPersist) -> RequestBuilder<OperacaoCredorResponse> {
        let path = "/api/regras-operacoes-estabelecimentos"
        let URLString = PierAPI.basePath + path
        
        let parameters = oprecaoCredorPersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<OperacaoCredorResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza o cadastro de um novo telefone para um estabelecimento 
     
     - parameter idEstabelecimento: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento (id). 
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). 
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. 
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST22(idEstabelecimento idEstabelecimento: Int, ddd: String, telefone: String, ramal: String?, completion: ((data: TelefoneEstabelecimentoResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST22WithRequestBuilder(idEstabelecimento: idEstabelecimento, ddd: ddd, telefone: telefone, ramal: ramal).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de um novo telefone para um estabelecimento 
     
     - POST /api/telefones-estabelecimentos
     - Este m\u00C3\u00A9todo permite que seja cadastrado um novo telefone para um estabelecimento.
     - examples: [{contentType=application/json, example={
  "idEstabelecimento" : 123456789,
  "telefone" : "aeiou",
  "ddd" : "aeiou",
  "id" : 123456789,
  "ramal" : "aeiou"
}}]
     
     - parameter idEstabelecimento: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento (id). 
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). 
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. 
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)

     - returns: RequestBuilder<TelefoneEstabelecimentoResponse> 
     */
    public class func salvarUsingPOST22WithRequestBuilder(idEstabelecimento idEstabelecimento: Int, ddd: String, telefone: String, ramal: String?) -> RequestBuilder<TelefoneEstabelecimentoResponse> {
        let path = "/api/telefones-estabelecimentos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idEstabelecimento": idEstabelecimento,
            "ddd": ddd,
            "telefone": telefone,
            "ramal": ramal
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TelefoneEstabelecimentoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o cadastro de um novo Terminal
     
     - parameter terminalPersist: (body) terminalPersist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST24(terminalPersist terminalPersist: TerminalPersist, completion: ((data: TerminalResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST24WithRequestBuilder(terminalPersist: terminalPersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de um novo Terminal
     
     - POST /api/terminais
     - Este m\u00C3\u00A9todo permite que seja cadastrado um novo Terminal.
     - examples: [{contentType=application/json, example={
  "flagTerminalVirtual" : false,
  "idEstabelecimento" : 123456789,
  "flagConsultaExtrato" : false,
  "id" : 123456789,
  "terminal" : "aeiou",
  "numeroEstabelecimento" : 123456789
}}]
     
     - parameter terminalPersist: (body) terminalPersist 

     - returns: RequestBuilder<TerminalResponse> 
     */
    public class func salvarUsingPOST24WithRequestBuilder(terminalPersist terminalPersist: TerminalPersist) -> RequestBuilder<TerminalResponse> {
        let path = "/api/terminais"
        let URLString = PierAPI.basePath + path
        
        let parameters = terminalPersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<TerminalResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza o cadastro de um novo VinculoEstabelecimentoAdquirente
     
     - parameter vinculoEstabelecimentoAdquirentePersist: (body) vinculoEstabelecimentoAdquirentePersist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST29(vinculoEstabelecimentoAdquirentePersist vinculoEstabelecimentoAdquirentePersist: VinculoEstabelecimentoAdquirentePersist, completion: ((data: VinculoEstabelecimentoAdquirenteResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST29WithRequestBuilder(vinculoEstabelecimentoAdquirentePersist: vinculoEstabelecimentoAdquirentePersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de um novo VinculoEstabelecimentoAdquirente
     
     - POST /api/adquirentes-estabelecimento
     - Este m\u00C3\u00A9todo permite que seja cadastrado um novo VinculoEstabelecimentoAdquirente.
     - examples: [{contentType=application/json, example={
  "idAdquirente" : 123456789,
  "idEstabelecimento" : 123456789,
  "mensagem" : "aeiou",
  "dataHoraCadastro" : "aeiou",
  "id" : 123456789,
  "codigoEstabelecimentoAdquirente" : "aeiou",
  "status" : 123
}}]
     
     - parameter vinculoEstabelecimentoAdquirentePersist: (body) vinculoEstabelecimentoAdquirentePersist 

     - returns: RequestBuilder<VinculoEstabelecimentoAdquirenteResponse> 
     */
    public class func salvarUsingPOST29WithRequestBuilder(vinculoEstabelecimentoAdquirentePersist vinculoEstabelecimentoAdquirentePersist: VinculoEstabelecimentoAdquirentePersist) -> RequestBuilder<VinculoEstabelecimentoAdquirenteResponse> {
        let path = "/api/adquirentes-estabelecimento"
        let URLString = PierAPI.basePath + path
        
        let parameters = vinculoEstabelecimentoAdquirentePersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<VinculoEstabelecimentoAdquirenteResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

}
