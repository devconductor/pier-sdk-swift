//
// NotificacoesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class NotificacoesAPI: APIBase {
    /**
     
     Altera configura\u00C3\u00A7\u00C3\u00B5es de E-mail
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da configura\u00C3\u00A7\u00C3\u00A3o de e-mail. 
     - parameter persist: (body) persist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarConfiguracaoUsingPUT(id id: Int, persist: ConfiguracaoEmailPersist, completion: ((data: ConfiguracaoEmailResponse?, error: ErrorType?) -> Void)) {
        alterarConfiguracaoUsingPUTWithRequestBuilder(id: id, persist: persist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Altera configura\u00C3\u00A7\u00C3\u00B5es de E-mail
     
     - PUT /api/configuracoes-email/{id}
     - Esse recurso permite salvar altera\u00C3\u00A7\u00C3\u00B5es de configura\u00C3\u00A7\u00C3\u00B5es de E-mail.
     - examples: [{contentType=application/json, example={
  "portSSL" : "aeiou",
  "requerTLS" : false,
  "dataAlteracao" : "aeiou",
  "protocolo" : "aeiou",
  "requerAutenticacao" : false,
  "senha" : "aeiou",
  "requerSSL" : false,
  "port" : "aeiou",
  "host" : "aeiou",
  "portTLSSTARTTLS" : "aeiou",
  "dataInclusao" : "aeiou",
  "usuario" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da configura\u00C3\u00A7\u00C3\u00A3o de e-mail. 
     - parameter persist: (body) persist 

     - returns: RequestBuilder<ConfiguracaoEmailResponse> 
     */
    public class func alterarConfiguracaoUsingPUTWithRequestBuilder(id id: Int, persist: ConfiguracaoEmailPersist) -> RequestBuilder<ConfiguracaoEmailResponse> {
        var path = "/api/configuracoes-email/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = persist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ConfiguracaoEmailResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Alterar template de notifica\u00C3\u00A7\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do layout de e-mail. 
     - parameter conteudo: (body) Template HTML 
     - parameter idConfiguracaoEmail: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da configra\u00C3\u00A7\u00C3\u00A3o de EMAIL. (optional)
     - parameter tipoLayout: (query) Tipo do layout. (optional)
     - parameter tipoNotificacao: (query) Tipo da notifica\u00C3\u00A7\u00C3\u00A3o. (optional)
     - parameter assunto: (query) Assunto da Notificaca\u00C3\u00A7\u00C3\u00A3o. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarTemplateNotificacaoUsingPUT(id id: Int, conteudo: String, idConfiguracaoEmail: Int?, tipoLayout: String?, tipoNotificacao: String?, assunto: String?, completion: ((data: TemplateNotificacaoResponse?, error: ErrorType?) -> Void)) {
        alterarTemplateNotificacaoUsingPUTWithRequestBuilder(id: id, conteudo: conteudo, idConfiguracaoEmail: idConfiguracaoEmail, tipoLayout: tipoLayout, tipoNotificacao: tipoNotificacao, assunto: assunto).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Alterar template de notifica\u00C3\u00A7\u00C3\u00A3o
     
     - PUT /api/templates-notificacoes/{id}
     - Esse recurso permite salvar altera\u00C3\u00A7\u00C3\u00B5es de templates notifica\u00C3\u00A7\u00C3\u00B5es.
     - examples: [{contentType=application/json, example={
  "idConfiguracaoEmail" : 123456789,
  "assunto" : "aeiou",
  "conteudo" : "aeiou",
  "dataInclusao" : "aeiou",
  "id" : 123456789,
  "tipoNotificacao" : "aeiou",
  "tipoLayout" : "aeiou",
  "dataAlteracao" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do layout de e-mail. 
     - parameter conteudo: (body) Template HTML 
     - parameter idConfiguracaoEmail: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da configra\u00C3\u00A7\u00C3\u00A3o de EMAIL. (optional)
     - parameter tipoLayout: (query) Tipo do layout. (optional)
     - parameter tipoNotificacao: (query) Tipo da notifica\u00C3\u00A7\u00C3\u00A3o. (optional)
     - parameter assunto: (query) Assunto da Notificaca\u00C3\u00A7\u00C3\u00A3o. (optional)

     - returns: RequestBuilder<TemplateNotificacaoResponse> 
     */
    public class func alterarTemplateNotificacaoUsingPUTWithRequestBuilder(id id: Int, conteudo: String, idConfiguracaoEmail: Int?, tipoLayout: String?, tipoNotificacao: String?, assunto: String?) -> RequestBuilder<TemplateNotificacaoResponse> {
        var path = "/api/templates-notificacoes/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = conteudo.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<TemplateNotificacaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Atualizar SMS
     
     - parameter nsu: (query) Seu n\u00C3\u00BAmero (optional)
     - parameter status: (query) Status (optional)
     - parameter data: (query) Data (optional)
     - parameter textoStatus: (query) TextoStatus (optional)
     - parameter operadora: (query) Operadora (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func atualizarSMSUsingPOST(nsu nsu: String?, status: String?, data: String?, textoStatus: String?, operadora: String?, completion: ((data: NotificacaoSMSResponse?, error: ErrorType?) -> Void)) {
        atualizarSMSUsingPOSTWithRequestBuilder(nsu: nsu, status: status, data: data, textoStatus: textoStatus, operadora: operadora).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Atualizar SMS
     
     - POST /api/notificacoes/sms/atualizar-status
     - Esse recurso permite atualizar o status do SMS do emissor
     - examples: [{contentType=application/json, example={
  "quantidadeTentativasEnvio" : 123,
  "conteudo" : "aeiou",
  "idConta" : 123456789,
  "dataAlteracaoStatus" : "aeiou",
  "dataAgendamento" : "aeiou",
  "descricaoStatus" : "aeiou",
  "protocolo" : "aeiou",
  "nsu" : 123456789,
  "idPessoa" : 123456789,
  "tipoEvento" : "aeiou",
  "resposta" : "aeiou",
  "celular" : "aeiou",
  "dataInclusao" : "aeiou",
  "id" : 123456789,
  "idEmissor" : 123456789,
  "operadora" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter nsu: (query) Seu n\u00C3\u00BAmero (optional)
     - parameter status: (query) Status (optional)
     - parameter data: (query) Data (optional)
     - parameter textoStatus: (query) TextoStatus (optional)
     - parameter operadora: (query) Operadora (optional)

     - returns: RequestBuilder<NotificacaoSMSResponse> 
     */
    public class func atualizarSMSUsingPOSTWithRequestBuilder(nsu nsu: String?, status: String?, data: String?, textoStatus: String?, operadora: String?) -> RequestBuilder<NotificacaoSMSResponse> {
        let path = "/api/notificacoes/sms/atualizar-status"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "nsu": nsu,
            "status": status,
            "data": data,
            "texto_status": textoStatus,
            "operadora": operadora
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<NotificacaoSMSResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Consulta configura\u00C3\u00A7\u00C3\u00A3o de E-mail
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da configura\u00C3\u00A7\u00C3\u00A3o de e-mail. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarConfiguracaoUsingGET(id id: Int, completion: ((data: ConfiguracaoEmailResponse?, error: ErrorType?) -> Void)) {
        consultarConfiguracaoUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consulta configura\u00C3\u00A7\u00C3\u00A3o de E-mail
     
     - GET /api/configuracoes-email/{id}
     - Esse recurso permite consultar uma configura\u00C3\u00A7\u00C3\u00A3o espec\u00C3\u00ADfica por id.
     - examples: [{contentType=application/json, example={
  "portSSL" : "aeiou",
  "requerTLS" : false,
  "dataAlteracao" : "aeiou",
  "protocolo" : "aeiou",
  "requerAutenticacao" : false,
  "senha" : "aeiou",
  "requerSSL" : false,
  "port" : "aeiou",
  "host" : "aeiou",
  "portTLSSTARTTLS" : "aeiou",
  "dataInclusao" : "aeiou",
  "usuario" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da configura\u00C3\u00A7\u00C3\u00A3o de e-mail. 

     - returns: RequestBuilder<ConfiguracaoEmailResponse> 
     */
    public class func consultarConfiguracaoUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<ConfiguracaoEmailResponse> {
        var path = "/api/configuracoes-email/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ConfiguracaoEmailResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Consulta template de notifica\u00C3\u00A7\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do layout de e-mail. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarTemplateNotificacaoUsingGET(id id: Int, completion: ((data: TemplateNotificacaoResponse?, error: ErrorType?) -> Void)) {
        consultarTemplateNotificacaoUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consulta template de notifica\u00C3\u00A7\u00C3\u00A3o
     
     - GET /api/templates-notificacoes/{id}
     - Esse recurso permite consultar uma configura\u00C3\u00A7\u00C3\u00A3o espec\u00C3\u00ADfica por id.
     - examples: [{contentType=application/json, example={
  "idConfiguracaoEmail" : 123456789,
  "assunto" : "aeiou",
  "conteudo" : "aeiou",
  "dataInclusao" : "aeiou",
  "id" : 123456789,
  "tipoNotificacao" : "aeiou",
  "tipoLayout" : "aeiou",
  "dataAlteracao" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do layout de e-mail. 

     - returns: RequestBuilder<TemplateNotificacaoResponse> 
     */
    public class func consultarTemplateNotificacaoUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<TemplateNotificacaoResponse> {
        var path = "/api/templates-notificacoes/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TemplateNotificacaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Gerar c\u00C3\u00B3digo de seguran\u00C3\u00A7a e enviar por sms
     
     - parameter persist: (body) persist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func gerarTokenUsingPOST(persist persist: CodigoSegurancaSMSPersist, completion: ((data: String?, error: ErrorType?) -> Void)) {
        gerarTokenUsingPOSTWithRequestBuilder(persist: persist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Gerar c\u00C3\u00B3digo de seguran\u00C3\u00A7a e enviar por sms
     
     - POST /api/notificacoes-sms/gerar-codigo-seguranca
     - Esse recurso permite gerar e enviar c\u00C3\u00B3digos de seguran\u00C3\u00A7a por sms, para valida\u00C3\u00A7\u00C3\u00A3o de dispositivos.
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter persist: (body) persist 

     - returns: RequestBuilder<String> 
     */
    public class func gerarTokenUsingPOSTWithRequestBuilder(persist persist: CodigoSegurancaSMSPersist) -> RequestBuilder<String> {
        let path = "/api/notificacoes-sms/gerar-codigo-seguranca"
        let URLString = PierAPI.basePath + path
        
        let parameters = persist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Lista configura\u00C3\u00A7\u00C3\u00B5es de E-mails
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarConfiguracaoUsingGET(page page: Int?, limit: Int?, completion: ((data: PageConfiguracaoEmailResponse?, error: ErrorType?) -> Void)) {
        listarConfiguracaoUsingGETWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista configura\u00C3\u00A7\u00C3\u00B5es de E-mails
     
     - GET /api/configuracoes-email
     - Esse recurso permite listar as configura\u00C3\u00A7\u00C3\u00B5es de E-mails.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "portSSL" : "aeiou",
    "requerTLS" : false,
    "dataAlteracao" : "aeiou",
    "protocolo" : "aeiou",
    "requerAutenticacao" : false,
    "senha" : "aeiou",
    "requerSSL" : false,
    "port" : "aeiou",
    "host" : "aeiou",
    "portTLSSTARTTLS" : "aeiou",
    "dataInclusao" : "aeiou",
    "usuario" : "aeiou",
    "id" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageConfiguracaoEmailResponse> 
     */
    public class func listarConfiguracaoUsingGETWithRequestBuilder(page page: Int?, limit: Int?) -> RequestBuilder<PageConfiguracaoEmailResponse> {
        let path = "/api/configuracoes-email"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageConfiguracaoEmailResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Listar Push
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter dataEnvio: (query) Apresenta a data e em que o registro foi enviado para o dispositivo. (optional)
     - parameter tipoEvento: (query) Nome do tipoEvento da notifica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter status: (query) Status de envio da notifica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter plataforma: (query) Plataforma de Push notifications. (optional)
     - parameter protocolo: (query) N\u00C3\u00BAmero do protocolo de envio de notifica\u00C3\u00A7\u00C3\u00B5es (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarPushUsingGET(page page: Int?, limit: Int?, dataEnvio: String?, tipoEvento: String?, status: String?, plataforma: String?, protocolo: String?, completion: ((data: PagePushResponse?, error: ErrorType?) -> Void)) {
        listarPushUsingGETWithRequestBuilder(page: page, limit: limit, dataEnvio: dataEnvio, tipoEvento: tipoEvento, status: status, plataforma: plataforma, protocolo: protocolo).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Listar Push
     
     - GET /api/notificacoes/push
     - Esse recurso permite listar os Pushes do emissor
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "protocolo" : "aeiou",
    "idPessoa" : 123456789,
    "conteudo" : "aeiou",
    "idConta" : 123456789,
    "tipoEvento" : "aeiou",
    "plataforma" : "aeiou",
    "titulo" : "aeiou",
    "idEmissor" : 123456789,
    "tokenDispositivo" : "aeiou",
    "dataEnvio" : "aeiou",
    "status" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter dataEnvio: (query) Apresenta a data e em que o registro foi enviado para o dispositivo. (optional)
     - parameter tipoEvento: (query) Nome do tipoEvento da notifica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter status: (query) Status de envio da notifica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter plataforma: (query) Plataforma de Push notifications. (optional)
     - parameter protocolo: (query) N\u00C3\u00BAmero do protocolo de envio de notifica\u00C3\u00A7\u00C3\u00B5es (optional)

     - returns: RequestBuilder<PagePushResponse> 
     */
    public class func listarPushUsingGETWithRequestBuilder(page page: Int?, limit: Int?, dataEnvio: String?, tipoEvento: String?, status: String?, plataforma: String?, protocolo: String?) -> RequestBuilder<PagePushResponse> {
        let path = "/api/notificacoes/push"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "dataEnvio": dataEnvio,
            "tipoEvento": tipoEvento,
            "status": status,
            "plataforma": plataforma,
            "protocolo": protocolo
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PagePushResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Listar SMS
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter dataInclusao: (query) Apresenta a data e em que o registro foi inclu\u00C3\u00ADdo na base para ser enviado (optional)
     - parameter tipoEvento: (query) Nome do tipoEvento da notifica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter status: (query) Status de envio da notifica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter operadora: (query) Nome da operadora a qual a notifica\u00C3\u00A7\u00C3\u00A3o foi enviada. (optional)
     - parameter protocolo: (query) N\u00C3\u00BAmero do protocolo de envio de notifica\u00C3\u00A7\u00C3\u00B5es (optional)
     - parameter nsu: (query) Apresenta o nsu da notifica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarSMSUsingGET(page page: Int?, limit: Int?, dataInclusao: String?, tipoEvento: String?, status: String?, operadora: String?, protocolo: String?, nsu: Int?, completion: ((data: PageSMSResponse?, error: ErrorType?) -> Void)) {
        listarSMSUsingGETWithRequestBuilder(page: page, limit: limit, dataInclusao: dataInclusao, tipoEvento: tipoEvento, status: status, operadora: operadora, protocolo: protocolo, nsu: nsu).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Listar SMS
     
     - GET /api/notificacoes/sms
     - Esse recurso permite listar os SMS do emissor
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "quantidadeTentativasEnvio" : 123,
    "conteudo" : "aeiou",
    "idConta" : 123456789,
    "dataAlteracaoStatus" : "aeiou",
    "dataAgendamento" : "aeiou",
    "descricaoStatus" : "aeiou",
    "protocolo" : "aeiou",
    "nsu" : 123456789,
    "idPessoa" : 123456789,
    "tipoEvento" : "aeiou",
    "resposta" : "aeiou",
    "celular" : "aeiou",
    "dataInclusao" : "aeiou",
    "id" : 123456789,
    "idEmissor" : 123456789,
    "operadora" : "aeiou",
    "status" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter dataInclusao: (query) Apresenta a data e em que o registro foi inclu\u00C3\u00ADdo na base para ser enviado (optional)
     - parameter tipoEvento: (query) Nome do tipoEvento da notifica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter status: (query) Status de envio da notifica\u00C3\u00A7\u00C3\u00A3o (optional)
     - parameter operadora: (query) Nome da operadora a qual a notifica\u00C3\u00A7\u00C3\u00A3o foi enviada. (optional)
     - parameter protocolo: (query) N\u00C3\u00BAmero do protocolo de envio de notifica\u00C3\u00A7\u00C3\u00B5es (optional)
     - parameter nsu: (query) Apresenta o nsu da notifica\u00C3\u00A7\u00C3\u00A3o (optional)

     - returns: RequestBuilder<PageSMSResponse> 
     */
    public class func listarSMSUsingGETWithRequestBuilder(page page: Int?, limit: Int?, dataInclusao: String?, tipoEvento: String?, status: String?, operadora: String?, protocolo: String?, nsu: Int?) -> RequestBuilder<PageSMSResponse> {
        let path = "/api/notificacoes/sms"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "dataInclusao": dataInclusao,
            "tipoEvento": tipoEvento,
            "status": status,
            "operadora": operadora,
            "protocolo": protocolo,
            "nsu": nsu
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageSMSResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista templates de notifica\u00C3\u00A7\u00C3\u00B5es
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarTemplateNotificacaoUsingGET(page page: Int?, limit: Int?, completion: ((data: PageTemplateNotificacaoResponse?, error: ErrorType?) -> Void)) {
        listarTemplateNotificacaoUsingGETWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista templates de notifica\u00C3\u00A7\u00C3\u00B5es
     
     - GET /api/templates-notificacoes
     - Esse recurso permite listar templates notifica\u00C3\u00A7\u00C3\u00B5es.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idConfiguracaoEmail" : 123456789,
    "assunto" : "aeiou",
    "conteudo" : "aeiou",
    "dataInclusao" : "aeiou",
    "id" : 123456789,
    "tipoNotificacao" : "aeiou",
    "tipoLayout" : "aeiou",
    "dataAlteracao" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageTemplateNotificacaoResponse> 
     */
    public class func listarTemplateNotificacaoUsingGETWithRequestBuilder(page page: Int?, limit: Int?) -> RequestBuilder<PageTemplateNotificacaoResponse> {
        let path = "/api/templates-notificacoes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTemplateNotificacaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os tipos templates de notifica\u00C3\u00A7\u00C3\u00A3o
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarTiposLayoutsUsingGET(completion: ((data: [AnyObject]?, error: ErrorType?) -> Void)) {
        listarTiposLayoutsUsingGETWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os tipos templates de notifica\u00C3\u00A7\u00C3\u00A3o
     
     - GET /api/tipos-layouts
     - Esse recurso permite listar os tipos de templates dispon\u00C3\u00ADveis os par\u00C3\u00A2metros devem ser usados entre chaves. Ex: {{nomeParametro}} .
     - examples: [{contentType=application/json, example=[ "{}" ]}]

     - returns: RequestBuilder<[AnyObject]> 
     */
    public class func listarTiposLayoutsUsingGETWithRequestBuilder() -> RequestBuilder<[AnyObject]> {
        let path = "/api/tipos-layouts"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[AnyObject]>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Responder SMS
     
     - parameter nsu: (query) Seu n\u00C3\u00BAmero (optional)
     - parameter data: (query) Data (optional)
     - parameter resposta: (query) TextoStatus (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func responderSMSUsingPOST(nsu nsu: String?, data: String?, resposta: String?, completion: ((data: NotificacaoSMSResponse?, error: ErrorType?) -> Void)) {
        responderSMSUsingPOSTWithRequestBuilder(nsu: nsu, data: data, resposta: resposta).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Responder SMS
     
     - POST /api/notificacoes/sms/responder
     - Esse recurso permite atualizar a resposta do SMS, fornecida pedo usu\u00C3\u00A1rio
     - examples: [{contentType=application/json, example={
  "quantidadeTentativasEnvio" : 123,
  "conteudo" : "aeiou",
  "idConta" : 123456789,
  "dataAlteracaoStatus" : "aeiou",
  "dataAgendamento" : "aeiou",
  "descricaoStatus" : "aeiou",
  "protocolo" : "aeiou",
  "nsu" : 123456789,
  "idPessoa" : 123456789,
  "tipoEvento" : "aeiou",
  "resposta" : "aeiou",
  "celular" : "aeiou",
  "dataInclusao" : "aeiou",
  "id" : 123456789,
  "idEmissor" : 123456789,
  "operadora" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter nsu: (query) Seu n\u00C3\u00BAmero (optional)
     - parameter data: (query) Data (optional)
     - parameter resposta: (query) TextoStatus (optional)

     - returns: RequestBuilder<NotificacaoSMSResponse> 
     */
    public class func responderSMSUsingPOSTWithRequestBuilder(nsu nsu: String?, data: String?, resposta: String?) -> RequestBuilder<NotificacaoSMSResponse> {
        let path = "/api/notificacoes/sms/responder"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "nsu": nsu,
            "data": data,
            "resposta": resposta
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<NotificacaoSMSResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Salva configura\u00C3\u00A7\u00C3\u00B5es de E-mail
     
     - parameter persist: (body) persist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarConfiguracaoUsingPOST(persist persist: ConfiguracaoEmailPersist, completion: ((data: ConfiguracaoEmailResponse?, error: ErrorType?) -> Void)) {
        salvarConfiguracaoUsingPOSTWithRequestBuilder(persist: persist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Salva configura\u00C3\u00A7\u00C3\u00B5es de E-mail
     
     - POST /api/configuracoes-email
     - Esse recurso salvar configura\u00C3\u00A7\u00C3\u00B5es de E-mail.
     - examples: [{contentType=application/json, example={
  "portSSL" : "aeiou",
  "requerTLS" : false,
  "dataAlteracao" : "aeiou",
  "protocolo" : "aeiou",
  "requerAutenticacao" : false,
  "senha" : "aeiou",
  "requerSSL" : false,
  "port" : "aeiou",
  "host" : "aeiou",
  "portTLSSTARTTLS" : "aeiou",
  "dataInclusao" : "aeiou",
  "usuario" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter persist: (body) persist 

     - returns: RequestBuilder<ConfiguracaoEmailResponse> 
     */
    public class func salvarConfiguracaoUsingPOSTWithRequestBuilder(persist persist: ConfiguracaoEmailPersist) -> RequestBuilder<ConfiguracaoEmailResponse> {
        let path = "/api/configuracoes-email"
        let URLString = PierAPI.basePath + path
        
        let parameters = persist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ConfiguracaoEmailResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Enviar Push FCM
     
     - parameter pushPersists: (body) pushPersists 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarPushFCMUsingPOST(pushPersists pushPersists: [PushFCMEGCM], completion: ((data: NotificacaoResponse?, error: ErrorType?) -> Void)) {
        salvarPushFCMUsingPOSTWithRequestBuilder(pushPersists: pushPersists).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Enviar Push FCM
     
     - POST /api/notificacoes/push/fcm
     - Esse recurso permite enviar Push para um determinado dipositivo movel atrav\u00C3\u00A9s da plataforma FCM (Firebase Cloud Messaging).
     - examples: [{contentType=application/json, example={
  "protocolo" : "aeiou",
  "mensagem" : "aeiou"
}}]
     
     - parameter pushPersists: (body) pushPersists 

     - returns: RequestBuilder<NotificacaoResponse> 
     */
    public class func salvarPushFCMUsingPOSTWithRequestBuilder(pushPersists pushPersists: [PushFCMEGCM]) -> RequestBuilder<NotificacaoResponse> {
        let path = "/api/notificacoes/push/fcm"
        let URLString = PierAPI.basePath + path
        
        let parameters = pushPersists.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<NotificacaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Enviar Push GCM
     
     - parameter pushPersists: (body) pushPersists 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarPushGCMUsingPOST(pushPersists pushPersists: [PushFCMEGCM], completion: ((data: NotificacaoResponse?, error: ErrorType?) -> Void)) {
        salvarPushGCMUsingPOSTWithRequestBuilder(pushPersists: pushPersists).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Enviar Push GCM
     
     - POST /api/notificacoes/push/gcm
     - Esse recurso permite enviar Push para um determinado dipositivo movel atrav\u00C3\u00A9s da plataforma GCM (Google Cloud Messaging).
     - examples: [{contentType=application/json, example={
  "protocolo" : "aeiou",
  "mensagem" : "aeiou"
}}]
     
     - parameter pushPersists: (body) pushPersists 

     - returns: RequestBuilder<NotificacaoResponse> 
     */
    public class func salvarPushGCMUsingPOSTWithRequestBuilder(pushPersists pushPersists: [PushFCMEGCM]) -> RequestBuilder<NotificacaoResponse> {
        let path = "/api/notificacoes/push/gcm"
        let URLString = PierAPI.basePath + path
        
        let parameters = pushPersists.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<NotificacaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Enviar Push APNS
     
     - parameter pushPersists: (body) pushPersists 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarPushUsingPOST(pushPersists pushPersists: [PushAPNS], completion: ((data: NotificacaoResponse?, error: ErrorType?) -> Void)) {
        salvarPushUsingPOSTWithRequestBuilder(pushPersists: pushPersists).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Enviar Push APNS
     
     - POST /api/notificacoes/push/apns
     - Esse recurso permite enviar Push para um determinado dipositivo movel atrav\u00C3\u00A9s da plataforma APNS (Apple Push Notification Service).
     - examples: [{contentType=application/json, example={
  "protocolo" : "aeiou",
  "mensagem" : "aeiou"
}}]
     
     - parameter pushPersists: (body) pushPersists 

     - returns: RequestBuilder<NotificacaoResponse> 
     */
    public class func salvarPushUsingPOSTWithRequestBuilder(pushPersists pushPersists: [PushAPNS]) -> RequestBuilder<NotificacaoResponse> {
        let path = "/api/notificacoes/push/apns"
        let URLString = PierAPI.basePath + path
        
        let parameters = pushPersists.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<NotificacaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Enviar SMS
     
     - parameter listaSMS: (body) listaSMS 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarSMSUsingPOST(listaSMS listaSMS: [NotificacaoSMSBody], completion: ((data: NotificacaoResponse?, error: ErrorType?) -> Void)) {
        salvarSMSUsingPOSTWithRequestBuilder(listaSMS: listaSMS).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Enviar SMS
     
     - POST /api/notificacoes/sms
     - Esse recurso permite enviar uma lista de SMS.
     - examples: [{contentType=application/json, example={
  "protocolo" : "aeiou",
  "mensagem" : "aeiou"
}}]
     
     - parameter listaSMS: (body) listaSMS 

     - returns: RequestBuilder<NotificacaoResponse> 
     */
    public class func salvarSMSUsingPOSTWithRequestBuilder(listaSMS listaSMS: [NotificacaoSMSBody]) -> RequestBuilder<NotificacaoResponse> {
        let path = "/api/notificacoes/sms"
        let URLString = PierAPI.basePath + path
        
        let parameters = listaSMS.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<NotificacaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Salva template de notifica\u00C3\u00A7\u00C3\u00A3o
     
     - parameter conteudo: (body) Template HTML 
     - parameter idConfiguracaoEmail: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da configra\u00C3\u00A7\u00C3\u00A3o de EMAIL. (optional)
     - parameter tipoLayout: (query) Tipo do layout. (optional)
     - parameter tipoNotificacao: (query) Tipo da notifica\u00C3\u00A7\u00C3\u00A3o. (optional)
     - parameter assunto: (query) Assunto da Notificaca\u00C3\u00A7\u00C3\u00A3o. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarTemplateNotificacaoUsingPOST(conteudo conteudo: String, idConfiguracaoEmail: Int?, tipoLayout: String?, tipoNotificacao: String?, assunto: String?, completion: ((data: TemplateNotificacaoResponse?, error: ErrorType?) -> Void)) {
        salvarTemplateNotificacaoUsingPOSTWithRequestBuilder(conteudo: conteudo, idConfiguracaoEmail: idConfiguracaoEmail, tipoLayout: tipoLayout, tipoNotificacao: tipoNotificacao, assunto: assunto).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Salva template de notifica\u00C3\u00A7\u00C3\u00A3o
     
     - POST /api/templates-notificacoes
     - Esse recurso salvar template notifica\u00C3\u00A7\u00C3\u00B5e.
     - examples: [{contentType=application/json, example={
  "idConfiguracaoEmail" : 123456789,
  "assunto" : "aeiou",
  "conteudo" : "aeiou",
  "dataInclusao" : "aeiou",
  "id" : 123456789,
  "tipoNotificacao" : "aeiou",
  "tipoLayout" : "aeiou",
  "dataAlteracao" : "aeiou"
}}]
     
     - parameter conteudo: (body) Template HTML 
     - parameter idConfiguracaoEmail: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da configra\u00C3\u00A7\u00C3\u00A3o de EMAIL. (optional)
     - parameter tipoLayout: (query) Tipo do layout. (optional)
     - parameter tipoNotificacao: (query) Tipo da notifica\u00C3\u00A7\u00C3\u00A3o. (optional)
     - parameter assunto: (query) Assunto da Notificaca\u00C3\u00A7\u00C3\u00A3o. (optional)

     - returns: RequestBuilder<TemplateNotificacaoResponse> 
     */
    public class func salvarTemplateNotificacaoUsingPOSTWithRequestBuilder(conteudo conteudo: String, idConfiguracaoEmail: Int?, tipoLayout: String?, tipoNotificacao: String?, assunto: String?) -> RequestBuilder<TemplateNotificacaoResponse> {
        let path = "/api/templates-notificacoes"
        let URLString = PierAPI.basePath + path
        
        let parameters = conteudo.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<TemplateNotificacaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Validar c\u00C3\u00B3digo de seguran\u00C3\u00A7a enviado por sms
     
     - parameter request: (body) request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarTokenUsingPOST(request request: CodigoSegurancaSMSRequest, completion: ((data: String?, error: ErrorType?) -> Void)) {
        validarTokenUsingPOSTWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Validar c\u00C3\u00B3digo de seguran\u00C3\u00A7a enviado por sms
     
     - POST /api/notificacoes-sms/validar-codigo-seguranca
     - Esse recurso permite validar os c\u00C3\u00B3digos de seguran\u00C3\u00A7a enviador por sms, para valida\u00C3\u00A7\u00C3\u00A3o de dispositivos.
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter request: (body) request 

     - returns: RequestBuilder<String> 
     */
    public class func validarTokenUsingPOSTWithRequestBuilder(request request: CodigoSegurancaSMSRequest) -> RequestBuilder<String> {
        let path = "/api/notificacoes-sms/validar-codigo-seguranca"
        let URLString = PierAPI.basePath + path
        
        let parameters = request.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

}
