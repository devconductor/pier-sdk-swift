//
// ContaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ContaAPI: APIBase {
    /**
     
     Lan\u00C3\u00A7a um ajuste para a conta do id informado
     
     - parameter id: (path) Id Conta 
     - parameter idTipoAjuste: (query) C\u00C3\u00B3digo identificador do tipo de ajuste. 
     - parameter dataAjuste: (query) Data do ajuste no formato yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. 
     - parameter valorAjuste: (query) Valor do ajuste 
     - parameter identificadorExterno: (query) Identificador Externo (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func ajustarContaUsingPOST1(id id: Int, idTipoAjuste: Int, dataAjuste: String, valorAjuste: Double, identificadorExterno: String?, completion: ((data: AjusteFinanceiroResponse?, error: ErrorType?) -> Void)) {
        ajustarContaUsingPOST1WithRequestBuilder(id: id, idTipoAjuste: idTipoAjuste, dataAjuste: dataAjuste, valorAjuste: valorAjuste, identificadorExterno: identificadorExterno).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lan\u00C3\u00A7a um ajuste para a conta do id informado
     
     - POST /api/contas/{id}/ajustes-financeiros
     - Este recurso insere um ajuste para a conta do id informado
     - examples: [{contentType=application/json, example={
  "identificadorExterno" : "aeiou",
  "idConta" : 123456789,
  "dataAjuste" : "aeiou",
  "valor" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123456789,
  "idTipoAjuste" : 123456789,
  "status" : 123456789
}}]
     
     - parameter id: (path) Id Conta 
     - parameter idTipoAjuste: (query) C\u00C3\u00B3digo identificador do tipo de ajuste. 
     - parameter dataAjuste: (query) Data do ajuste no formato yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. 
     - parameter valorAjuste: (query) Valor do ajuste 
     - parameter identificadorExterno: (query) Identificador Externo (optional)

     - returns: RequestBuilder<AjusteFinanceiroResponse> 
     */
    public class func ajustarContaUsingPOST1WithRequestBuilder(id id: Int, idTipoAjuste: Int, dataAjuste: String, valorAjuste: Double, identificadorExterno: String?) -> RequestBuilder<AjusteFinanceiroResponse> {
        var path = "/api/contas/{id}/ajustes-financeiros"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idTipoAjuste": idTipoAjuste,
            "dataAjuste": dataAjuste,
            "valorAjuste": valorAjuste,
            "identificadorExterno": identificadorExterno
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<AjusteFinanceiroResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Altera o produto associado \u00C3\u00A0 conta.
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter request: (body) request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarProdutoUsingPOST(id id: Int, request: AlterarProdutoRequest, completion: ((data: String?, error: ErrorType?) -> Void)) {
        alterarProdutoUsingPOSTWithRequestBuilder(id: id, request: request).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Altera o produto associado \u00C3\u00A0 conta.
     
     - POST /api/contas/{id}/alterar-produto
     - O recurso permite fazer modifica\u00C3\u00A7\u00C3\u00A3o do produto associado \u00C3\u00A0 conta.
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter request: (body) request 

     - returns: RequestBuilder<String> 
     */
    public class func alterarProdutoUsingPOSTWithRequestBuilder(id id: Int, request: AlterarProdutoRequest) -> RequestBuilder<String> {
        var path = "/api/contas/{id}/alterar-produto"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = request.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o de uma Pessoa tilular da conta
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id) 
     - parameter idPessoa: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de uma Pessoa (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarTitularUsingPOST(id id: Int, idPessoa: Int, completion: ((data: ContaResponse?, error: ErrorType?) -> Void)) {
        alterarTitularUsingPOSTWithRequestBuilder(id: id, idPessoa: idPessoa).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o de uma Pessoa tilular da conta
     
     - POST /api/contas/{id}/alterar-titular
     - Esta m\u00C3\u00A9todo permite altera a pessoa de uma conta.
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "idStatusConta" : 123456789,
  "valorRenda" : 1.3579000000000001069366817318950779736042022705078125,
  "idProduto" : 123456789,
  "idOrigemComercial" : 123456789,
  "melhorDiaCompra" : 123,
  "dataUltimaAlteracaoVencimento" : "aeiou",
  "dataStatusConta" : "aeiou",
  "id" : 123456789,
  "diaVencimento" : 123,
  "dataCadastro" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id) 
     - parameter idPessoa: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de uma Pessoa (id). 

     - returns: RequestBuilder<ContaResponse> 
     */
    public class func alterarTitularUsingPOSTWithRequestBuilder(id id: Int, idPessoa: Int) -> RequestBuilder<ContaResponse> {
        var path = "/api/contas/{id}/alterar-titular"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_pessoa": idPessoa
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ContaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o do dia de vencimento das faturas da conta
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter novoDiaVencimento: (query) Novo dia de vencimento. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarVencimentoUsingPUT(id id: Int, novoDiaVencimento: Int, completion: ((data: ContaResponse?, error: ErrorType?) -> Void)) {
        alterarVencimentoUsingPUTWithRequestBuilder(id: id, novoDiaVencimento: novoDiaVencimento).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o do dia de vencimento das faturas da conta
     
     - PUT /api/contas/{id}/alterar-vencimento
     - Esse recurso permite alterar o vencimento de uma conta especifica.
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "idStatusConta" : 123456789,
  "valorRenda" : 1.3579000000000001069366817318950779736042022705078125,
  "idProduto" : 123456789,
  "idOrigemComercial" : 123456789,
  "melhorDiaCompra" : 123,
  "dataUltimaAlteracaoVencimento" : "aeiou",
  "dataStatusConta" : "aeiou",
  "id" : 123456789,
  "diaVencimento" : 123,
  "dataCadastro" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter novoDiaVencimento: (query) Novo dia de vencimento. 

     - returns: RequestBuilder<ContaResponse> 
     */
    public class func alterarVencimentoUsingPUTWithRequestBuilder(id id: Int, novoDiaVencimento: Int) -> RequestBuilder<ContaResponse> {
        var path = "/api/contas/{id}/alterar-vencimento"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "novo_dia_vencimento": novoDiaVencimento
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ContaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Atribuir Anuidade
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter idAnuidade: (query) Identificador da anuidade 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter DDD: (query) DDD do celular (optional)
     - parameter celular: (query) N\u00C3\u00BAmero do celular (optional)
     - parameter idOperadora: (query) Identificador da operadora do celular (optional)
     - parameter idOrigemComercial: (query) Identificador da origem comercial (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func ativarAnuidadeUsingPOST(id id: Int, idAnuidade: Int, sort: [String]?, page: Int?, limit: Int?, DDD: String?, celular: String?, idOperadora: Int?, idOrigemComercial: Int?, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        ativarAnuidadeUsingPOSTWithRequestBuilder(id: id, idAnuidade: idAnuidade, sort: sort, page: page, limit: limit, DDD: DDD, celular: celular, idOperadora: idOperadora, idOrigemComercial: idOrigemComercial).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Atribuir Anuidade
     
     - POST /api/contas/{id}/atribuir-anuidade
     - Esse recurso permite configurar qual a regra de Anuidade que ser\u00C3\u00A1 atribu\u00C3\u00ADda a uma determinada Conta.
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter idAnuidade: (query) Identificador da anuidade 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter DDD: (query) DDD do celular (optional)
     - parameter celular: (query) N\u00C3\u00BAmero do celular (optional)
     - parameter idOperadora: (query) Identificador da operadora do celular (optional)
     - parameter idOrigemComercial: (query) Identificador da origem comercial (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func ativarAnuidadeUsingPOSTWithRequestBuilder(id id: Int, idAnuidade: Int, sort: [String]?, page: Int?, limit: Int?, DDD: String?, celular: String?, idOperadora: Int?, idOrigemComercial: Int?) -> RequestBuilder<AnyObject> {
        var path = "/api/contas/{id}/atribuir-anuidade"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "idAnuidade": idAnuidade,
            "DDD": DDD,
            "celular": celular,
            "idOperadora": idOperadora,
            "idOrigemComercial": idOrigemComercial
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<AnyObject>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
      Ativa o servi\u00C3\u00A7o de envio de fatura por email
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func ativarEnvioFaturaEmailUsingPOST(id id: Int, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        ativarEnvioFaturaEmailUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
      Ativa o servi\u00C3\u00A7o de envio de fatura por email
     
     - POST /api/contas/{id}/ativar-fatura-email
     - Este recurso ativa o servi\u00C3\u00A7o de envio de fatura por email
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func ativarEnvioFaturaEmailUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<AnyObject> {
        var path = "/api/contas/{id}/ativar-fatura-email"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<AnyObject>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza o bloqueio de uma determinada Conta
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter idStatus: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Novo Status Conta. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func bloquearUsingPOST1(id id: Int, idStatus: Int, completion: ((data: ContaResponse?, error: ErrorType?) -> Void)) {
        bloquearUsingPOST1WithRequestBuilder(id: id, idStatus: idStatus).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o bloqueio de uma determinada Conta
     
     - POST /api/contas/{id}/bloquear
     - Este m\u00C3\u00A9todo permite a realiza\u00C3\u00A7\u00C3\u00A3o do bloqueio de uma determinada conta a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "idStatusConta" : 123456789,
  "valorRenda" : 1.3579000000000001069366817318950779736042022705078125,
  "idProduto" : 123456789,
  "idOrigemComercial" : 123456789,
  "melhorDiaCompra" : 123,
  "dataUltimaAlteracaoVencimento" : "aeiou",
  "dataStatusConta" : "aeiou",
  "id" : 123456789,
  "diaVencimento" : 123,
  "dataCadastro" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter idStatus: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Novo Status Conta. 

     - returns: RequestBuilder<ContaResponse> 
     */
    public class func bloquearUsingPOST1WithRequestBuilder(id id: Int, idStatus: Int) -> RequestBuilder<ContaResponse> {
        var path = "/api/contas/{id}/bloquear"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_status": idStatus
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ContaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o cancelamento de uma determinada Conta
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter idStatus: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Novo Status Conta. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func cancelarUsingPOST1(id id: Int, idStatus: Int, completion: ((data: ContaResponse?, error: ErrorType?) -> Void)) {
        cancelarUsingPOST1WithRequestBuilder(id: id, idStatus: idStatus).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cancelamento de uma determinada Conta
     
     - POST /api/contas/{id}/cancelar
     - Este m\u00C3\u00A9todo permite a realiza\u00C3\u00A7\u00C3\u00A3o do cancelamento de uma determinada conta a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "idStatusConta" : 123456789,
  "valorRenda" : 1.3579000000000001069366817318950779736042022705078125,
  "idProduto" : 123456789,
  "idOrigemComercial" : 123456789,
  "melhorDiaCompra" : 123,
  "dataUltimaAlteracaoVencimento" : "aeiou",
  "dataStatusConta" : "aeiou",
  "id" : 123456789,
  "diaVencimento" : 123,
  "dataCadastro" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter idStatus: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Novo Status Conta. 

     - returns: RequestBuilder<ContaResponse> 
     */
    public class func cancelarUsingPOST1WithRequestBuilder(id id: Int, idStatus: Int) -> RequestBuilder<ContaResponse> {
        var path = "/api/contas/{id}/cancelar"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_status": idStatus
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ContaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Apresenta a data m\u00C3\u00A1xima para pagamento da fatura em atraso para receber o benef\u00C3\u00ADcio.
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarBeneficioPagamentoAtrasoUsingGET(id id: Int, completion: ((data: BeneficioPagamentoAtrasoResponse?, error: ErrorType?) -> Void)) {
        consultarBeneficioPagamentoAtrasoUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta a data m\u00C3\u00A1xima para pagamento da fatura em atraso para receber o benef\u00C3\u00ADcio.
     
     - GET /api/contas/{id}/consultar-beneficio-pagamento-atraso
     - Este m\u00C3\u00A9todo permite consultar se o cliente tem direito ao benef\u00C3\u00ADcio de pagamento em atraso, em loja, at\u00C3\u00A9 o s\u00C3\u00A1bado subsequente ao vencimento, ficando isento do pagamento de multa, encargos, mora e IOF.
     - examples: [{contentType=application/json, example={
  "dataBeneficio" : "yyyy-MM-dd"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 

     - returns: RequestBuilder<BeneficioPagamentoAtrasoResponse> 
     */
    public class func consultarBeneficioPagamentoAtrasoUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<BeneficioPagamentoAtrasoResponse> {
        var path = "/api/contas/{id}/consultar-beneficio-pagamento-atraso"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<BeneficioPagamentoAtrasoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Consulta os dados de um determinado boleto da fatura
     
     - parameter id: (path) Id Conta 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarBoletoEmitidoUsingGET(id id: Int, completion: ((data: BoletoResponse?, error: ErrorType?) -> Void)) {
        consultarBoletoEmitidoUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consulta os dados de um determinado boleto da fatura
     
     - GET /api/contas/{id}/consultar-dados-pagamento-fatura
     - Este recurso consulta um boleto da fatura
     - examples: [{contentType=application/json, example={
  "codigoBeneficiario" : "aeiou",
  "locaisDePagamento" : [ "aeiou" ],
  "dataDocumento" : "aeiou",
  "dataProcessamento" : "aeiou",
  "instrucoes" : [ "aeiou" ],
  "cidadePagador" : "aeiou",
  "agencia" : "aeiou",
  "especie" : "aeiou",
  "bairroPagador" : "aeiou",
  "valorBoleto" : 1.3579000000000001069366817318950779736042022705078125,
  "especieDoDocumento" : "aeiou",
  "cepPagador" : "aeiou",
  "numeroDoDocumento" : "aeiou",
  "linhaDigitavel" : "aeiou",
  "carteira" : "aeiou",
  "digitoCodigoBeneficiario" : "aeiou",
  "ufPagador" : "aeiou",
  "codigoDeBarras" : "aeiou",
  "documentoBeneficiario" : "aeiou",
  "aceite" : false,
  "nomeBeneficiario" : "aeiou",
  "banco" : "aeiou",
  "dataFechamento" : "aeiou",
  "nomePagador" : "aeiou",
  "numeroConvenio" : "aeiou",
  "logradouroPagador" : "aeiou",
  "documentoPagador" : "aeiou",
  "dataVencimento" : "aeiou",
  "digitoNossoNumero" : "aeiou",
  "nossoNumero" : "aeiou"
}}]
     
     - parameter id: (path) Id Conta 

     - returns: RequestBuilder<BoletoResponse> 
     */
    public class func consultarBoletoEmitidoUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<BoletoResponse> {
        var path = "/api/contas/{id}/consultar-dados-pagamento-fatura"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<BoletoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Consulta a d\u00C3\u00ADvida atualizada do cliente
     
     - parameter id: (path) Id Conta 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter dataVencimento: (query) Data do vencimento (optional)
     - parameter idEscritorioCobranca: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do escrit\u00C3\u00B3rio de cobran\u00C3\u00A7a (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarDividaAtualizadaClienteUsingGET(id id: Int, sort: [String]?, page: Int?, limit: Int?, dataVencimento: String?, idEscritorioCobranca: Int?, completion: ((data: DividaClienteResponse?, error: ErrorType?) -> Void)) {
        consultarDividaAtualizadaClienteUsingGETWithRequestBuilder(id: id, sort: sort, page: page, limit: limit, dataVencimento: dataVencimento, idEscritorioCobranca: idEscritorioCobranca).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consulta a d\u00C3\u00ADvida atualizada do cliente
     
     - GET /api/contas/{id}/recuperar-divida-atualizada
     - Este recurso consulta a d\u00C3\u00ADvida atualizada do cliente
     - examples: [{contentType=application/json, example={
  "dataVencimentoFaturaAtraso" : "aeiou",
  "quantidadeDiasAtrasoCorrigido" : 123456789,
  "idStatusConta" : 123456789,
  "idStatusAcordo" : 123456789,
  "valorSaldoCorrigido" : 1.3579000000000001069366817318950779736042022705078125,
  "emailPessoaConta" : "aeiou",
  "nomeEscritorioCobranca" : "aeiou",
  "taxaCorrecao" : 1.3579000000000001069366817318950779736042022705078125,
  "idEscritorioCobranca" : 123456789,
  "dataVencimentoAcordo" : "aeiou",
  "descricaoStatusConta" : "aeiou",
  "descricaoStatusAcordo" : "aeiou",
  "id" : 123456789,
  "quantidadeDiasAtraso" : 123456789,
  "valorSaldoDevedor" : 1.3579000000000001069366817318950779736042022705078125,
  "valorCorrecao" : 1.3579000000000001069366817318950779736042022705078125,
  "valorIOF" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) Id Conta 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter dataVencimento: (query) Data do vencimento (optional)
     - parameter idEscritorioCobranca: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do escrit\u00C3\u00B3rio de cobran\u00C3\u00A7a (optional)

     - returns: RequestBuilder<DividaClienteResponse> 
     */
    public class func consultarDividaAtualizadaClienteUsingGETWithRequestBuilder(id id: Int, sort: [String]?, page: Int?, limit: Int?, dataVencimento: String?, idEscritorioCobranca: Int?) -> RequestBuilder<DividaClienteResponse> {
        var path = "/api/contas/{id}/recuperar-divida-atualizada"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "dataVencimento": dataVencimento,
            "idEscritorioCobranca": idEscritorioCobranca
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<DividaClienteResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Permite consultar a partir do ID da conta as taxas e tarifas
     
     - parameter id: (path) ID da conta a ser consultada. 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarTaxasTarifasUsingGET(id id: Int, sort: [String]?, page: Int?, limit: Int?, completion: ((data: PageTaxasRefinanciamentoResponse?, error: ErrorType?) -> Void)) {
        consultarTaxasTarifasUsingGETWithRequestBuilder(id: id, sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite consultar a partir do ID da conta as taxas e tarifas
     
     - GET /api/contas/{id}/consultar-taxas-tarifas
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores consultem as taxas e tarifas da conta
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idConta" : 123456789,
    "taxaMaximaCompraJuros" : 1.3579000000000001069366817318950779736042022705078125,
    "taxaMaximaProximoPeriodo" : 1.3579000000000001069366817318950779736042022705078125,
    "agenciamento" : 1.3579000000000001069366817318950779736042022705078125,
    "planoTaxaDefault" : 123,
    "vencimento" : "aeiou",
    "taxaMaximaSaque" : 1.3579000000000001069366817318950779736042022705078125,
    "taxaEncargosFinanciamento" : 1.3579000000000001069366817318950779736042022705078125,
    "taxaPermanencia" : 1.3579000000000001069366817318950779736042022705078125,
    "idProduto" : 123456789,
    "taxaRecuperacaoRefinanciamento" : 1.3579000000000001069366817318950779736042022705078125,
    "dataEntrada" : "aeiou",
    "idPlanoConta" : 123456789,
    "idPlanoPct" : 123456789,
    "taxaCompraJuros" : 1.3579000000000001069366817318950779736042022705078125,
    "taxaRefinanciamento" : 1.3579000000000001069366817318950779736042022705078125,
    "taxaSaque" : 1.3579000000000001069366817318950779736042022705078125,
    "comissaoGarantia" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : 123456789,
    "taxaPercCalcPagamentoMinimo" : 1.3579000000000001069366817318950779736042022705078125,
    "recuperacaoEncargosFinanceiros" : 1.3579000000000001069366817318950779736042022705078125,
    "idPlanoCreditoTaxa" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (path) ID da conta a ser consultada. 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageTaxasRefinanciamentoResponse> 
     */
    public class func consultarTaxasTarifasUsingGETWithRequestBuilder(id id: Int, sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PageTaxasRefinanciamentoResponse> {
        var path = "/api/contas/{id}/consultar-taxas-tarifas"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTaxasRefinanciamentoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Apresenta dados de uma determinada conta
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET11(id id: Int, completion: ((data: ContaDetalheResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET11WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta dados de uma determinada conta
     
     - GET /api/contas/{id}
     - Este m\u00C3\u00A9todo permite consultar dados de uma determinada conta a partir de seu codigo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idOrigemComercial" : 123456789,
  "melhorDiaCompra" : 123,
  "saldoDisponivelSaque" : 1.3579000000000001069366817318950779736042022705078125,
  "statusConta" : "aeiou",
  "limiteGlobal" : 1.3579000000000001069366817318950779736042022705078125,
  "diaVencimento" : 123,
  "formaEnvioFatura" : "aeiou",
  "nomeFantasiaBasica" : "aeiou",
  "idProduto" : 123456789,
  "nomeOrigemComercial" : "aeiou",
  "dataUltimaAlteracaoVencimento" : "aeiou",
  "diasAtraso" : 123456789,
  "id" : 123456789,
  "saldoDisponivelGlobal" : 1.3579000000000001069366817318950779736042022705078125,
  "dataCadastro" : "aeiou",
  "limiteSaqueGlobal" : 1.3579000000000001069366817318950779736042022705078125,
  "idStatusConta" : 123456789,
  "valorRenda" : 1.3579000000000001069366817318950779736042022705078125,
  "nome" : "aeiou",
  "idPessoa" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "dataStatusConta" : "aeiou",
  "idFantasiaBasica" : 123456789,
  "numeroAgencia" : 123,
  "titular" : false,
  "dataHoraUltimaCompra" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 

     - returns: RequestBuilder<ContaDetalheResponse> 
     */
    public class func consultarUsingGET11WithRequestBuilder(id id: Int) -> RequestBuilder<ContaDetalheResponse> {
        var path = "/api/contas/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ContaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Consulta os detalhes de uma determinada transfer\u00C3\u00AAncia
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter idTransferencia: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da transfer\u00C3\u00AAncia (id_transferencia). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET40(id id: Int, idTransferencia: Int, completion: ((data: TransferenciaDetalheResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET40WithRequestBuilder(id: id, idTransferencia: idTransferencia).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consulta os detalhes de uma determinada transfer\u00C3\u00AAncia
     
     - GET /api/contas/{id}/transferencias-creditos-cartoes/{idTransferencia}
     - Este m\u00C3\u00A9todo permite consultar os detalhes de uma determinada transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito realizada entre contas.
     - examples: [{contentType=application/json, example={
  "valorTransferencia" : 1.3579000000000001069366817318950779736042022705078125,
  "idContaOrigem" : 123456789,
  "dataTransferencia" : "aeiou",
  "nomePessoaOrigem" : "aeiou",
  "idContaDestino" : 123456789,
  "valorTarifa" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123456789,
  "nomePessoaDestino" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter idTransferencia: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da transfer\u00C3\u00AAncia (id_transferencia). 

     - returns: RequestBuilder<TransferenciaDetalheResponse> 
     */
    public class func consultarUsingGET40WithRequestBuilder(id id: Int, idTransferencia: Int) -> RequestBuilder<TransferenciaDetalheResponse> {
        var path = "/api/contas/{id}/transferencias-creditos-cartoes/{idTransferencia}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{idTransferencia}", withString: "\(idTransferencia)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TransferenciaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Desativa o servi\u00C3\u00A7o de envio de fatura por email
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func desativarEnvioFaturaEmailUsingPOST(id id: Int, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        desativarEnvioFaturaEmailUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Desativa o servi\u00C3\u00A7o de envio de fatura por email
     
     - POST /api/contas/{id}/desativar-fatura-email
     - Este recurso desativa o servi\u00C3\u00A7o de envio de fatura por email
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func desativarEnvioFaturaEmailUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<AnyObject> {
        var path = "/api/contas/{id}/desativar-fatura-email"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<AnyObject>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Gera um boleto de recarga
     
     - parameter id: (path) Id Conta 
     - parameter valor: (query) Atributo que representa o valor do Boleto Emitido 
     - parameter dataVencimento: (query) Atributo que representa a data de vencimento do boleto 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func gerarBoletoRecargaUsingPOST(id id: Int, valor: Double, dataVencimento: String, completion: ((data: BoletoResponse?, error: ErrorType?) -> Void)) {
        gerarBoletoRecargaUsingPOSTWithRequestBuilder(id: id, valor: valor, dataVencimento: dataVencimento).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Gera um boleto de recarga
     
     - POST /api/contas/{id}/gerar-boleto-recarga
     - Este recurso gera um boleto de recarga
     - examples: [{contentType=application/json, example={
  "codigoBeneficiario" : "aeiou",
  "locaisDePagamento" : [ "aeiou" ],
  "dataDocumento" : "aeiou",
  "dataProcessamento" : "aeiou",
  "instrucoes" : [ "aeiou" ],
  "cidadePagador" : "aeiou",
  "agencia" : "aeiou",
  "especie" : "aeiou",
  "bairroPagador" : "aeiou",
  "valorBoleto" : 1.3579000000000001069366817318950779736042022705078125,
  "especieDoDocumento" : "aeiou",
  "cepPagador" : "aeiou",
  "numeroDoDocumento" : "aeiou",
  "linhaDigitavel" : "aeiou",
  "carteira" : "aeiou",
  "digitoCodigoBeneficiario" : "aeiou",
  "ufPagador" : "aeiou",
  "codigoDeBarras" : "aeiou",
  "documentoBeneficiario" : "aeiou",
  "aceite" : false,
  "nomeBeneficiario" : "aeiou",
  "banco" : "aeiou",
  "dataFechamento" : "aeiou",
  "nomePagador" : "aeiou",
  "numeroConvenio" : "aeiou",
  "logradouroPagador" : "aeiou",
  "documentoPagador" : "aeiou",
  "dataVencimento" : "aeiou",
  "digitoNossoNumero" : "aeiou",
  "nossoNumero" : "aeiou"
}}]
     
     - parameter id: (path) Id Conta 
     - parameter valor: (query) Atributo que representa o valor do Boleto Emitido 
     - parameter dataVencimento: (query) Atributo que representa a data de vencimento do boleto 

     - returns: RequestBuilder<BoletoResponse> 
     */
    public class func gerarBoletoRecargaUsingPOSTWithRequestBuilder(id id: Int, valor: Double, dataVencimento: String) -> RequestBuilder<BoletoResponse> {
        var path = "/api/contas/{id}/gerar-boleto-recarga"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "valor": valor,
            "dataVencimento": dataVencimento
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<BoletoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o envio para gera\u00C3\u00A7\u00C3\u00A3o de um novo cart\u00C3\u00A3o na gr\u00C3\u00A1fica
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter cartaoEmbossingRequest: (body) cartaoEmbossingRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func gerarCartaoEmbossingUsingPOST(id id: Int, cartaoEmbossingRequest: CartaoEmbossingRequest, completion: ((data: CartaoEmbossingResponse?, error: ErrorType?) -> Void)) {
        gerarCartaoEmbossingUsingPOSTWithRequestBuilder(id: id, cartaoEmbossingRequest: cartaoEmbossingRequest).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o envio para gera\u00C3\u00A7\u00C3\u00A3o de um novo cart\u00C3\u00A3o na gr\u00C3\u00A1fica
     
     - POST /api/contas/{id}/gerar-cartao-grafica
     - Este recurso permite que seja gerado um novo Cart\u00C3\u00A3o para um determinado Portador que esteja vinculado a uma Conta. Para isso, ser\u00C3\u00A1 preciso informar o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id), o idPessoa do Portador e o idTipoPlastico do Cart\u00C3\u00A3o que dever\u00C3\u00A1 ser gerado para impress\u00C3\u00A3o. Esta funcionalidade poder\u00C3\u00A1 ser utilizada para impress\u00C3\u00A3o de cart\u00C3\u00B5es em gr\u00C3\u00A1fica.
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "idCartao" : 123456789,
  "idConta" : 123456789,
  "dataValidade" : "aeiou",
  "nomeOrigemComercial" : "aeiou",
  "idTipoCartao" : 123456789,
  "cpf" : "aeiou",
  "idBandeira" : 123456789,
  "flagVirtual" : 123,
  "dataGeracao" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter cartaoEmbossingRequest: (body) cartaoEmbossingRequest 

     - returns: RequestBuilder<CartaoEmbossingResponse> 
     */
    public class func gerarCartaoEmbossingUsingPOSTWithRequestBuilder(id id: Int, cartaoEmbossingRequest: CartaoEmbossingRequest) -> RequestBuilder<CartaoEmbossingResponse> {
        var path = "/api/contas/{id}/gerar-cartao-grafica"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = cartaoEmbossingRequest.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CartaoEmbossingResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza a gera\u00C3\u00A7\u00C3\u00A3o de um cart\u00C3\u00A3o provisorio
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func gerarCartaoProvisorioUsingPOST(id id: Int, completion: ((data: CartaoImpressaoProvisorioResponse?, error: ErrorType?) -> Void)) {
        gerarCartaoProvisorioUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a gera\u00C3\u00A7\u00C3\u00A3o de um cart\u00C3\u00A3o provisorio
     
     - POST /api/contas/{id}/gerar-cartao-provisorio
     - Este recurso permite que seja gerado um cart\u00C3\u00A3o provis\u00C3\u00B3rio para um determinado Portador que esteja vinculado a uma Conta. Para isso, ser\u00C3\u00A1 preciso informar o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id).
     - examples: [{contentType=application/json, example={
  "numeroCartao" : "aeiou",
  "idPessoa" : 123456789,
  "idCartao" : 123456789,
  "idConta" : 123456789,
  "dataValidade" : "aeiou",
  "nomePlastico" : "aeiou",
  "flagVirtual" : 123
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 

     - returns: RequestBuilder<CartaoImpressaoProvisorioResponse> 
     */
    public class func gerarCartaoProvisorioUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<CartaoImpressaoProvisorioResponse> {
        var path = "/api/contas/{id}/gerar-cartao-provisorio"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<CartaoImpressaoProvisorioResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza a gera\u00C3\u00A7\u00C3\u00A3o de um novo cart\u00C3\u00A3o para impress\u00C3\u00A3o avulsa
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter idPessoa: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da pessoa (id). 
     - parameter idTipoPlastico: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do TipoPlastico (id). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func gerarCartaoUsingPOST(id id: Int, idPessoa: Int, idTipoPlastico: Int?, completion: ((data: CartaoImpressaoResponse?, error: ErrorType?) -> Void)) {
        gerarCartaoUsingPOSTWithRequestBuilder(id: id, idPessoa: idPessoa, idTipoPlastico: idTipoPlastico).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a gera\u00C3\u00A7\u00C3\u00A3o de um novo cart\u00C3\u00A3o para impress\u00C3\u00A3o avulsa
     
     - POST /api/contas/{id}/pessoas/{idPessoa}/gerar-cartao
     - Este recurso permite que seja gerado um novo Cart\u00C3\u00A3o para um determinado Portador que esteja vinculado a uma Conta. Para isso, ser\u00C3\u00A1 preciso informar o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id), o idPessoa do Portador e o idTipoPlastico do Cart\u00C3\u00A3o que dever\u00C3\u00A1 ser gerado para impress\u00C3\u00A3o. Esta funcionalidade poder\u00C3\u00A1 ser utilizada para realizar a impress\u00C3\u00A3o de cart\u00C3\u00B5es em Lojas, Quiosques, Escrit\u00C3\u00B3rios, Terminais de Auto Atendimento, ou outro local que o Emissor escolher, desde que se possua uma impressora de Cart\u00C3\u00B5es habilidade para o fazer, no local.
     - examples: [{contentType=application/json, example={
  "cvv2" : "aeiou",
  "idCartao" : 123456789,
  "trilha1" : "aeiou",
  "trilhaCVV2" : "aeiou",
  "idConta" : 123456789,
  "trilhaCVV1" : "aeiou",
  "numeroCartaoHash" : 123456789,
  "idTipoCartao" : 123456789,
  "idBandeira" : 123456789,
  "trilha2" : "aeiou",
  "nomeEmpregador" : "aeiou",
  "numeroCartao" : "aeiou",
  "numeroContaCorente" : "aeiou",
  "idPessoa" : 123456789,
  "nomeEmpresa" : "aeiou",
  "dataValidade" : "aeiou",
  "nomeOrigemComercial" : "aeiou",
  "cpf" : "aeiou",
  "nomePlastico" : "aeiou",
  "flagVirtual" : 123,
  "numeroAgencia" : 123,
  "nomeEmpresaBeneficio" : "aeiou",
  "dataGeracao" : "aeiou",
  "tipoPortador" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter idPessoa: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da pessoa (id). 
     - parameter idTipoPlastico: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do TipoPlastico (id). (optional)

     - returns: RequestBuilder<CartaoImpressaoResponse> 
     */
    public class func gerarCartaoUsingPOSTWithRequestBuilder(id id: Int, idPessoa: Int, idTipoPlastico: Int?) -> RequestBuilder<CartaoImpressaoResponse> {
        var path = "/api/contas/{id}/pessoas/{idPessoa}/gerar-cartao"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{idPessoa}", withString: "\(idPessoa)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_tipo_plastico": idTipoPlastico
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<CartaoImpressaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza a gera\u00C3\u00A7\u00C3\u00A3o de um cart\u00C3\u00A3o virtual
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter dataValidade: (query) Data de Validade 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func gerarCartaoVirtualUsingPOST(id id: Int, dataValidade: String, completion: ((data: CartaoImpressaoResponse?, error: ErrorType?) -> Void)) {
        gerarCartaoVirtualUsingPOSTWithRequestBuilder(id: id, dataValidade: dataValidade).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a gera\u00C3\u00A7\u00C3\u00A3o de um cart\u00C3\u00A3o virtual
     
     - POST /api/contas/{id}/gerar-cartao-virtual
     - Este recurso permite que seja gerado um Cart\u00C3\u00A3o virtual para um determinado Portador que esteja vinculado a uma Conta. Para isso, ser\u00C3\u00A1 preciso informar o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id). Esta funcionalidade poder\u00C3\u00A1 ser utilizada para realizar a cria\u00C3\u00A7\u00C3\u00A3o de cart\u00C3\u00B5es virtuaes atraves de um app.
     - examples: [{contentType=application/json, example={
  "cvv2" : "aeiou",
  "idCartao" : 123456789,
  "trilha1" : "aeiou",
  "trilhaCVV2" : "aeiou",
  "idConta" : 123456789,
  "trilhaCVV1" : "aeiou",
  "numeroCartaoHash" : 123456789,
  "idTipoCartao" : 123456789,
  "idBandeira" : 123456789,
  "trilha2" : "aeiou",
  "nomeEmpregador" : "aeiou",
  "numeroCartao" : "aeiou",
  "numeroContaCorente" : "aeiou",
  "idPessoa" : 123456789,
  "nomeEmpresa" : "aeiou",
  "dataValidade" : "aeiou",
  "nomeOrigemComercial" : "aeiou",
  "cpf" : "aeiou",
  "nomePlastico" : "aeiou",
  "flagVirtual" : 123,
  "numeroAgencia" : 123,
  "nomeEmpresaBeneficio" : "aeiou",
  "dataGeracao" : "aeiou",
  "tipoPortador" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter dataValidade: (query) Data de Validade 

     - returns: RequestBuilder<CartaoImpressaoResponse> 
     */
    public class func gerarCartaoVirtualUsingPOSTWithRequestBuilder(id id: Int, dataValidade: String) -> RequestBuilder<CartaoImpressaoResponse> {
        var path = "/api/contas/{id}/gerar-cartao-virtual"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "dataValidade": dataValidade
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<CartaoImpressaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista o hist\u00C3\u00B3rico de altera\u00C3\u00A7\u00C3\u00B5es de limites da conta
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarHistoricoAlteracoesLimitesUsingGET(id id: Int, sort: [String]?, page: Int?, limit: Int?, completion: ((data: PageHistoricoEventosResponse?, error: ErrorType?) -> Void)) {
        listarHistoricoAlteracoesLimitesUsingGETWithRequestBuilder(id: id, sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista o hist\u00C3\u00B3rico de altera\u00C3\u00A7\u00C3\u00B5es de limites da conta
     
     - GET /api/contas/{id}/historicos-alteracoes-limites
     - Este recurso consulta o hist\u00C3\u00B3rico com as altera\u00C3\u00A7\u00C3\u00B5es de limites da conta informada
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "tipoHistorico" : "aeiou",
    "valorAtribuido" : "aeiou",
    "dataHistorico" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "idHistorico" : 123456789,
    "valorAnterior" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageHistoricoEventosResponse> 
     */
    public class func listarHistoricoAlteracoesLimitesUsingGETWithRequestBuilder(id id: Int, sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PageHistoricoEventosResponse> {
        var path = "/api/contas/{id}/historicos-alteracoes-limites"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageHistoricoEventosResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista o hist\u00C3\u00B3rico de entradas/sa\u00C3\u00ADdas de assessorias de cobran\u00C3\u00A7a
     
     - parameter id: (path) Id Conta 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarHistoricoAssessoriaUsingGET(id id: Int, sort: [String]?, page: Int?, limit: Int?, completion: ((data: PageHistoricoAssessoriaResponse?, error: ErrorType?) -> Void)) {
        listarHistoricoAssessoriaUsingGETWithRequestBuilder(id: id, sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista o hist\u00C3\u00B3rico de entradas/sa\u00C3\u00ADdas de assessorias de cobran\u00C3\u00A7a
     
     - GET /api/contas/{id}/historicos-assessorias-cobranca
     - Permite listar todos os registros de entrada e sa\u00C3\u00ADda da Conta em arquivos de integra\u00C3\u00A7\u00C3\u00A3o com empresas de assessorias de cobran\u00C3\u00A7a a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (idConta).
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "tipoHistorico" : "aeiou",
    "nomeAssessoria" : "aeiou",
    "dataHoraHistorico" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (path) Id Conta 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageHistoricoAssessoriaResponse> 
     */
    public class func listarHistoricoAssessoriaUsingGETWithRequestBuilder(id id: Int, sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PageHistoricoAssessoriaResponse> {
        var path = "/api/contas/{id}/historicos-assessorias-cobranca"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageHistoricoAssessoriaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista o historico de atrasos das faturas
     
     - parameter id: (path) Id Conta 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarHistoricoAtrasosFaturasUsingGET(id id: Int, sort: [String]?, page: Int?, limit: Int?, completion: ((data: PageHistoricoAtrasoFaturaResponse?, error: ErrorType?) -> Void)) {
        listarHistoricoAtrasosFaturasUsingGETWithRequestBuilder(id: id, sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista o historico de atrasos das faturas
     
     - GET /api/contas/{id}/historicos-faturas-atrasos
     - Este recurso lista o hist\u00C3\u00B3rico do pagamento de faturas em atraso
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "dataVencimento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "diasPagamentoAposVencimento" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (path) Id Conta 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageHistoricoAtrasoFaturaResponse> 
     */
    public class func listarHistoricoAtrasosFaturasUsingGETWithRequestBuilder(id id: Int, sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PageHistoricoAtrasoFaturaResponse> {
        var path = "/api/contas/{id}/historicos-faturas-atrasos"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageHistoricoAtrasoFaturaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista as transa\u00C3\u00A7\u00C3\u00B5es n\u00C3\u00A3o processadas da conta
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter dataInicio: (query) Data de in\u00C3\u00ADcio da consulta do extrato no formato yyyy-MM-dd (Par\u00C3\u00A2mentro Ignorado se dataFim n\u00C3\u00A3o for definida). (optional)
     - parameter dataFim: (query) Data fim da consulta do extrato no formato yyyy-MM-dd  (Par\u00C3\u00A2mentro Ignorado se dataInicio n\u00C3\u00A3o for definida). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarNaoProcessadasUsingGET(id id: Int, sort: [String]?, page: Int?, limit: Int?, dataInicio: String?, dataFim: String?, completion: ((data: PageTransacaoNaoProcessadaResponse?, error: ErrorType?) -> Void)) {
        listarNaoProcessadasUsingGETWithRequestBuilder(id: id, sort: sort, page: page, limit: limit, dataInicio: dataInicio, dataFim: dataFim).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista as transa\u00C3\u00A7\u00C3\u00B5es n\u00C3\u00A3o processadas da conta
     
     - GET /api/contas/{id}/transacoes/listar-nao-processadas
     - Este m\u00C3\u00A9todo permite que sejam listadas todas as transa\u00C3\u00A7\u00C3\u00B5es n\u00C3\u00A3o processadas da Conta.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "grupoMCC" : 123456789,
    "valorUSD" : 1.3579000000000001069366817318950779736042022705078125,
    "planoParcelamento" : 123456789,
    "cartaoMascarado" : "aeiou",
    "codigoTerminal" : "aeiou",
    "flagFaturado" : 123,
    "codigoMoedaOrigem" : "aeiou",
    "codigoReferencia" : "aeiou",
    "dataCotacaoUSD" : "aeiou",
    "nomePortador" : "aeiou",
    "dataFaturamento" : "aeiou",
    "descricaoAbreviada" : "aeiou",
    "localidadeEstabelecimento" : "aeiou",
    "dataOrigem" : "aeiou",
    "flagEstorno" : 123,
    "valorBRL" : 1.3579000000000001069366817318950779736042022705078125,
    "cotacaoUSD" : 1.3579000000000001069366817318950779736042022705078125,
    "numeroParcela" : 123456789,
    "codigoMCC" : 123456789,
    "flagCredito" : 123,
    "valorEntrada" : 1.3579000000000001069366817318950779736042022705078125,
    "valorTaxaEmbarque" : 1.3579000000000001069366817318950779736042022705078125,
    "idEstabelecimento" : 123456789,
    "descricaoTipoTransacaoNaoProcessada" : "aeiou",
    "idConta" : 123456789,
    "codigoMoedaDestino" : "aeiou",
    "modoEntradaTransacao" : "aeiou",
    "idTransacaoEstorno" : 123456789,
    "nomeEstabelecimento" : "aeiou",
    "codigoAutorizacao" : "aeiou",
    "detalhesTransacao" : "aeiou",
    "nomeFantasiaEstabelecimento" : "aeiou",
    "dataVencimento" : "aeiou",
    "grupoDescricaoMCC" : "aeiou",
    "idTipoTransacaoNaoProcessada" : 123456789,
    "status" : 123
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter dataInicio: (query) Data de in\u00C3\u00ADcio da consulta do extrato no formato yyyy-MM-dd (Par\u00C3\u00A2mentro Ignorado se dataFim n\u00C3\u00A3o for definida). (optional)
     - parameter dataFim: (query) Data fim da consulta do extrato no formato yyyy-MM-dd  (Par\u00C3\u00A2mentro Ignorado se dataInicio n\u00C3\u00A3o for definida). (optional)

     - returns: RequestBuilder<PageTransacaoNaoProcessadaResponse> 
     */
    public class func listarNaoProcessadasUsingGETWithRequestBuilder(id id: Int, sort: [String]?, page: Int?, limit: Int?, dataInicio: String?, dataFim: String?) -> RequestBuilder<PageTransacaoNaoProcessadaResponse> {
        var path = "/api/contas/{id}/transacoes/listar-nao-processadas"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "dataInicio": dataInicio,
            "dataFim": dataFim
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTransacaoNaoProcessadaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista as transa\u00C3\u00A7\u00C3\u00B5es processadas da conta
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter dataVencimento: (query) Data de vencimento do extrato no formato yyyy-MM-dd. (optional)
     - parameter dataInicio: (query) Data de in\u00C3\u00ADcio da consulta do extrato no formato yyyy-MM-dd (Ignorado quando o par\u00C3\u00A2mentro dataVencimento \u00C3\u00A9 usado). (optional)
     - parameter dataFim: (query) Data fim da consulta do extrato no formato yyyy-MM-dd  (Ignorado quando o par\u00C3\u00A2mentro dataVencimento \u00C3\u00A9 usado). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarProcessadasUsingGET(id id: Int, sort: [String]?, page: Int?, limit: Int?, dataVencimento: String?, dataInicio: String?, dataFim: String?, completion: ((data: PageTransacoesCorrentesResponse?, error: ErrorType?) -> Void)) {
        listarProcessadasUsingGETWithRequestBuilder(id: id, sort: sort, page: page, limit: limit, dataVencimento: dataVencimento, dataInicio: dataInicio, dataFim: dataFim).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista as transa\u00C3\u00A7\u00C3\u00B5es processadas da conta
     
     - GET /api/contas/{id}/transacoes/listar-processadas
     - Este m\u00C3\u00A9todo permite que sejam listadas todas as transa\u00C3\u00A7\u00C3\u00B5es processadas da Conta.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "statusTransacao" : "aeiou",
    "grupoMCC" : 123456789,
    "valorUSD" : 1.3579000000000001069366817318950779736042022705078125,
    "planoParcelamento" : 123456789,
    "cartaoMascarado" : "aeiou",
    "codigoTerminal" : "aeiou",
    "flagFaturado" : 123,
    "codigoMoedaOrigem" : "aeiou",
    "codigoReferencia" : "aeiou",
    "dataCotacaoUSD" : "aeiou",
    "nomePortador" : "aeiou",
    "dataFaturamento" : "aeiou",
    "dataTransacao" : "aeiou",
    "descricaoAbreviada" : "aeiou",
    "localidadeEstabelecimento" : "aeiou",
    "idTipoTransacao" : 123456789,
    "flagEstorno" : 123,
    "id" : 123456789,
    "valorBRL" : 1.3579000000000001069366817318950779736042022705078125,
    "cotacaoUSD" : 1.3579000000000001069366817318950779736042022705078125,
    "numeroParcela" : 123456789,
    "codigoMCC" : 123456789,
    "flagCredito" : 123,
    "valorEntrada" : 1.3579000000000001069366817318950779736042022705078125,
    "valorTaxaEmbarque" : 1.3579000000000001069366817318950779736042022705078125,
    "idEstabelecimento" : 123456789,
    "idConta" : 123456789,
    "codigoMoedaDestino" : "aeiou",
    "idEvento" : 123456789,
    "modoEntradaTransacao" : "aeiou",
    "idTransacaoEstorno" : 123456789,
    "nomeEstabelecimento" : "aeiou",
    "codigoAutorizacao" : "aeiou",
    "tipoEvento" : "aeiou",
    "detalhesTransacao" : "aeiou",
    "nomeFantasiaEstabelecimento" : "aeiou",
    "dataVencimento" : "aeiou",
    "grupoDescricaoMCC" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter dataVencimento: (query) Data de vencimento do extrato no formato yyyy-MM-dd. (optional)
     - parameter dataInicio: (query) Data de in\u00C3\u00ADcio da consulta do extrato no formato yyyy-MM-dd (Ignorado quando o par\u00C3\u00A2mentro dataVencimento \u00C3\u00A9 usado). (optional)
     - parameter dataFim: (query) Data fim da consulta do extrato no formato yyyy-MM-dd  (Ignorado quando o par\u00C3\u00A2mentro dataVencimento \u00C3\u00A9 usado). (optional)

     - returns: RequestBuilder<PageTransacoesCorrentesResponse> 
     */
    public class func listarProcessadasUsingGETWithRequestBuilder(id id: Int, sort: [String]?, page: Int?, limit: Int?, dataVencimento: String?, dataInicio: String?, dataFim: String?) -> RequestBuilder<PageTransacoesCorrentesResponse> {
        var path = "/api/contas/{id}/transacoes/listar-processadas"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "dataVencimento": dataVencimento,
            "dataInicio": dataInicio,
            "dataFim": dataFim
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTransacoesCorrentesResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista contas existentes na base de dados do Emissor
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do produto ao qual a conta faz parte. (id). (optional)
     - parameter idOrigemComercial: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id) que deu origem a Conta. (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa Titular da Conta (id). (optional)
     - parameter idStatusConta: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do status da conta. (optional)
     - parameter diaVencimento: (query) Apresenta o dia de vencimento. (optional)
     - parameter melhorDiaCompra: (query) Apresenta o melhor dia de compra. (optional)
     - parameter dataStatusConta: (query) Apresenta a data em que o idStatusConta atual fora atribu\u00C3\u00ADdo para ela. (optional)
     - parameter dataCadastro: (query) Apresenta a data em que o cart\u00C3\u00A3o foi gerado. (optional)
     - parameter dataUltimaAlteracaoVencimento: (query) Apresenta a data da ultima altera\u00C3\u00A7\u00C3\u00A3o de vencimento. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET14(sort sort: [String]?, page: Int?, limit: Int?, idProduto: Int?, idOrigemComercial: Int?, idPessoa: Int?, idStatusConta: Int?, diaVencimento: Int?, melhorDiaCompra: Int?, dataStatusConta: String?, dataCadastro: String?, dataUltimaAlteracaoVencimento: String?, completion: ((data: PageContaResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET14WithRequestBuilder(sort: sort, page: page, limit: limit, idProduto: idProduto, idOrigemComercial: idOrigemComercial, idPessoa: idPessoa, idStatusConta: idStatusConta, diaVencimento: diaVencimento, melhorDiaCompra: melhorDiaCompra, dataStatusConta: dataStatusConta, dataCadastro: dataCadastro, dataUltimaAlteracaoVencimento: dataUltimaAlteracaoVencimento).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista contas existentes na base de dados do Emissor
     
     - GET /api/contas
     - Este recurso permite listar contas existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idPessoa" : 123456789,
    "idStatusConta" : 123456789,
    "valorRenda" : 1.3579000000000001069366817318950779736042022705078125,
    "idProduto" : 123456789,
    "idOrigemComercial" : 123456789,
    "melhorDiaCompra" : 123,
    "dataUltimaAlteracaoVencimento" : "aeiou",
    "dataStatusConta" : "aeiou",
    "id" : 123456789,
    "diaVencimento" : 123,
    "dataCadastro" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do produto ao qual a conta faz parte. (id). (optional)
     - parameter idOrigemComercial: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id) que deu origem a Conta. (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa Titular da Conta (id). (optional)
     - parameter idStatusConta: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do status da conta. (optional)
     - parameter diaVencimento: (query) Apresenta o dia de vencimento. (optional)
     - parameter melhorDiaCompra: (query) Apresenta o melhor dia de compra. (optional)
     - parameter dataStatusConta: (query) Apresenta a data em que o idStatusConta atual fora atribu\u00C3\u00ADdo para ela. (optional)
     - parameter dataCadastro: (query) Apresenta a data em que o cart\u00C3\u00A3o foi gerado. (optional)
     - parameter dataUltimaAlteracaoVencimento: (query) Apresenta a data da ultima altera\u00C3\u00A7\u00C3\u00A3o de vencimento. (optional)

     - returns: RequestBuilder<PageContaResponse> 
     */
    public class func listarUsingGET14WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, idProduto: Int?, idOrigemComercial: Int?, idPessoa: Int?, idStatusConta: Int?, diaVencimento: Int?, melhorDiaCompra: Int?, dataStatusConta: String?, dataCadastro: String?, dataUltimaAlteracaoVencimento: String?) -> RequestBuilder<PageContaResponse> {
        let path = "/api/contas"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "idProduto": idProduto,
            "idOrigemComercial": idOrigemComercial,
            "idPessoa": idPessoa,
            "idStatusConta": idStatusConta,
            "diaVencimento": diaVencimento,
            "melhorDiaCompra": melhorDiaCompra,
            "dataStatusConta": dataStatusConta,
            "dataCadastro": dataCadastro,
            "dataUltimaAlteracaoVencimento": dataUltimaAlteracaoVencimento
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageContaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista as transfer\u00C3\u00AAncias realizadas pela conta
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idTransferencia: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da transfer\u00C3\u00AAncia (id). (optional)
     - parameter idContaOrigem: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta em que o valor ser\u00C3\u00A1 debitado para a transfer\u00C3\u00AAncia. (id). (optional)
     - parameter idContaDestino: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta em que o valor ser\u00C3\u00A1 creditado para a transfer\u00C3\u00AAncia. (id). (optional)
     - parameter valorTransferencia: (query) Valor estabelecido para ser transferido. (optional)
     - parameter dataTransferencia: (query) Data estabelecida para ocorrer a transfer\u00C3\u00AAncia. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET46(id id: Int, sort: [String]?, page: Int?, limit: Int?, idTransferencia: Int?, idContaOrigem: Int?, idContaDestino: Int?, valorTransferencia: Double?, dataTransferencia: String?, completion: ((data: PageTransferenciaResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET46WithRequestBuilder(id: id, sort: sort, page: page, limit: limit, idTransferencia: idTransferencia, idContaOrigem: idContaOrigem, idContaDestino: idContaDestino, valorTransferencia: valorTransferencia, dataTransferencia: dataTransferencia).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista as transfer\u00C3\u00AAncias realizadas pela conta
     
     - GET /api/contas/{id}/transferencias-creditos-cartoes
     - Este m\u00C3\u00A9todo permite que sejam listadas as transfer\u00C3\u00AAncias realizadas pela conta existentes na base do emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "valorTransferencia" : 1.3579000000000001069366817318950779736042022705078125,
    "idContaOrigem" : 123456789,
    "dataTransferencia" : "aeiou",
    "idContaDestino" : 123456789,
    "id" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idTransferencia: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da transfer\u00C3\u00AAncia (id). (optional)
     - parameter idContaOrigem: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta em que o valor ser\u00C3\u00A1 debitado para a transfer\u00C3\u00AAncia. (id). (optional)
     - parameter idContaDestino: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta em que o valor ser\u00C3\u00A1 creditado para a transfer\u00C3\u00AAncia. (id). (optional)
     - parameter valorTransferencia: (query) Valor estabelecido para ser transferido. (optional)
     - parameter dataTransferencia: (query) Data estabelecida para ocorrer a transfer\u00C3\u00AAncia. (optional)

     - returns: RequestBuilder<PageTransferenciaResponse> 
     */
    public class func listarUsingGET46WithRequestBuilder(id id: Int, sort: [String]?, page: Int?, limit: Int?, idTransferencia: Int?, idContaOrigem: Int?, idContaDestino: Int?, valorTransferencia: Double?, dataTransferencia: String?) -> RequestBuilder<PageTransferenciaResponse> {
        var path = "/api/contas/{id}/transferencias-creditos-cartoes"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "idTransferencia": idTransferencia,
            "idContaOrigem": idContaOrigem,
            "idContaDestino": idContaDestino,
            "valorTransferencia": valorTransferencia,
            "dataTransferencia": dataTransferencia
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTransferenciaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza a reativa\u00C3\u00A7\u00C3\u00A3o de contas.
     
     - parameter id: (path) Id Conta 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func reativarUsingPOST1(id id: Int, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        reativarUsingPOST1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a reativa\u00C3\u00A7\u00C3\u00A3o de contas.
     
     - POST /api/contas/{id}/reativar
     - Este recurso permite reativar contas. Para isso, ser\u00C3\u00A1 preciso informar o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id).
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Id Conta 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func reativarUsingPOST1WithRequestBuilder(id id: Int) -> RequestBuilder<AnyObject> {
        var path = "/api/contas/{id}/reativar"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<AnyObject>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Simula valores de presta\u00C3\u00A7\u00C3\u00B5es de empr\u00C3\u00A9stimos/financiamentos
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter request: (body) request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func simularEmprestimoFinanciamentoUsingPOST(id id: Int, request: EmprestimoPessoalRequest, completion: ((data: EmprestimoPessoalResponse?, error: ErrorType?) -> Void)) {
        simularEmprestimoFinanciamentoUsingPOSTWithRequestBuilder(id: id, request: request).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Simula valores de presta\u00C3\u00A7\u00C3\u00B5es de empr\u00C3\u00A9stimos/financiamentos
     
     - POST /api/contas/{id}/simular-emprestimos-financiamentos
     - Esta opera\u00C3\u00A7\u00C3\u00A3o pode ser utilizada para simular opera\u00C3\u00A7\u00C3\u00B5es financeiras a partir de informa\u00C3\u00A7\u00C3\u00B5es fornecidas pelo usu\u00C3\u00A1rio. Os c\u00C3\u00A1lculos gerados devem ser considerados apenas como refer\u00C3\u00AAncia para as situa\u00C3\u00A7\u00C3\u00B5es reais e n\u00C3\u00A3o como valores oficiais.
     - examples: [{contentType=application/json, example={
  "valorSolicitado" : 1.3579000000000001069366817318950779736042022705078125,
  "numeroParcelas" : 123,
  "valorMaximoParcela" : 1.3579000000000001069366817318950779736042022705078125,
  "valorMaximoSolicitacao" : 1.3579000000000001069366817318950779736042022705078125,
  "sistemaAmortizacao" : "aeiou",
  "taxaJuros" : 1.3579000000000001069366817318950779736042022705078125,
  "periodoTaxa" : "aeiou",
  "planosParcelamentos" : [ {
    "numeroParcelas" : 123,
    "valorPercentualCET" : 1.3579000000000001069366817318950779736042022705078125,
    "valorParcelas" : 1.3579000000000001069366817318950779736042022705078125,
    "taxaJuros" : 1.3579000000000001069366817318950779736042022705078125,
    "valorTributosIOF" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "dataPrimeiraParcela" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter request: (body) request 

     - returns: RequestBuilder<EmprestimoPessoalResponse> 
     */
    public class func simularEmprestimoFinanciamentoUsingPOSTWithRequestBuilder(id id: Int, request: EmprestimoPessoalRequest) -> RequestBuilder<EmprestimoPessoalResponse> {
        var path = "/api/contas/{id}/simular-emprestimos-financiamentos"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = request.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<EmprestimoPessoalResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Permite listar uma linha do tempo com os eventos da conta
     
     - parameter id: (path) Id Conta 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func transacoesUsingGET(id id: Int, sort: [String]?, page: Int?, limit: Int?, completion: ((data: PageTransacaoResponse?, error: ErrorType?) -> Void)) {
        transacoesUsingGETWithRequestBuilder(id: id, sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite listar uma linha do tempo com os eventos da conta
     
     - GET /api/contas/{id}/timeline
     - Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir a listagem, em formato de timeline, dos eventos vinculados a uma detemrinada conta. Transa\u00C3\u00A7\u00C3\u00B5es, fechamento da fatura, pagamentos, gera\u00C3\u00A7\u00C3\u00A3o de cart\u00C3\u00B5es e altera\u00C3\u00A7\u00C3\u00A3o de limite s\u00C3\u00A3o exemplos de eventos contemplados por esta funcionalidade. Neste m\u00C3\u00A9todo, as opera\u00C3\u00A7\u00C3\u00B5es s\u00C3\u00A3o ordenadas de forma decrescente.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idTipoRegistro" : 123456789,
    "flagCredito" : 123,
    "idConta" : 123456789,
    "idGrupoMCC" : 123,
    "valor" : 1.3579000000000001069366817318950779736042022705078125,
    "flagSolicitouContestacao" : 123,
    "quantidadeParcelas" : 123,
    "descricao" : "aeiou",
    "tipoEstabelecimento" : "aeiou",
    "descricaoStatus" : "aeiou",
    "dataEvento" : "aeiou",
    "valorParcela" : 1.3579000000000001069366817318950779736042022705078125,
    "idTransacao" : 123456789,
    "estabelecimento" : "aeiou",
    "ordem" : 123,
    "ultimaParcelaLancada" : 123,
    "valorDolar" : 1.3579000000000001069366817318950779736042022705078125,
    "status" : 123
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (path) Id Conta 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageTransacaoResponse> 
     */
    public class func transacoesUsingGETWithRequestBuilder(id id: Int, sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PageTransacaoResponse> {
        var path = "/api/contas/{id}/timeline"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTransacaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza uma transfer\u00C3\u00AAncia de Cr\u00C3\u00A9dito para outro cliente do mesmo Emissor
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta do cliente portador do cart\u00C3\u00A3o que ser\u00C3\u00A1 debitado (id). 
     - parameter idContaDestino: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do cliente portador do cart\u00C3\u00A3o que ser\u00C3\u00A1 creditado (id). 
     - parameter valorTransferencia: (query) Valor da Transfer\u00C3\u00AAncia. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func transferirUsingPOST1(id id: Int, idContaDestino: Int, valorTransferencia: Double, completion: ((data: TransferenciaDetalheResponse?, error: ErrorType?) -> Void)) {
        transferirUsingPOST1WithRequestBuilder(id: id, idContaDestino: idContaDestino, valorTransferencia: valorTransferencia).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza uma transfer\u00C3\u00AAncia de Cr\u00C3\u00A9dito para outro cliente do mesmo Emissor
     
     - POST /api/contas/{id}/transferencias-creditos-cartoes
     - Este m\u00C3\u00A9todo permite que um portador de um cart\u00C3\u00A3o possa realizar auma transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito para outro cliente do mesmo emissor.
     - examples: [{contentType=application/json, example={
  "valorTransferencia" : 1.3579000000000001069366817318950779736042022705078125,
  "idContaOrigem" : 123456789,
  "dataTransferencia" : "aeiou",
  "nomePessoaOrigem" : "aeiou",
  "idContaDestino" : 123456789,
  "valorTarifa" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123456789,
  "nomePessoaDestino" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta do cliente portador do cart\u00C3\u00A3o que ser\u00C3\u00A1 debitado (id). 
     - parameter idContaDestino: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do cliente portador do cart\u00C3\u00A3o que ser\u00C3\u00A1 creditado (id). 
     - parameter valorTransferencia: (query) Valor da Transfer\u00C3\u00AAncia. 

     - returns: RequestBuilder<TransferenciaDetalheResponse> 
     */
    public class func transferirUsingPOST1WithRequestBuilder(id id: Int, idContaDestino: Int, valorTransferencia: Double) -> RequestBuilder<TransferenciaDetalheResponse> {
        var path = "/api/contas/{id}/transferencias-creditos-cartoes"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id_conta_destino": idContaDestino,
            "valor_transferencia": valorTransferencia
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TransferenciaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

}
