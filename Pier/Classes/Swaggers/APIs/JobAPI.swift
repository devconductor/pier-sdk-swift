//
// JobAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class JobAPI: APIBase {
    /**
     
     Ativar Job
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Job (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func ativarJobUsingPOST(id id: Int, completion: ((data: JobResponse?, error: ErrorType?) -> Void)) {
        ativarJobUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Ativar Job
     
     - POST /api/jobs/{id}/ativar-job
     - Este recurso adiciona o job ao agendador de tarefas.
     - examples: [{contentType=application/json, example={
  "cron" : "aeiou",
  "groovy" : "aeiou",
  "id" : 123456789,
  "descricao" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Job (id). 

     - returns: RequestBuilder<JobResponse> 
     */
    public class func ativarJobUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<JobResponse> {
        var path = "/api/jobs/{id}/ativar-job"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<JobResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Atualizar Job
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Job (id). 
     - parameter descricao: (query) descricao. 
     - parameter cron: (query) Cron do Job. 
     - parameter groovy: (body) groovy 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func atualizarUsingPUT1(id id: Int, descricao: String, cron: String, groovy: String, completion: ((data: JobResponse?, error: ErrorType?) -> Void)) {
        atualizarUsingPUT1WithRequestBuilder(id: id, descricao: descricao, cron: cron, groovy: groovy).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Atualizar Job
     
     - PUT /api/jobs/{id}
     - Este recurso permite atualizar os dados de um job cadastrado.
     - examples: [{contentType=application/json, example={
  "cron" : "aeiou",
  "groovy" : "aeiou",
  "id" : 123456789,
  "descricao" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Job (id). 
     - parameter descricao: (query) descricao. 
     - parameter cron: (query) Cron do Job. 
     - parameter groovy: (body) groovy 

     - returns: RequestBuilder<JobResponse> 
     */
    public class func atualizarUsingPUT1WithRequestBuilder(id id: Int, descricao: String, cron: String, groovy: String) -> RequestBuilder<JobResponse> {
        var path = "/api/jobs/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = groovy.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<JobResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Desativar Job
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Job (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func desativarJobUsingPOST(id id: Int, completion: ((data: JobResponse?, error: ErrorType?) -> Void)) {
        desativarJobUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Desativar Job
     
     - POST /api/jobs/{id}/desativar-job
     - Este recurso retira o job do agendador de tarefas.
     - examples: [{contentType=application/json, example={
  "cron" : "aeiou",
  "groovy" : "aeiou",
  "id" : 123456789,
  "descricao" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Job (id). 

     - returns: RequestBuilder<JobResponse> 
     */
    public class func desativarJobUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<JobResponse> {
        var path = "/api/jobs/{id}/desativar-job"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<JobResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Listar Jobs
     
     - parameter groovy: (query) Script Groovy do Job (optional)
     - parameter descricao: (query) Descri\u00C3\u00A7\u00C3\u00A3o do Job (optional)
     - parameter cron: (query) Cron do Job (optional)
     - parameter status: (query) Status do Job (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET14(groovy groovy: String?, descricao: String?, cron: String?, status: String?, page: Int?, limit: Int?, completion: ((data: PageJobResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET14WithRequestBuilder(groovy: groovy, descricao: descricao, cron: cron, status: status, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Listar Jobs
     
     - GET /api/jobs
     - Este recurso permite que sejam listados os jobs existentes na base do PIER.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "cron" : "aeiou",
    "groovy" : "aeiou",
    "id" : 123456789,
    "descricao" : "aeiou",
    "status" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter groovy: (query) Script Groovy do Job (optional)
     - parameter descricao: (query) Descri\u00C3\u00A7\u00C3\u00A3o do Job (optional)
     - parameter cron: (query) Cron do Job (optional)
     - parameter status: (query) Status do Job (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageJobResponse> 
     */
    public class func listarUsingGET14WithRequestBuilder(groovy groovy: String?, descricao: String?, cron: String?, status: String?, page: Int?, limit: Int?) -> RequestBuilder<PageJobResponse> {
        let path = "/api/jobs"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "groovy": groovy,
            "descricao": descricao,
            "cron": cron,
            "status": status,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageJobResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Cadastrar Job
     
     - parameter descricao: (query) descricao. 
     - parameter cron: (query) Cron do Job. 
     - parameter groovy: (body) groovy 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST11(descricao descricao: String, cron: String, groovy: String, completion: ((data: JobResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST11WithRequestBuilder(descricao: descricao, cron: cron, groovy: groovy).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Cadastrar Job
     
     - POST /api/jobs
     - Esse recurso permite cadastrar jobs.
     - examples: [{contentType=application/json, example={
  "cron" : "aeiou",
  "groovy" : "aeiou",
  "id" : 123456789,
  "descricao" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter descricao: (query) descricao. 
     - parameter cron: (query) Cron do Job. 
     - parameter groovy: (body) groovy 

     - returns: RequestBuilder<JobResponse> 
     */
    public class func salvarUsingPOST11WithRequestBuilder(descricao descricao: String, cron: String, groovy: String) -> RequestBuilder<JobResponse> {
        let path = "/api/jobs"
        let URLString = PierAPI.basePath + path
        
        let parameters = groovy.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<JobResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

}
