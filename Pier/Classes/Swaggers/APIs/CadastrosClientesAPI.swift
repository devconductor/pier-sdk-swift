//
// CadastrosClientesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CadastrosClientesAPI: APIBase {
    /**
     
     Atualiza os dados de um determinado Endere\u00C3\u00A7o
     
     - parameter id: (query) id 
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id) (optional)
     - parameter idTipoEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id) (optional)
     - parameter cep: (query) Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro &#39;58800000&#39; (optional)
     - parameter logradouro: (query) Apresenta o nome do Logradouro (optional)
     - parameter numero: (query) Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o (optional)
     - parameter complemento: (query) Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o (optional)
     - parameter pontoReferencia: (query) Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o (optional)
     - parameter bairro: (query) Apresenta nome do bairro (optional)
     - parameter cidade: (query) Apresenta nome da cidade (optional)
     - parameter uf: (query) Apresenta sigla da Unidade Federativa (optional)
     - parameter pais: (query) Apresenta nome do Pais (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT1(id id: Int, idPessoa: Int?, idTipoEndereco: Int?, cep: String?, logradouro: String?, numero: Int?, complemento: String?, pontoReferencia: String?, bairro: String?, cidade: String?, uf: String?, pais: String?, completion: ((data: EnderecoResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT1WithRequestBuilder(id: id, idPessoa: idPessoa, idTipoEndereco: idTipoEndereco, cep: cep, logradouro: logradouro, numero: numero, complemento: complemento, pontoReferencia: pontoReferencia, bairro: bairro, cidade: cidade, uf: uf, pais: pais).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Atualiza os dados de um determinado Endere\u00C3\u00A7o
     
     - PUT /api/enderecos
     - Este m\u00C3\u00A9todo permite que seja alterado na base do emissor um ou mais registros ligados a um determinado Endere\u00C3\u00A7o.
     - examples: [{contentType=application/json, example={
  "pontoReferencia" : "aeiou",
  "cidade" : "aeiou",
  "numero" : 123,
  "bairro" : "aeiou",
  "idTipoEndereco" : 123456789,
  "cep" : "aeiou",
  "pais" : "aeiou",
  "idPessoa" : 123456789,
  "uf" : "aeiou",
  "complemento" : "aeiou",
  "logradouro" : "aeiou",
  "dataInclusao" : "aeiou",
  "dataUltimaAtualizacao" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (query) id 
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id) (optional)
     - parameter idTipoEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id) (optional)
     - parameter cep: (query) Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro &#39;58800000&#39; (optional)
     - parameter logradouro: (query) Apresenta o nome do Logradouro (optional)
     - parameter numero: (query) Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o (optional)
     - parameter complemento: (query) Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o (optional)
     - parameter pontoReferencia: (query) Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o (optional)
     - parameter bairro: (query) Apresenta nome do bairro (optional)
     - parameter cidade: (query) Apresenta nome da cidade (optional)
     - parameter uf: (query) Apresenta sigla da Unidade Federativa (optional)
     - parameter pais: (query) Apresenta nome do Pais (optional)

     - returns: RequestBuilder<EnderecoResponse> 
     */
    public class func alterarUsingPUT1WithRequestBuilder(id id: Int, idPessoa: Int?, idTipoEndereco: Int?, cep: String?, logradouro: String?, numero: Int?, complemento: String?, pontoReferencia: String?, bairro: String?, cidade: String?, uf: String?, pais: String?) -> RequestBuilder<EnderecoResponse> {
        let path = "/api/enderecos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id": id,
            "idPessoa": idPessoa,
            "idTipoEndereco": idTipoEndereco,
            "cep": cep,
            "logradouro": logradouro,
            "numero": numero,
            "complemento": complemento,
            "pontoReferencia": pontoReferencia,
            "bairro": bairro,
            "cidade": cidade,
            "uf": uf,
            "pais": pais
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<EnderecoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Atualiza os detalhes de uma determinada Pessoa
     
     - parameter id: (path) ID da Pessoa 
     - parameter nomeMae: (query) Apresenta o nome da m\u00C3\u00A3e da pessoa fisica (optional)
     - parameter idEstadoCivil: (query) Id Estado civil da pessoa fisica (optional)
     - parameter idProfissao: (query) Profiss\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNaturezaOcupacao: (query) Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNacionalidade: (query) Id Nacionalidade da pessoa fisica (optional)
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia. (optional)
     - parameter numeroContaCorrente: (query) N\u00C3\u00BAmero da conta corrente. (optional)
     - parameter email: (query) Email da pessoa fisica (optional)
     - parameter nomeEmpresa: (query) Nome que deve ser impresso no cart\u00C3\u00A3o (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT4(id id: Int, nomeMae: String?, idEstadoCivil: Int?, idProfissao: Int?, idNaturezaOcupacao: Int?, idNacionalidade: Int?, numeroAgencia: Int?, numeroContaCorrente: String?, email: String?, nomeEmpresa: String?, completion: ((data: PessoaDetalheResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT4WithRequestBuilder(id: id, nomeMae: nomeMae, idEstadoCivil: idEstadoCivil, idProfissao: idProfissao, idNaturezaOcupacao: idNaturezaOcupacao, idNacionalidade: idNacionalidade, numeroAgencia: numeroAgencia, numeroContaCorrente: numeroContaCorrente, email: email, nomeEmpresa: nomeEmpresa).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Atualiza os detalhes de uma determinada Pessoa
     
     - PUT /api/pessoas-detalhes/{id}
     - Este m\u00C3\u00A9todo permite que seja alterado na base do emissor os detalhes de uma determinada Pessoa.
     - examples: [{contentType=application/json, example={
  "idNacionalidade" : 123456789,
  "idPessoa" : 123456789,
  "idEstadoCivil" : 123456789,
  "nomeEmpresa" : "aeiou",
  "idProfissao" : 123,
  "idNaturezaOcupacao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "numeroAgencia" : 123,
  "nomeMae" : "aeiou",
  "email" : "aeiou"
}}]
     
     - parameter id: (path) ID da Pessoa 
     - parameter nomeMae: (query) Apresenta o nome da m\u00C3\u00A3e da pessoa fisica (optional)
     - parameter idEstadoCivil: (query) Id Estado civil da pessoa fisica (optional)
     - parameter idProfissao: (query) Profiss\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNaturezaOcupacao: (query) Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNacionalidade: (query) Id Nacionalidade da pessoa fisica (optional)
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia. (optional)
     - parameter numeroContaCorrente: (query) N\u00C3\u00BAmero da conta corrente. (optional)
     - parameter email: (query) Email da pessoa fisica (optional)
     - parameter nomeEmpresa: (query) Nome que deve ser impresso no cart\u00C3\u00A3o (optional)

     - returns: RequestBuilder<PessoaDetalheResponse> 
     */
    public class func alterarUsingPUT4WithRequestBuilder(id id: Int, nomeMae: String?, idEstadoCivil: Int?, idProfissao: Int?, idNaturezaOcupacao: Int?, idNacionalidade: Int?, numeroAgencia: Int?, numeroContaCorrente: String?, email: String?, nomeEmpresa: String?) -> RequestBuilder<PessoaDetalheResponse> {
        var path = "/api/pessoas-detalhes/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "nomeMae": nomeMae,
            "idEstadoCivil": idEstadoCivil,
            "idProfissao": idProfissao,
            "idNaturezaOcupacao": idNaturezaOcupacao,
            "idNacionalidade": idNacionalidade,
            "numeroAgencia": numeroAgencia,
            "numeroContaCorrente": numeroContaCorrente,
            "email": email,
            "nomeEmpresa": nomeEmpresa
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PessoaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Atualiza os dados de uma determinada Pessoa
     
     - parameter id: (path) ID da Pessoa 
     - parameter nome: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. 
     - parameter tipo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica). 
     - parameter cpf: (query) N\u00C3\u00BAmero do CPF, quando PF. (optional)
     - parameter cnpj: (query) N\u00C3\u00BAmero do CNPJ, quando PJ. (optional)
     - parameter dataNascimento: (query) Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd. (optional)
     - parameter sexo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00C3\u00A3o Especificado). (optional)
     - parameter numeroIdentidade: (query) N\u00C3\u00BAmero da Identidade. (optional)
     - parameter orgaoExpedidorIdentidade: (query) Org\u00C3\u00A3o expedidor do Identidade. (optional)
     - parameter unidadeFederativaIdentidade: (query) Sigla da Unidade Federativa de onde foi expedido a Identidade (optional)
     - parameter dataEmissaoIdentidade: (query) Data emiss\u00C3\u00A3o da Identidade. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT5(id id: Int, nome: String, tipo: String, cpf: String?, cnpj: String?, dataNascimento: String?, sexo: String?, numeroIdentidade: String?, orgaoExpedidorIdentidade: String?, unidadeFederativaIdentidade: String?, dataEmissaoIdentidade: String?, completion: ((data: PessoaResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT5WithRequestBuilder(id: id, nome: nome, tipo: tipo, cpf: cpf, cnpj: cnpj, dataNascimento: dataNascimento, sexo: sexo, numeroIdentidade: numeroIdentidade, orgaoExpedidorIdentidade: orgaoExpedidorIdentidade, unidadeFederativaIdentidade: unidadeFederativaIdentidade, dataEmissaoIdentidade: dataEmissaoIdentidade).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Atualiza os dados de uma determinada Pessoa
     
     - PUT /api/pessoas/{id}
     - Este m\u00C3\u00A9todo permite que seja alterado na base do emissor um registro de determinada Pessoa.
     - examples: [{contentType=application/json, example={
  "numeroIdentidade" : "aeiou",
  "tipo" : "aeiou",
  "cpf" : "aeiou",
  "unidadeFederativaIdentidade" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "cnpj" : "aeiou",
  "dataNascimento" : "aeiou",
  "sexo" : "aeiou",
  "dataEmissaoIdentidade" : "aeiou",
  "orgaoExpedidorIdentidade" : "aeiou"
}}]
     
     - parameter id: (path) ID da Pessoa 
     - parameter nome: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. 
     - parameter tipo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica). 
     - parameter cpf: (query) N\u00C3\u00BAmero do CPF, quando PF. (optional)
     - parameter cnpj: (query) N\u00C3\u00BAmero do CNPJ, quando PJ. (optional)
     - parameter dataNascimento: (query) Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd. (optional)
     - parameter sexo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00C3\u00A3o Especificado). (optional)
     - parameter numeroIdentidade: (query) N\u00C3\u00BAmero da Identidade. (optional)
     - parameter orgaoExpedidorIdentidade: (query) Org\u00C3\u00A3o expedidor do Identidade. (optional)
     - parameter unidadeFederativaIdentidade: (query) Sigla da Unidade Federativa de onde foi expedido a Identidade (optional)
     - parameter dataEmissaoIdentidade: (query) Data emiss\u00C3\u00A3o da Identidade. (optional)

     - returns: RequestBuilder<PessoaResponse> 
     */
    public class func alterarUsingPUT5WithRequestBuilder(id id: Int, nome: String, tipo: String, cpf: String?, cnpj: String?, dataNascimento: String?, sexo: String?, numeroIdentidade: String?, orgaoExpedidorIdentidade: String?, unidadeFederativaIdentidade: String?, dataEmissaoIdentidade: String?) -> RequestBuilder<PessoaResponse> {
        var path = "/api/pessoas/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "nome": nome,
            "tipo": tipo,
            "cpf": cpf,
            "cnpj": cnpj,
            "dataNascimento": dataNascimento,
            "sexo": sexo,
            "numeroIdentidade": numeroIdentidade,
            "orgaoExpedidorIdentidade": orgaoExpedidorIdentidade,
            "unidadeFederativaIdentidade": unidadeFederativaIdentidade,
            "dataEmissaoIdentidade": dataEmissaoIdentidade
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PessoaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o de um determinado Telefone
     
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). 
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT6(id id: Int, idTipoTelefone: Int?, ddd: String?, telefone: String?, ramal: String?, completion: ((data: TelefoneResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT6WithRequestBuilder(id: id, idTipoTelefone: idTipoTelefone, ddd: ddd, telefone: telefone, ramal: ramal).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o de um determinado Telefone
     
     - PUT /api/telefones
     - Este m\u00C3\u00A9todo permite que seja alterado um determinado Telefone na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "telefone" : "aeiou",
  "ddd" : "aeiou",
  "idTipoTelefone" : 123456789,
  "id" : 123456789,
  "ramal" : "aeiou",
  "status" : 123
}}]
     
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). 
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)

     - returns: RequestBuilder<TelefoneResponse> 
     */
    public class func alterarUsingPUT6WithRequestBuilder(id id: Int, idTipoTelefone: Int?, ddd: String?, telefone: String?, ramal: String?) -> RequestBuilder<TelefoneResponse> {
        let path = "/api/telefones"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id": id,
            "idTipoTelefone": idTipoTelefone,
            "ddd": ddd,
            "telefone": telefone,
            "ramal": ramal
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TelefoneResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Permite atribuir um documento para uma Conta
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do arquivo 
     - parameter atribuirAssinaturaClienteRequest: (body) atribuirAssinaturaClienteRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func atribuirAssinaturaClienteUsingPOST(id id: Int, atribuirAssinaturaClienteRequest: AtribuirAssinaturaClienteRequest, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        atribuirAssinaturaClienteUsingPOSTWithRequestBuilder(id: id, atribuirAssinaturaClienteRequest: atribuirAssinaturaClienteRequest).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite atribuir um documento para uma Conta
     
     - POST /api/contas/{id}/atribuir-assinatura-cliente
     - Este m\u00C3\u00A9todo permite que seja atribu\u00C3\u00ADdo a uma determinada Conta um documento que esteja armazenado no PIER Cloud, informando qual o tipo do documento e o seu respectivo id.
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do arquivo 
     - parameter atribuirAssinaturaClienteRequest: (body) atribuirAssinaturaClienteRequest 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func atribuirAssinaturaClienteUsingPOSTWithRequestBuilder(id id: Int, atribuirAssinaturaClienteRequest: AtribuirAssinaturaClienteRequest) -> RequestBuilder<AnyObject> {
        var path = "/api/contas/{id}/atribuir-assinatura-cliente"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = atribuirAssinaturaClienteRequest.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<AnyObject>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza o cadastro de Adicionais para uma Conta
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter persist: (body) persist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func cadastrarUsingPOST(id id: Int, persist: AdicionalPersist, completion: ((data: AdicionalResponse?, error: ErrorType?) -> Void)) {
        cadastrarUsingPOSTWithRequestBuilder(id: id, persist: persist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de Adicionais para uma Conta
     
     - POST /api/contas/{id}/cadastrar-adicional
     - Este m\u00C3\u00A9todo permite que sejam cadastrados um portador Adicional para uma determinada Conta.
     - examples: [{contentType=application/json, example={
  "numeroIdentidade" : "aeiou",
  "idEstadoCivil" : 123456789,
  "idConta" : 123456789,
  "numeroReceitaFederal" : "aeiou",
  "idProfissao" : 123456789,
  "idParentesco" : 123456789,
  "nome" : "aeiou",
  "telefones" : [ {
    "idPessoa" : 123456789,
    "telefone" : "aeiou",
    "ddd" : "aeiou",
    "idTipoTelefone" : 123456789,
    "id" : 123456789,
    "ramal" : "aeiou",
    "status" : 123
  } ],
  "orgaoExpedidorIdentidade" : "aeiou",
  "idNacionalidade" : 123456789,
  "idPessoa" : 123456789,
  "unidadeFederativaIdentidade" : "aeiou",
  "nomeImpresso" : "aeiou",
  "dataNascimento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "sexo" : "aeiou",
  "dataEmissaoIdentidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "email" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter persist: (body) persist 

     - returns: RequestBuilder<AdicionalResponse> 
     */
    public class func cadastrarUsingPOSTWithRequestBuilder(id id: Int, persist: AdicionalPersist) -> RequestBuilder<AdicionalResponse> {
        var path = "/api/contas/{id}/cadastrar-adicional"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = persist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<AdicionalResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os detalhes de uma determinada Pessoa
     
     - parameter id: (path) ID da Pessoa 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET10(id id: Int, completion: ((data: PessoaDetalheResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET10WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os detalhes de uma determinada Pessoa
     
     - GET /api/pessoas-detalhes/{id}
     - Este m\u00C3\u00A9todo permite a consulta dos detalhes de uma Pessoa existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "idNacionalidade" : 123456789,
  "idPessoa" : 123456789,
  "idEstadoCivil" : 123456789,
  "nomeEmpresa" : "aeiou",
  "idProfissao" : 123,
  "idNaturezaOcupacao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "numeroAgencia" : 123,
  "nomeMae" : "aeiou",
  "email" : "aeiou"
}}]
     
     - parameter id: (path) ID da Pessoa 

     - returns: RequestBuilder<PessoaDetalheResponse> 
     */
    public class func consultarUsingGET10WithRequestBuilder(id id: Int) -> RequestBuilder<PessoaDetalheResponse> {
        var path = "/api/pessoas-detalhes/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PessoaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de uma determinada Pessoa
     
     - parameter id: (path) ID da Pessoa 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET11(id id: Int, completion: ((data: PessoaResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET11WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de uma determinada Pessoa
     
     - GET /api/pessoas/{id}
     - Este m\u00C3\u00A9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "numeroIdentidade" : "aeiou",
  "tipo" : "aeiou",
  "cpf" : "aeiou",
  "unidadeFederativaIdentidade" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "cnpj" : "aeiou",
  "dataNascimento" : "aeiou",
  "sexo" : "aeiou",
  "dataEmissaoIdentidade" : "aeiou",
  "orgaoExpedidorIdentidade" : "aeiou"
}}]
     
     - parameter id: (path) ID da Pessoa 

     - returns: RequestBuilder<PessoaResponse> 
     */
    public class func consultarUsingGET11WithRequestBuilder(id id: Int) -> RequestBuilder<PessoaResponse> {
        var path = "/api/pessoas/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PessoaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de um determinado Telefone
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET16(id id: Int, completion: ((data: TelefoneResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET16WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Telefone
     
     - GET /api/telefones/{id}
     - Este m\u00C3\u00A9todo permite consultar um determinado Telefone a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "telefone" : "aeiou",
  "ddd" : "aeiou",
  "idTipoTelefone" : 123456789,
  "id" : 123456789,
  "ramal" : "aeiou",
  "status" : 123
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). 

     - returns: RequestBuilder<TelefoneResponse> 
     */
    public class func consultarUsingGET16WithRequestBuilder(id id: Int) -> RequestBuilder<TelefoneResponse> {
        var path = "/api/telefones/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TelefoneResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de um determinado Endere\u00C3\u00A7o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET6(id id: Int, completion: ((data: EnderecoResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET6WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Endere\u00C3\u00A7o
     
     - GET /api/enderecos/{id}
     - Este m\u00C3\u00A9todo permite consultar um determinado Endere\u00C3\u00A7o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "pontoReferencia" : "aeiou",
  "cidade" : "aeiou",
  "numero" : 123,
  "bairro" : "aeiou",
  "idTipoEndereco" : 123456789,
  "cep" : "aeiou",
  "pais" : "aeiou",
  "idPessoa" : 123456789,
  "uf" : "aeiou",
  "complemento" : "aeiou",
  "logradouro" : "aeiou",
  "dataInclusao" : "aeiou",
  "dataUltimaAtualizacao" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). 

     - returns: RequestBuilder<EnderecoResponse> 
     */
    public class func consultarUsingGET6WithRequestBuilder(id id: Int) -> RequestBuilder<EnderecoResponse> {
        var path = "/api/enderecos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<EnderecoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Lista os Detalhes das Pessoas cadastradas no Emissor
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo identificador da pessoa (optional)
     - parameter nomeMae: (query) Apresenta o nome da m\u00C3\u00A3e da pessoa fisica (optional)
     - parameter idEstadoCivil: (query) Id Estado civil da pessoa fisica (optional)
     - parameter idProfissao: (query) Profiss\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNaturezaOcupacao: (query) Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNacionalidade: (query) Id Nacionalidade da pessoa fisica (optional)
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia. (optional)
     - parameter numeroContaCorrente: (query) N\u00C3\u00BAmero da conta corrente. (optional)
     - parameter email: (query) Email da pessoa fisica (optional)
     - parameter nomeEmpresa: (query) Nome que deve ser impresso no cart\u00C3\u00A3o (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET14(page page: Int?, limit: Int?, idPessoa: Int?, nomeMae: String?, idEstadoCivil: Int?, idProfissao: Int?, idNaturezaOcupacao: Int?, idNacionalidade: Int?, numeroAgencia: Int?, numeroContaCorrente: String?, email: String?, nomeEmpresa: String?, completion: ((data: PagePessoaDetalheResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET14WithRequestBuilder(page: page, limit: limit, idPessoa: idPessoa, nomeMae: nomeMae, idEstadoCivil: idEstadoCivil, idProfissao: idProfissao, idNaturezaOcupacao: idNaturezaOcupacao, idNacionalidade: idNacionalidade, numeroAgencia: numeroAgencia, numeroContaCorrente: numeroContaCorrente, email: email, nomeEmpresa: nomeEmpresa).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Detalhes das Pessoas cadastradas no Emissor
     
     - GET /api/pessoas-detalhes
     - Este m\u00C3\u00A9todo permite que sejam listadas od detalhes das Pessoas existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idNacionalidade" : 123456789,
    "idPessoa" : 123456789,
    "idEstadoCivil" : 123456789,
    "nomeEmpresa" : "aeiou",
    "idProfissao" : 123,
    "idNaturezaOcupacao" : 123456789,
    "numeroContaCorrente" : "aeiou",
    "numeroAgencia" : 123,
    "nomeMae" : "aeiou",
    "email" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo identificador da pessoa (optional)
     - parameter nomeMae: (query) Apresenta o nome da m\u00C3\u00A3e da pessoa fisica (optional)
     - parameter idEstadoCivil: (query) Id Estado civil da pessoa fisica (optional)
     - parameter idProfissao: (query) Profiss\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNaturezaOcupacao: (query) Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNacionalidade: (query) Id Nacionalidade da pessoa fisica (optional)
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia. (optional)
     - parameter numeroContaCorrente: (query) N\u00C3\u00BAmero da conta corrente. (optional)
     - parameter email: (query) Email da pessoa fisica (optional)
     - parameter nomeEmpresa: (query) Nome que deve ser impresso no cart\u00C3\u00A3o (optional)

     - returns: RequestBuilder<PagePessoaDetalheResponse> 
     */
    public class func listarUsingGET14WithRequestBuilder(page page: Int?, limit: Int?, idPessoa: Int?, nomeMae: String?, idEstadoCivil: Int?, idProfissao: Int?, idNaturezaOcupacao: Int?, idNacionalidade: Int?, numeroAgencia: Int?, numeroContaCorrente: String?, email: String?, nomeEmpresa: String?) -> RequestBuilder<PagePessoaDetalheResponse> {
        let path = "/api/pessoas-detalhes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "idPessoa": idPessoa,
            "nomeMae": nomeMae,
            "idEstadoCivil": idEstadoCivil,
            "idProfissao": idProfissao,
            "idNaturezaOcupacao": idNaturezaOcupacao,
            "idNacionalidade": idNacionalidade,
            "numeroAgencia": numeroAgencia,
            "numeroContaCorrente": numeroContaCorrente,
            "email": email,
            "nomeEmpresa": nomeEmpresa
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PagePessoaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista as Pessoas cadastradas no Emissor
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id). (optional)
     - parameter nome: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. (optional)
     - parameter tipo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica). (optional)
     - parameter cpf: (query) N\u00C3\u00BAmero do CPF, quando PF. (optional)
     - parameter cnpj: (query) N\u00C3\u00BAmero do CNPJ, quando PJ. (optional)
     - parameter dataNascimento: (query) Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. (optional)
     - parameter sexo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00C3\u00A3o Especificado). (optional)
     - parameter numeroIdentidade: (query) N\u00C3\u00BAmero da Identidade (optional)
     - parameter orgaoExpedidorIdentidade: (query) Org\u00C3\u00A3o expedidor do RG. (optional)
     - parameter unidadeFederativaIdentidade: (query) Sigla da Unidade Federativa de onde foi expedido a Identidade (optional)
     - parameter dataEmissaoIdentidade: (query) Data emiss\u00C3\u00A3o da identidade no formato aaaa-MM-dd (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET15(page page: Int?, limit: Int?, id: Int?, nome: String?, tipo: String?, cpf: String?, cnpj: String?, dataNascimento: String?, sexo: String?, numeroIdentidade: String?, orgaoExpedidorIdentidade: String?, unidadeFederativaIdentidade: String?, dataEmissaoIdentidade: String?, completion: ((data: PagePessoaResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET15WithRequestBuilder(page: page, limit: limit, id: id, nome: nome, tipo: tipo, cpf: cpf, cnpj: cnpj, dataNascimento: dataNascimento, sexo: sexo, numeroIdentidade: numeroIdentidade, orgaoExpedidorIdentidade: orgaoExpedidorIdentidade, unidadeFederativaIdentidade: unidadeFederativaIdentidade, dataEmissaoIdentidade: dataEmissaoIdentidade).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista as Pessoas cadastradas no Emissor
     
     - GET /api/pessoas
     - Este m\u00C3\u00A9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "numeroIdentidade" : "aeiou",
    "tipo" : "aeiou",
    "cpf" : "aeiou",
    "unidadeFederativaIdentidade" : "aeiou",
    "nome" : "aeiou",
    "id" : 123456789,
    "cnpj" : "aeiou",
    "dataNascimento" : "aeiou",
    "sexo" : "aeiou",
    "dataEmissaoIdentidade" : "aeiou",
    "orgaoExpedidorIdentidade" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id). (optional)
     - parameter nome: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. (optional)
     - parameter tipo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica). (optional)
     - parameter cpf: (query) N\u00C3\u00BAmero do CPF, quando PF. (optional)
     - parameter cnpj: (query) N\u00C3\u00BAmero do CNPJ, quando PJ. (optional)
     - parameter dataNascimento: (query) Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. (optional)
     - parameter sexo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00C3\u00A3o Especificado). (optional)
     - parameter numeroIdentidade: (query) N\u00C3\u00BAmero da Identidade (optional)
     - parameter orgaoExpedidorIdentidade: (query) Org\u00C3\u00A3o expedidor do RG. (optional)
     - parameter unidadeFederativaIdentidade: (query) Sigla da Unidade Federativa de onde foi expedido a Identidade (optional)
     - parameter dataEmissaoIdentidade: (query) Data emiss\u00C3\u00A3o da identidade no formato aaaa-MM-dd (optional)

     - returns: RequestBuilder<PagePessoaResponse> 
     */
    public class func listarUsingGET15WithRequestBuilder(page page: Int?, limit: Int?, id: Int?, nome: String?, tipo: String?, cpf: String?, cnpj: String?, dataNascimento: String?, sexo: String?, numeroIdentidade: String?, orgaoExpedidorIdentidade: String?, unidadeFederativaIdentidade: String?, dataEmissaoIdentidade: String?) -> RequestBuilder<PagePessoaResponse> {
        let path = "/api/pessoas"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "id": id,
            "nome": nome,
            "tipo": tipo,
            "cpf": cpf,
            "cnpj": cnpj,
            "dataNascimento": dataNascimento,
            "sexo": sexo,
            "numeroIdentidade": numeroIdentidade,
            "orgaoExpedidorIdentidade": orgaoExpedidorIdentidade,
            "unidadeFederativaIdentidade": unidadeFederativaIdentidade,
            "dataEmissaoIdentidade": dataEmissaoIdentidade
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PagePessoaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Telefones cadastrados no Emissor
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). (optional)
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence. (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter status: (query) Apresenta o Status do Telefone, onde: &#39;0&#39;: Inativo e &#39;1&#39;: Ativo (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET22(page page: Int?, limit: Int?, id: Int?, idTipoTelefone: Int?, idPessoa: Int?, ddd: String?, telefone: String?, ramal: String?, status: Int?, completion: ((data: PageTelefoneResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET22WithRequestBuilder(page: page, limit: limit, id: id, idTipoTelefone: idTipoTelefone, idPessoa: idPessoa, ddd: ddd, telefone: telefone, ramal: ramal, status: status).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Telefones cadastrados no Emissor
     
     - GET /api/telefones
     - Este m\u00C3\u00A9todo permite que sejam listados os Telefones existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idPessoa" : 123456789,
    "telefone" : "aeiou",
    "ddd" : "aeiou",
    "idTipoTelefone" : 123456789,
    "id" : 123456789,
    "ramal" : "aeiou",
    "status" : 123
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). (optional)
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence. (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter status: (query) Apresenta o Status do Telefone, onde: &#39;0&#39;: Inativo e &#39;1&#39;: Ativo (optional)

     - returns: RequestBuilder<PageTelefoneResponse> 
     */
    public class func listarUsingGET22WithRequestBuilder(page page: Int?, limit: Int?, id: Int?, idTipoTelefone: Int?, idPessoa: Int?, ddd: String?, telefone: String?, ramal: String?, status: Int?) -> RequestBuilder<PageTelefoneResponse> {
        let path = "/api/telefones"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "id": id,
            "idTipoTelefone": idTipoTelefone,
            "idPessoa": idPessoa,
            "ddd": ddd,
            "telefone": telefone,
            "ramal": ramal,
            "status": status
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTelefoneResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Endere\u00C3\u00A7os cadastrados para o Emissor
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id) (optional)
     - parameter idTipoEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id) (optional)
     - parameter cep: (query) Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) (optional)
     - parameter logradouro: (query) Apresenta o nome do Logradouro (optional)
     - parameter numero: (query) Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o (optional)
     - parameter complemento: (query) Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o (optional)
     - parameter pontoReferencia: (query) Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o (optional)
     - parameter bairro: (query) Apresenta nome do bairro (optional)
     - parameter cidade: (query) Apresenta nome da cidade (optional)
     - parameter uf: (query) Apresenta sigla da Unidade Federativa (optional)
     - parameter pais: (query) Apresenta nome do Pais (optional)
     - parameter dataInclusao: (query) Apresenta a data em que fora cadastrado o Endere\u00C3\u00A7o (optional)
     - parameter dataUltimaAtualizacao: (query) Data em que fora realizada a \u00C3\u00BAltima mudan\u00C3\u00A7a neste registro de endere\u00C3\u00A7o. Quando n\u00C3\u00A3o tiver ocorrido mudan\u00C3\u00A7a, conter\u00C3\u00A1 a mesma informa\u00C3\u00A7\u00C3\u00A3o que o campo dataInclusao (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET9(page page: Int?, limit: Int?, id: Int?, idPessoa: Int?, idTipoEndereco: Int?, cep: String?, logradouro: String?, numero: Int?, complemento: String?, pontoReferencia: String?, bairro: String?, cidade: String?, uf: String?, pais: String?, dataInclusao: String?, dataUltimaAtualizacao: String?, completion: ((data: PageEnderecoResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET9WithRequestBuilder(page: page, limit: limit, id: id, idPessoa: idPessoa, idTipoEndereco: idTipoEndereco, cep: cep, logradouro: logradouro, numero: numero, complemento: complemento, pontoReferencia: pontoReferencia, bairro: bairro, cidade: cidade, uf: uf, pais: pais, dataInclusao: dataInclusao, dataUltimaAtualizacao: dataUltimaAtualizacao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Endere\u00C3\u00A7os cadastrados para o Emissor
     
     - GET /api/enderecos
     - Este m\u00C3\u00A9todo permite que sejam listados os Endere\u00C3\u00A7os existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "pontoReferencia" : "aeiou",
    "cidade" : "aeiou",
    "numero" : 123,
    "bairro" : "aeiou",
    "idTipoEndereco" : 123456789,
    "cep" : "aeiou",
    "pais" : "aeiou",
    "idPessoa" : 123456789,
    "uf" : "aeiou",
    "complemento" : "aeiou",
    "logradouro" : "aeiou",
    "dataInclusao" : "aeiou",
    "dataUltimaAtualizacao" : "aeiou",
    "id" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id) (optional)
     - parameter idTipoEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id) (optional)
     - parameter cep: (query) Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) (optional)
     - parameter logradouro: (query) Apresenta o nome do Logradouro (optional)
     - parameter numero: (query) Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o (optional)
     - parameter complemento: (query) Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o (optional)
     - parameter pontoReferencia: (query) Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o (optional)
     - parameter bairro: (query) Apresenta nome do bairro (optional)
     - parameter cidade: (query) Apresenta nome da cidade (optional)
     - parameter uf: (query) Apresenta sigla da Unidade Federativa (optional)
     - parameter pais: (query) Apresenta nome do Pais (optional)
     - parameter dataInclusao: (query) Apresenta a data em que fora cadastrado o Endere\u00C3\u00A7o (optional)
     - parameter dataUltimaAtualizacao: (query) Data em que fora realizada a \u00C3\u00BAltima mudan\u00C3\u00A7a neste registro de endere\u00C3\u00A7o. Quando n\u00C3\u00A3o tiver ocorrido mudan\u00C3\u00A7a, conter\u00C3\u00A1 a mesma informa\u00C3\u00A7\u00C3\u00A3o que o campo dataInclusao (optional)

     - returns: RequestBuilder<PageEnderecoResponse> 
     */
    public class func listarUsingGET9WithRequestBuilder(page page: Int?, limit: Int?, id: Int?, idPessoa: Int?, idTipoEndereco: Int?, cep: String?, logradouro: String?, numero: Int?, complemento: String?, pontoReferencia: String?, bairro: String?, cidade: String?, uf: String?, pais: String?, dataInclusao: String?, dataUltimaAtualizacao: String?) -> RequestBuilder<PageEnderecoResponse> {
        let path = "/api/enderecos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "id": id,
            "idPessoa": idPessoa,
            "idTipoEndereco": idTipoEndereco,
            "cep": cep,
            "logradouro": logradouro,
            "numero": numero,
            "complemento": complemento,
            "pontoReferencia": pontoReferencia,
            "bairro": bairro,
            "cidade": cidade,
            "uf": uf,
            "pais": pais,
            "dataInclusao": dataInclusao,
            "dataUltimaAtualizacao": dataUltimaAtualizacao
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageEnderecoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Cadastro de Conta e Pessoa Fisica
     
     - parameter pessoaPersist: (body) pessoaPersist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarPessoaFisicaAprovadaUsingPOST(pessoaPersist pessoaPersist: PessoaFisicaAprovadaPersist, completion: ((data: PessoaFisicaAprovadaResponse?, error: ErrorType?) -> Void)) {
        salvarPessoaFisicaAprovadaUsingPOSTWithRequestBuilder(pessoaPersist: pessoaPersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Cadastro de Conta e Pessoa Fisica
     
     - POST /api/clientes-pessoas-fisicas
     - Permite realizar o cadastro de uma Conta para um cliente do tipo Pessoa F\u00C3\u00ADsica, recebendo nesta opera\u00C3\u00A7\u00C3\u00A3o todos os dados cadastrais que se fazem necess\u00C3\u00A1rios para isso. Uma vez criado, poder\u00C3\u00A1 ser acionado o m\u00C3\u00A9todo de 'Gera\u00C3\u00A7\u00C3\u00A3o de Cart\u00C3\u00A3o' para o cliente e seus adicionais.
     - examples: [{contentType=application/json, example={
  "numeroIdentidade" : "aeiou",
  "idEstadoCivil" : 123456789,
  "idOrigemComercial" : 123456789,
  "idNaturezaOcupacao" : 123456789,
  "diaVencimento" : 123,
  "idNacionalidade" : 123456789,
  "idProduto" : 123456789,
  "cpf" : "aeiou",
  "unidadeFederativaIdentidade" : "aeiou",
  "id" : 123456789,
  "dataNascimento" : "aeiou",
  "dataEmissaoIdentidade" : "aeiou",
  "email" : "aeiou",
  "idConta" : 123456789,
  "idProfissao" : 123,
  "idProposta" : 123456789,
  "nome" : "aeiou",
  "canalEntrada" : "aeiou",
  "telefones" : [ {
    "telefone" : "aeiou",
    "ddd" : "aeiou",
    "idTipoTelefone" : 123456789,
    "id" : 123456789,
    "ramal" : "aeiou"
  } ],
  "orgaoExpedidorIdentidade" : "aeiou",
  "nomeEmpresa" : "aeiou",
  "enderecos" : [ {
    "pontoReferencia" : "aeiou",
    "enderecoCorrespondencia" : false,
    "uf" : "aeiou",
    "cidade" : "aeiou",
    "complemento" : "aeiou",
    "numero" : 123,
    "logradouro" : "aeiou",
    "bairro" : "aeiou",
    "id" : 123456789,
    "idTipoEndereco" : 123456789,
    "cep" : "aeiou",
    "pais" : "aeiou"
  } ],
  "numeroContaCorrente" : "aeiou",
  "sexo" : "aeiou",
  "nomeImpresso" : "aeiou",
  "numeroAgencia" : 123,
  "nomeMae" : "aeiou"
}}]
     
     - parameter pessoaPersist: (body) pessoaPersist 

     - returns: RequestBuilder<PessoaFisicaAprovadaResponse> 
     */
    public class func salvarPessoaFisicaAprovadaUsingPOSTWithRequestBuilder(pessoaPersist pessoaPersist: PessoaFisicaAprovadaPersist) -> RequestBuilder<PessoaFisicaAprovadaResponse> {
        let path = "/api/clientes-pessoas-fisicas"
        let URLString = PierAPI.basePath + path
        
        let parameters = pessoaPersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<PessoaFisicaAprovadaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Cadastro de Conta e Pessoa Jur\u00C3\u00ADdica
     
     - parameter pessoaPersist: (body) pessoaPersist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarPessoaJuridicaAprovadaUsingPOST(pessoaPersist pessoaPersist: PessoaJuridicaAprovadaPersist, completion: ((data: PessoaJuridicaAprovadaResponse?, error: ErrorType?) -> Void)) {
        salvarPessoaJuridicaAprovadaUsingPOSTWithRequestBuilder(pessoaPersist: pessoaPersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Cadastro de Conta e Pessoa Jur\u00C3\u00ADdica
     
     - POST /api/clientes-pessoas-juridicas
     - Cadastro de Conta e Pessoa Jur\u00C3\u00ADdica Permite realizar o cadastro de uma Conta para um cliente do tipo Pessoa Jur\u00C3\u00ADdica, recebendo nesta opera\u00C3\u00A7\u00C3\u00A3o todos os dados cadastrais que se fazem necess\u00C3\u00A1rios para isso, inclu\u00C3\u00ADndo o registro de cada um dos s\u00C3\u00B3cios. Uma vez criado, poder\u00C3\u00A1 ser acionado o m\u00C3\u00A9todo de 'Gera\u00C3\u00A7\u00C3\u00A3o de Cart\u00C3\u00A3o' para o cliente e cada um dos s\u00C3\u00B3cios vinculados.
     - examples: [{contentType=application/json, example={
  "idOrigemComercial" : 123456789,
  "idConta" : 123456789,
  "dataAberturaEmpresa" : "aeiou",
  "idProposta" : 123456789,
  "cnpj" : "aeiou",
  "diaVencimento" : 123,
  "canalEntrada" : "aeiou",
  "telefones" : [ {
    "telefone" : "aeiou",
    "ddd" : "aeiou",
    "idTipoTelefone" : 123456789,
    "id" : 123456789,
    "ramal" : "aeiou"
  } ],
  "socios" : [ {
    "numeroIdentidade" : "aeiou",
    "profissao" : "aeiou",
    "nome" : "aeiou",
    "estadoCivil" : "aeiou",
    "telefones" : [ "" ],
    "orgaoExpedidorIdentidade" : "aeiou",
    "cpf" : "aeiou",
    "unidadeFederativaIdentidade" : "aeiou",
    "id" : 123456789,
    "dataNascimento" : "aeiou",
    "sexo" : "aeiou",
    "dataEmissaoIdentidade" : "aeiou",
    "nacionalidade" : "aeiou",
    "email" : "aeiou"
  } ],
  "nomeFantasia" : "aeiou",
  "idProduto" : 123456789,
  "enderecos" : [ {
    "pontoReferencia" : "aeiou",
    "enderecoCorrespondencia" : false,
    "uf" : "aeiou",
    "cidade" : "aeiou",
    "complemento" : "aeiou",
    "numero" : 123,
    "logradouro" : "aeiou",
    "bairro" : "aeiou",
    "id" : 123456789,
    "idTipoEndereco" : 123456789,
    "cep" : "aeiou",
    "pais" : "aeiou"
  } ],
  "inscricaoEstadual" : "aeiou",
  "numeroContaCorrente" : "aeiou",
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "razaoSocial" : "aeiou",
  "numeroAgencia" : 123,
  "email" : "aeiou"
}}]
     
     - parameter pessoaPersist: (body) pessoaPersist 

     - returns: RequestBuilder<PessoaJuridicaAprovadaResponse> 
     */
    public class func salvarPessoaJuridicaAprovadaUsingPOSTWithRequestBuilder(pessoaPersist pessoaPersist: PessoaJuridicaAprovadaPersist) -> RequestBuilder<PessoaJuridicaAprovadaResponse> {
        let path = "/api/clientes-pessoas-juridicas"
        let URLString = PierAPI.basePath + path
        
        let parameters = pessoaPersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<PessoaJuridicaAprovadaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Realiza o cadastro de um nova Pessoa
     
     - parameter nome: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. 
     - parameter tipo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica). 
     - parameter cpf: (query) N\u00C3\u00BAmero do CPF, quando PF. (optional)
     - parameter cnpj: (query) N\u00C3\u00BAmero do CNPJ, quando PJ. (optional)
     - parameter dataNascimento: (query) Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd. (optional)
     - parameter sexo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00C3\u00A3o Especificado). (optional)
     - parameter numeroIdentidade: (query) N\u00C3\u00BAmero da Identidade. (optional)
     - parameter orgaoExpedidorIdentidade: (query) Org\u00C3\u00A3o expedidor do Identidade. (optional)
     - parameter unidadeFederativaIdentidade: (query) Sigla da Unidade Federativa de onde foi expedido a Identidade (optional)
     - parameter dataEmissaoIdentidade: (query) Data emiss\u00C3\u00A3o da Identidade. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST10(nome nome: String, tipo: String, cpf: String?, cnpj: String?, dataNascimento: String?, sexo: String?, numeroIdentidade: String?, orgaoExpedidorIdentidade: String?, unidadeFederativaIdentidade: String?, dataEmissaoIdentidade: String?, completion: ((data: PessoaResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST10WithRequestBuilder(nome: nome, tipo: tipo, cpf: cpf, cnpj: cnpj, dataNascimento: dataNascimento, sexo: sexo, numeroIdentidade: numeroIdentidade, orgaoExpedidorIdentidade: orgaoExpedidorIdentidade, unidadeFederativaIdentidade: unidadeFederativaIdentidade, dataEmissaoIdentidade: dataEmissaoIdentidade).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de um nova Pessoa
     
     - POST /api/pessoas
     - Este m\u00C3\u00A9todo permite que seja cadastrado uma nova Pessoa na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "numeroIdentidade" : "aeiou",
  "tipo" : "aeiou",
  "cpf" : "aeiou",
  "unidadeFederativaIdentidade" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "cnpj" : "aeiou",
  "dataNascimento" : "aeiou",
  "sexo" : "aeiou",
  "dataEmissaoIdentidade" : "aeiou",
  "orgaoExpedidorIdentidade" : "aeiou"
}}]
     
     - parameter nome: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. 
     - parameter tipo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica). 
     - parameter cpf: (query) N\u00C3\u00BAmero do CPF, quando PF. (optional)
     - parameter cnpj: (query) N\u00C3\u00BAmero do CNPJ, quando PJ. (optional)
     - parameter dataNascimento: (query) Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd. (optional)
     - parameter sexo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00C3\u00A3o Especificado). (optional)
     - parameter numeroIdentidade: (query) N\u00C3\u00BAmero da Identidade. (optional)
     - parameter orgaoExpedidorIdentidade: (query) Org\u00C3\u00A3o expedidor do Identidade. (optional)
     - parameter unidadeFederativaIdentidade: (query) Sigla da Unidade Federativa de onde foi expedido a Identidade (optional)
     - parameter dataEmissaoIdentidade: (query) Data emiss\u00C3\u00A3o da Identidade. (optional)

     - returns: RequestBuilder<PessoaResponse> 
     */
    public class func salvarUsingPOST10WithRequestBuilder(nome nome: String, tipo: String, cpf: String?, cnpj: String?, dataNascimento: String?, sexo: String?, numeroIdentidade: String?, orgaoExpedidorIdentidade: String?, unidadeFederativaIdentidade: String?, dataEmissaoIdentidade: String?) -> RequestBuilder<PessoaResponse> {
        let path = "/api/pessoas"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "nome": nome,
            "tipo": tipo,
            "cpf": cpf,
            "cnpj": cnpj,
            "dataNascimento": dataNascimento,
            "sexo": sexo,
            "numeroIdentidade": numeroIdentidade,
            "orgaoExpedidorIdentidade": orgaoExpedidorIdentidade,
            "unidadeFederativaIdentidade": unidadeFederativaIdentidade,
            "dataEmissaoIdentidade": dataEmissaoIdentidade
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PessoaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o cadastro de um novo Telefone
     
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence. (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST12(idTipoTelefone idTipoTelefone: Int?, idPessoa: Int?, ddd: String?, telefone: String?, ramal: String?, completion: ((data: TelefoneResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST12WithRequestBuilder(idTipoTelefone: idTipoTelefone, idPessoa: idPessoa, ddd: ddd, telefone: telefone, ramal: ramal).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de um novo Telefone
     
     - POST /api/telefones
     - Este m\u00C3\u00A9todo permite que seja cadastrado um novo Telefone na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "telefone" : "aeiou",
  "ddd" : "aeiou",
  "idTipoTelefone" : 123456789,
  "id" : 123456789,
  "ramal" : "aeiou",
  "status" : 123
}}]
     
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence. (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)

     - returns: RequestBuilder<TelefoneResponse> 
     */
    public class func salvarUsingPOST12WithRequestBuilder(idTipoTelefone idTipoTelefone: Int?, idPessoa: Int?, ddd: String?, telefone: String?, ramal: String?) -> RequestBuilder<TelefoneResponse> {
        let path = "/api/telefones"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idTipoTelefone": idTipoTelefone,
            "idPessoa": idPessoa,
            "ddd": ddd,
            "telefone": telefone,
            "ramal": ramal
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TelefoneResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o cadastro de um novo Endere\u00C3\u00A7o
     
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id) (optional)
     - parameter idTipoEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id) (optional)
     - parameter cep: (query) Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro &#39;58800000&#39; (optional)
     - parameter logradouro: (query) Apresenta o nome do Logradouro (optional)
     - parameter numero: (query) Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o (optional)
     - parameter complemento: (query) Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o (optional)
     - parameter pontoReferencia: (query) Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o (optional)
     - parameter bairro: (query) Apresenta nome do bairro (optional)
     - parameter cidade: (query) Apresenta nome da cidade (optional)
     - parameter uf: (query) Apresenta sigla da Unidade Federativa (optional)
     - parameter pais: (query) Apresenta nome do Pais (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST5(idPessoa idPessoa: Int?, idTipoEndereco: Int?, cep: String?, logradouro: String?, numero: Int?, complemento: String?, pontoReferencia: String?, bairro: String?, cidade: String?, uf: String?, pais: String?, completion: ((data: EnderecoResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST5WithRequestBuilder(idPessoa: idPessoa, idTipoEndereco: idTipoEndereco, cep: cep, logradouro: logradouro, numero: numero, complemento: complemento, pontoReferencia: pontoReferencia, bairro: bairro, cidade: cidade, uf: uf, pais: pais).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de um novo Endere\u00C3\u00A7o
     
     - POST /api/enderecos
     - Este m\u00C3\u00A9todo permite que seja cadastrado um novo Endere\u00C3\u00A7o na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "pontoReferencia" : "aeiou",
  "cidade" : "aeiou",
  "numero" : 123,
  "bairro" : "aeiou",
  "idTipoEndereco" : 123456789,
  "cep" : "aeiou",
  "pais" : "aeiou",
  "idPessoa" : 123456789,
  "uf" : "aeiou",
  "complemento" : "aeiou",
  "logradouro" : "aeiou",
  "dataInclusao" : "aeiou",
  "dataUltimaAtualizacao" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id) (optional)
     - parameter idTipoEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id) (optional)
     - parameter cep: (query) Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro &#39;58800000&#39; (optional)
     - parameter logradouro: (query) Apresenta o nome do Logradouro (optional)
     - parameter numero: (query) Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o (optional)
     - parameter complemento: (query) Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o (optional)
     - parameter pontoReferencia: (query) Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o (optional)
     - parameter bairro: (query) Apresenta nome do bairro (optional)
     - parameter cidade: (query) Apresenta nome da cidade (optional)
     - parameter uf: (query) Apresenta sigla da Unidade Federativa (optional)
     - parameter pais: (query) Apresenta nome do Pais (optional)

     - returns: RequestBuilder<EnderecoResponse> 
     */
    public class func salvarUsingPOST5WithRequestBuilder(idPessoa idPessoa: Int?, idTipoEndereco: Int?, cep: String?, logradouro: String?, numero: Int?, complemento: String?, pontoReferencia: String?, bairro: String?, cidade: String?, uf: String?, pais: String?) -> RequestBuilder<EnderecoResponse> {
        let path = "/api/enderecos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idPessoa": idPessoa,
            "idTipoEndereco": idTipoEndereco,
            "cep": cep,
            "logradouro": logradouro,
            "numero": numero,
            "complemento": complemento,
            "pontoReferencia": pontoReferencia,
            "bairro": bairro,
            "cidade": cidade,
            "uf": uf,
            "pais": pais
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<EnderecoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Inclui a conta como registro para integra\u00C3\u00A7\u00C3\u00A3o
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter idPropostaExterna: (query) Apresenta o identificador da proposta externa. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST6(id id: Int, idPropostaExterna: Int?, completion: ((data: IntegracaoEmissorResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST6WithRequestBuilder(id: id, idPropostaExterna: idPropostaExterna).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Inclui a conta como registro para integra\u00C3\u00A7\u00C3\u00A3o
     
     - POST /api/contas/{id}/incluir-registro-integracao
     - Este recurso permite incluir uma conta como registro para integra\u00C3\u00A7\u00C3\u00A3o.
     - examples: [{contentType=application/json, example={
  "dataEvento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "idConta" : 123456789,
  "id" : 123456789,
  "status" : 123
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter idPropostaExterna: (query) Apresenta o identificador da proposta externa. (optional)

     - returns: RequestBuilder<IntegracaoEmissorResponse> 
     */
    public class func salvarUsingPOST6WithRequestBuilder(id id: Int, idPropostaExterna: Int?) -> RequestBuilder<IntegracaoEmissorResponse> {
        var path = "/api/contas/{id}/incluir-registro-integracao"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idPropostaExterna": idPropostaExterna
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<IntegracaoEmissorResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Salvar os detalhes de uma determinada Pessoa
     
     - parameter idPessoa: (query) Apresenta o c\u00C3\u00B3digo identificador da pessoa 
     - parameter nomeMae: (query) Apresenta o nome da m\u00C3\u00A3e da pessoa fisica (optional)
     - parameter idEstadoCivil: (query) Id Estado civil da pessoa fisica (optional)
     - parameter idProfissao: (query) Profiss\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNaturezaOcupacao: (query) Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNacionalidade: (query) Id Nacionalidade da pessoa fisica (optional)
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia. (optional)
     - parameter numeroContaCorrente: (query) N\u00C3\u00BAmero da conta corrente. (optional)
     - parameter email: (query) Email da pessoa fisica (optional)
     - parameter nomeEmpresa: (query) Nome que deve ser impresso no cart\u00C3\u00A3o (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST9(idPessoa idPessoa: Int, nomeMae: String?, idEstadoCivil: Int?, idProfissao: Int?, idNaturezaOcupacao: Int?, idNacionalidade: Int?, numeroAgencia: Int?, numeroContaCorrente: String?, email: String?, nomeEmpresa: String?, completion: ((data: PessoaDetalheResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST9WithRequestBuilder(idPessoa: idPessoa, nomeMae: nomeMae, idEstadoCivil: idEstadoCivil, idProfissao: idProfissao, idNaturezaOcupacao: idNaturezaOcupacao, idNacionalidade: idNacionalidade, numeroAgencia: numeroAgencia, numeroContaCorrente: numeroContaCorrente, email: email, nomeEmpresa: nomeEmpresa).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Salvar os detalhes de uma determinada Pessoa
     
     - POST /api/pessoas-detalhes
     - Este m\u00C3\u00A9todo permite que seja incluido na base do emissor os detalhes de uma determinada Pessoa.
     - examples: [{contentType=application/json, example={
  "idNacionalidade" : 123456789,
  "idPessoa" : 123456789,
  "idEstadoCivil" : 123456789,
  "nomeEmpresa" : "aeiou",
  "idProfissao" : 123,
  "idNaturezaOcupacao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "numeroAgencia" : 123,
  "nomeMae" : "aeiou",
  "email" : "aeiou"
}}]
     
     - parameter idPessoa: (query) Apresenta o c\u00C3\u00B3digo identificador da pessoa 
     - parameter nomeMae: (query) Apresenta o nome da m\u00C3\u00A3e da pessoa fisica (optional)
     - parameter idEstadoCivil: (query) Id Estado civil da pessoa fisica (optional)
     - parameter idProfissao: (query) Profiss\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNaturezaOcupacao: (query) Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNacionalidade: (query) Id Nacionalidade da pessoa fisica (optional)
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia. (optional)
     - parameter numeroContaCorrente: (query) N\u00C3\u00BAmero da conta corrente. (optional)
     - parameter email: (query) Email da pessoa fisica (optional)
     - parameter nomeEmpresa: (query) Nome que deve ser impresso no cart\u00C3\u00A3o (optional)

     - returns: RequestBuilder<PessoaDetalheResponse> 
     */
    public class func salvarUsingPOST9WithRequestBuilder(idPessoa idPessoa: Int, nomeMae: String?, idEstadoCivil: Int?, idProfissao: Int?, idNaturezaOcupacao: Int?, idNacionalidade: Int?, numeroAgencia: Int?, numeroContaCorrente: String?, email: String?, nomeEmpresa: String?) -> RequestBuilder<PessoaDetalheResponse> {
        let path = "/api/pessoas-detalhes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idPessoa": idPessoa,
            "nomeMae": nomeMae,
            "idEstadoCivil": idEstadoCivil,
            "idProfissao": idProfissao,
            "idNaturezaOcupacao": idNaturezaOcupacao,
            "idNacionalidade": idNacionalidade,
            "numeroAgencia": numeroAgencia,
            "numeroContaCorrente": numeroContaCorrente,
            "email": email,
            "nomeEmpresa": nomeEmpresa
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PessoaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

}
