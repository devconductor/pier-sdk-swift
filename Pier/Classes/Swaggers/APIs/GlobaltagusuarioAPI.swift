//
// GlobaltagusuarioAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class GlobaltagusuarioAPI: APIBase {
    /**
     
     {{{usuario_resource_alterar_senha_login}}}
     
     - parameter login: (path) {{{usuario_resource_alterar_senha_login_param_login}}} 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarSenhaLoginUsingPOST(login login: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        alterarSenhaLoginUsingPOSTWithRequestBuilder(login: login).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_resource_alterar_senha_login}}}
     
     - POST /api/usuarios/{login}/alterar-senha
     - {{{usuario_resource_alterar_senha_login_notes}}}
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter login: (path) {{{usuario_resource_alterar_senha_login_param_login}}} 

     - returns: RequestBuilder<String> 
     */
    public class func alterarSenhaLoginUsingPOSTWithRequestBuilder(login login: String) -> RequestBuilder<String> {
        var path = "/api/usuarios/{login}/alterar-senha"
        path = path.stringByReplacingOccurrencesOfString("{login}", withString: "\(login)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{usuario_resource_alterar_senha}}}
     
     - parameter id: (path) {{{usuario_resource_alterar_senha_param_id}}} 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarSenhaUsingPUT(id id: Int, completion: ((data: String?, error: ErrorType?) -> Void)) {
        alterarSenhaUsingPUTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_resource_alterar_senha}}}
     
     - PUT /api/usuarios/{id}/alterar-senha
     - {{{usuario_resource_alterar_senha_notes}}}
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter id: (path) {{{usuario_resource_alterar_senha_param_id}}} 

     - returns: RequestBuilder<String> 
     */
    public class func alterarSenhaUsingPUTWithRequestBuilder(id id: Int) -> RequestBuilder<String> {
        var path = "/api/usuarios/{id}/alterar-senha"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{usuario_resource_alterar}}}
     
     - parameter id: (path) {{{usuario_resource_alterar_param_id}}} 
     - parameter update: (body) update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT23(id id: Int, update: UsuarioUpdateValue, completion: ((data: UsuarioResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT23WithRequestBuilder(id: id, update: update).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_resource_alterar}}}
     
     - PUT /api/usuarios/{id}
     - {{{usuario_resource_alterar_notes}}}
     - examples: [{contentType=application/json, example={
  "dataModificacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tentativasIncorretas" : 123456789,
  "bloquearAcesso" : false,
  "cpf" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "idEmissor" : 123456789,
  "login" : "aeiou",
  "dataCriacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "email" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) {{{usuario_resource_alterar_param_id}}} 
     - parameter update: (body) update 

     - returns: RequestBuilder<UsuarioResponse> 
     */
    public class func alterarUsingPUT23WithRequestBuilder(id id: Int, update: UsuarioUpdateValue) -> RequestBuilder<UsuarioResponse> {
        var path = "/api/usuarios/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = update.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<UsuarioResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{usuario_resource_ativar_usuario}}}
     
     - parameter id: (path) {{{usuario_resource_ativar_usuario_param_id}}} 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func ativarUsuarioUsingPOST1(id id: Int, completion: ((data: UsuarioResponse?, error: ErrorType?) -> Void)) {
        ativarUsuarioUsingPOST1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_resource_ativar_usuario}}}
     
     - POST /api/usuarios/{id}/ativar-usuario
     - {{{usuario_resource_ativar_usuario_notes}}}
     - examples: [{contentType=application/json, example={
  "dataModificacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tentativasIncorretas" : 123456789,
  "bloquearAcesso" : false,
  "cpf" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "idEmissor" : 123456789,
  "login" : "aeiou",
  "dataCriacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "email" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) {{{usuario_resource_ativar_usuario_param_id}}} 

     - returns: RequestBuilder<UsuarioResponse> 
     */
    public class func ativarUsuarioUsingPOST1WithRequestBuilder(id id: Int) -> RequestBuilder<UsuarioResponse> {
        var path = "/api/usuarios/{id}/ativar-usuario"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<UsuarioResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{controle_seguranca_dispositivo_atualizar}}}
     
     - parameter update: (body) update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func atualizarUsingPUT2(update update: ControleSegurancaDispositivoUpdateValor, completion: ((data: ControleSegurancaDispositivoResponse?, error: ErrorType?) -> Void)) {
        atualizarUsingPUT2WithRequestBuilder(update: update).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{controle_seguranca_dispositivo_atualizar}}}
     
     - PUT /api/controles-seguranca-dispositivos
     - {{{controle_seguranca_dispositivo_atualizar_notas}}}
     - examples: [{contentType=application/json, example={
  "idUsuario" : 123456789,
  "phoneId" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter update: (body) update 

     - returns: RequestBuilder<ControleSegurancaDispositivoResponse> 
     */
    public class func atualizarUsingPUT2WithRequestBuilder(update update: ControleSegurancaDispositivoUpdateValor) -> RequestBuilder<ControleSegurancaDispositivoResponse> {
        let path = "/api/controles-seguranca-dispositivos"
        let URLString = PierAPI.basePath + path
        
        let parameters = update.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ControleSegurancaDispositivoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{usuario_recurso_listar_por_id_usuario}}}
     
     - parameter id: (path) {{{usuario_recurso_listar_por_id_param_id_usuario}}} 
     - parameter sort: (query) {{{global_menssagem_sort_sort}}} (optional)
     - parameter page: (query) {{{global_menssagem_sort_page_value}}} (optional)
     - parameter limit: (query) {{{global_menssagem_sort_limit}}} (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarContasVinculadasUsingGET(id id: Int, sort: [String]?, page: Int?, limit: Int?, completion: ((data: PageUsuarioContasResponse?, error: ErrorType?) -> Void)) {
        consultarContasVinculadasUsingGETWithRequestBuilder(id: id, sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_recurso_listar_por_id_usuario}}}
     
     - GET /api/usuarios/{id}/vincular-contas
     - {{{usuario_recurso_listar_por_id_usuario_notas}}}
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idPessoa" : 123456789,
    "idConta" : 123456789,
    "idUsuario" : 123456789,
    "nivelAcesso" : 123,
    "id" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (path) {{{usuario_recurso_listar_por_id_param_id_usuario}}} 
     - parameter sort: (query) {{{global_menssagem_sort_sort}}} (optional)
     - parameter page: (query) {{{global_menssagem_sort_page_value}}} (optional)
     - parameter limit: (query) {{{global_menssagem_sort_limit}}} (optional)

     - returns: RequestBuilder<PageUsuarioContasResponse> 
     */
    public class func consultarContasVinculadasUsingGETWithRequestBuilder(id id: Int, sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PageUsuarioContasResponse> {
        var path = "/api/usuarios/{id}/vincular-contas"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageUsuarioContasResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     {{{controle_seguranca_dispositivo_consultar}}}
     
     - parameter idUsuario: (query) {{{usuario_resource_consultar_param_idUsuario}}} 
     - parameter sort: (query) {{{global_menssagem_sort_sort}}} (optional)
     - parameter page: (query) {{{global_menssagem_sort_page_value}}} (optional)
     - parameter limit: (query) {{{global_menssagem_sort_limit}}} (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET15(idUsuario idUsuario: Int, sort: [String]?, page: Int?, limit: Int?, completion: ((data: PageControleSegurancaDispositivoResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET15WithRequestBuilder(idUsuario: idUsuario, sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{controle_seguranca_dispositivo_consultar}}}
     
     - GET /api/controles-seguranca-dispositivos
     - {{{controle_seguranca_dispositivo_consultar_notas}}}
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idUsuario" : 123456789,
    "phoneId" : "aeiou",
    "id" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter idUsuario: (query) {{{usuario_resource_consultar_param_idUsuario}}} 
     - parameter sort: (query) {{{global_menssagem_sort_sort}}} (optional)
     - parameter page: (query) {{{global_menssagem_sort_page_value}}} (optional)
     - parameter limit: (query) {{{global_menssagem_sort_limit}}} (optional)

     - returns: RequestBuilder<PageControleSegurancaDispositivoResponse> 
     */
    public class func consultarUsingGET15WithRequestBuilder(idUsuario idUsuario: Int, sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PageControleSegurancaDispositivoResponse> {
        let path = "/api/controles-seguranca-dispositivos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idUsuario": idUsuario,
            "sort": sort,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageControleSegurancaDispositivoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     {{{usuario_resource_consultar}}}
     
     - parameter id: (path) {{{usuario_resource_consultar_param_id}}} 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET51(id id: Int, completion: ((data: UsuarioResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET51WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_resource_consultar}}}
     
     - GET /api/usuarios/{id}
     - {{{usuario_resource_consultar_notes}}}
     - examples: [{contentType=application/json, example={
  "dataModificacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tentativasIncorretas" : 123456789,
  "bloquearAcesso" : false,
  "cpf" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "idEmissor" : 123456789,
  "login" : "aeiou",
  "dataCriacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "email" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) {{{usuario_resource_consultar_param_id}}} 

     - returns: RequestBuilder<UsuarioResponse> 
     */
    public class func consultarUsingGET51WithRequestBuilder(id id: Int) -> RequestBuilder<UsuarioResponse> {
        var path = "/api/usuarios/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<UsuarioResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{usuario_resource_desativar_usuario}}}
     
     - parameter id: (path) {{{usuario_resource_desativar_usuario_param_id}}} 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func desativarUsuarioUsingPOST1(id id: Int, completion: ((data: UsuarioResponse?, error: ErrorType?) -> Void)) {
        desativarUsuarioUsingPOST1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_resource_desativar_usuario}}}
     
     - POST /api/usuarios/{id}/desativar-usuario
     - {{{usuario_resource_desativar_usuario_notes}}}
     - examples: [{contentType=application/json, example={
  "dataModificacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tentativasIncorretas" : 123456789,
  "bloquearAcesso" : false,
  "cpf" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "idEmissor" : 123456789,
  "login" : "aeiou",
  "dataCriacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "email" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) {{{usuario_resource_desativar_usuario_param_id}}} 

     - returns: RequestBuilder<UsuarioResponse> 
     */
    public class func desativarUsuarioUsingPOST1WithRequestBuilder(id id: Int) -> RequestBuilder<UsuarioResponse> {
        var path = "/api/usuarios/{id}/desativar-usuario"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<UsuarioResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{usuario_resource_listar}}}
     
     - parameter sort: (query) {{{global_menssagem_sort_sort}}} (optional)
     - parameter page: (query) {{{global_menssagem_sort_page_value}}} (optional)
     - parameter limit: (query) {{{global_menssagem_sort_limit}}} (optional)
     - parameter nome: (query) {{{usuario_request_nome_value}}} (optional)
     - parameter cpf: (query) {{{usuario_request_cpf_value}}} (optional)
     - parameter email: (query) {{{usuario_request_email_value}}} (optional)
     - parameter status: (query) {{{usuario_request_status_value}}} (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET62(sort sort: [String]?, page: Int?, limit: Int?, nome: String?, cpf: String?, email: String?, status: String?, completion: ((data: PageUsuarioResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET62WithRequestBuilder(sort: sort, page: page, limit: limit, nome: nome, cpf: cpf, email: email, status: status).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_resource_listar}}}
     
     - GET /api/usuarios
     - {{{usuario_resource_listar_notes}}}
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "dataModificacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "tentativasIncorretas" : 123456789,
    "bloquearAcesso" : false,
    "cpf" : "aeiou",
    "nome" : "aeiou",
    "id" : 123456789,
    "idEmissor" : 123456789,
    "login" : "aeiou",
    "dataCriacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "email" : "aeiou",
    "status" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) {{{global_menssagem_sort_sort}}} (optional)
     - parameter page: (query) {{{global_menssagem_sort_page_value}}} (optional)
     - parameter limit: (query) {{{global_menssagem_sort_limit}}} (optional)
     - parameter nome: (query) {{{usuario_request_nome_value}}} (optional)
     - parameter cpf: (query) {{{usuario_request_cpf_value}}} (optional)
     - parameter email: (query) {{{usuario_request_email_value}}} (optional)
     - parameter status: (query) {{{usuario_request_status_value}}} (optional)

     - returns: RequestBuilder<PageUsuarioResponse> 
     */
    public class func listarUsingGET62WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, nome: String?, cpf: String?, email: String?, status: String?) -> RequestBuilder<PageUsuarioResponse> {
        let path = "/api/usuarios"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "nome": nome,
            "cpf": cpf,
            "email": email,
            "status": status
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageUsuarioResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     {{{usuario_resource_recuperar_senha}}}
     
     - parameter id: (path) {{{usuario_resource_recuperar_senha_param_id}}} 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func recuperarSenhaUsingPOST(id id: Int, completion: ((data: String?, error: ErrorType?) -> Void)) {
        recuperarSenhaUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_resource_recuperar_senha}}}
     
     - POST /api/usuarios/{id}/recuperar-senha
     - {{{usuario_resource_recuperar_senha_notes}}}
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter id: (path) {{{usuario_resource_recuperar_senha_param_id}}} 

     - returns: RequestBuilder<String> 
     */
    public class func recuperarSenhaUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<String> {
        var path = "/api/usuarios/{id}/recuperar-senha"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{usuario_resource_salvar}}}
     
     - parameter persist: (body) persist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST33(persist persist: UsuarioPersistencia, completion: ((data: UsuarioResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST33WithRequestBuilder(persist: persist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_resource_salvar}}}
     
     - POST /api/usuarios
     - {{{usuario_resource_salvar_notes}}}
     - examples: [{contentType=application/json, example={
  "dataModificacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "tentativasIncorretas" : 123456789,
  "bloquearAcesso" : false,
  "cpf" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "idEmissor" : 123456789,
  "login" : "aeiou",
  "dataCriacao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "email" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter persist: (body) persist 

     - returns: RequestBuilder<UsuarioResponse> 
     */
    public class func salvarUsingPOST33WithRequestBuilder(persist persist: UsuarioPersistencia) -> RequestBuilder<UsuarioResponse> {
        let path = "/api/usuarios"
        let URLString = PierAPI.basePath + path
        
        let parameters = persist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<UsuarioResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{controle_seguranca_dispositivo_salvar}}}
     
     - parameter persist: (body) persist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST9(persist persist: ControleSegurancaDispositivoPersistencia, completion: ((data: ControleSegurancaDispositivoResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST9WithRequestBuilder(persist: persist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{controle_seguranca_dispositivo_salvar}}}
     
     - POST /api/controles-seguranca-dispositivos
     - {{{controle_seguranca_dispositivo_salvar_notas}}}
     - examples: [{contentType=application/json, example={
  "idUsuario" : 123456789,
  "phoneId" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter persist: (body) persist 

     - returns: RequestBuilder<ControleSegurancaDispositivoResponse> 
     */
    public class func salvarUsingPOST9WithRequestBuilder(persist persist: ControleSegurancaDispositivoPersistencia) -> RequestBuilder<ControleSegurancaDispositivoResponse> {
        let path = "/api/controles-seguranca-dispositivos"
        let URLString = PierAPI.basePath + path
        
        let parameters = persist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ControleSegurancaDispositivoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{usuario_resource_validar_senha_forte}}}
     
     - parameter usuarioSenhaFortePersist: (body) {{{usuario_resource_validar_senha_forte_param_id_plataforma}}} 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarSenhaForteUsingPOST(usuarioSenhaFortePersist usuarioSenhaFortePersist: UsuarioSenhaFortePersistencia, completion: ((data: String?, error: ErrorType?) -> Void)) {
        validarSenhaForteUsingPOSTWithRequestBuilder(usuarioSenhaFortePersist: usuarioSenhaFortePersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_resource_validar_senha_forte}}}
     
     - POST /api/usuarios/validar-senha-forte
     - {{{usuario_resource_validar_senha_forte_notes}}}
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter usuarioSenhaFortePersist: (body) {{{usuario_resource_validar_senha_forte_param_id_plataforma}}} 

     - returns: RequestBuilder<String> 
     */
    public class func validarSenhaForteUsingPOSTWithRequestBuilder(usuarioSenhaFortePersist usuarioSenhaFortePersist: UsuarioSenhaFortePersistencia) -> RequestBuilder<String> {
        let path = "/api/usuarios/validar-senha-forte"
        let URLString = PierAPI.basePath + path
        
        let parameters = usuarioSenhaFortePersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{usuario_resource_validar_senha_login}}}
     
     - parameter login: (path) {{{usuario_resource_validar_senha_login_param_login}}} 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarSenhaLoginUsingPOST(login login: String, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        validarSenhaLoginUsingPOSTWithRequestBuilder(login: login).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_resource_validar_senha_login}}}
     
     - POST /api/usuarios/{login}/validar-senha
     - {{{usuario_resource_validar_senha_login_notes}}}
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter login: (path) {{{usuario_resource_validar_senha_login_param_login}}} 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func validarSenhaLoginUsingPOSTWithRequestBuilder(login login: String) -> RequestBuilder<AnyObject> {
        var path = "/api/usuarios/{login}/validar-senha"
        path = path.stringByReplacingOccurrencesOfString("{login}", withString: "\(login)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<AnyObject>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{usuario_resource_validar_senha}}}
     
     - parameter id: (path) {{{usuario_resource_validar_senha_param_id}}} 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func validarSenhaUsingGET1(id id: Int, completion: ((data: String?, error: ErrorType?) -> Void)) {
        validarSenhaUsingGET1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_resource_validar_senha}}}
     
     - GET /api/usuarios/{id}/validar-senha
     - {{{usuario_resource_validar_senha_notes}}}
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter id: (path) {{{usuario_resource_validar_senha_param_id}}} 

     - returns: RequestBuilder<String> 
     */
    public class func validarSenhaUsingGET1WithRequestBuilder(id id: Int) -> RequestBuilder<String> {
        var path = "/api/usuarios/{id}/validar-senha"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{usuario_recurso_vincular_usuarios}}}
     
     - parameter id: (path) {{{usuario_recurso_vincular_usuarios_param_id}}} 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func vincularContasUsingPOST(id id: Int, completion: ((data: String?, error: ErrorType?) -> Void)) {
        vincularContasUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{usuario_recurso_vincular_usuarios}}}
     
     - POST /api/usuarios/{id}/vincular-usuarios
     - {{{usuario_recurso_vincular_usuarios_notas}}}
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter id: (path) {{{usuario_recurso_vincular_usuarios_param_id}}} 

     - returns: RequestBuilder<String> 
     */
    public class func vincularContasUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<String> {
        var path = "/api/usuarios/{id}/vincular-usuarios"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<String>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

}
