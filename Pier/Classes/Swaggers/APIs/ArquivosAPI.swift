//
// ArquivosAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ArquivosAPI: APIBase {
    /**
     
     Consulta de arquivo no PIER Cloud
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do arquivo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET(id id: Int, completion: ((data: ArquivoResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consulta de arquivo no PIER Cloud
     
     - GET /api/arquivos/{id}
     - Este recurso permite consultar um determinado arquivo armazenado no PIER Cloud.
     - examples: [{contentType=application/json, example={
  "extensao" : "aeiou",
  "idTipoArquivo" : 123456789,
  "idStatusArquivo" : 123456789,
  "arquivo" : "aeiou",
  "dataInclusao" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "nomeTipoArquivo" : "aeiou",
  "nomeStatusArquivo" : "aeiou",
  "dataAlteracao" : "aeiou",
  "detalhes" : [ {
    "conteudo" : "aeiou",
    "id" : 123456789,
    "nomeCampo" : "aeiou"
  } ]
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do arquivo 

     - returns: RequestBuilder<ArquivoResponse> 
     */
    public class func consultarUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<ArquivoResponse> {
        var path = "/api/arquivos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ArquivoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Permite armazenar arquivos no PIER Cloud
     
     - parameter arquivoPersist: (body) arquivoPersist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST1(arquivoPersist arquivoPersist: ArquivoPersist, completion: ((data: ArquivoResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST1WithRequestBuilder(arquivoPersist: arquivoPersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite armazenar arquivos no PIER Cloud
     
     - POST /api/arquivos
     - Este recurso permite o armazenamento de arquivos no PIER Cloud.
     - examples: [{contentType=application/json, example={
  "extensao" : "aeiou",
  "idTipoArquivo" : 123456789,
  "idStatusArquivo" : 123456789,
  "arquivo" : "aeiou",
  "dataInclusao" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "nomeTipoArquivo" : "aeiou",
  "nomeStatusArquivo" : "aeiou",
  "dataAlteracao" : "aeiou",
  "detalhes" : [ {
    "conteudo" : "aeiou",
    "id" : 123456789,
    "nomeCampo" : "aeiou"
  } ]
}}]
     
     - parameter arquivoPersist: (body) arquivoPersist 

     - returns: RequestBuilder<ArquivoResponse> 
     */
    public class func salvarUsingPOST1WithRequestBuilder(arquivoPersist arquivoPersist: ArquivoPersist) -> RequestBuilder<ArquivoResponse> {
        let path = "/api/arquivos"
        let URLString = PierAPI.basePath + path
        
        let parameters = arquivoPersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ArquivoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

}
