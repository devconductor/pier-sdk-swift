//
// CadastrosGeraisAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CadastrosGeraisAPI: APIBase {
    /**
     
     Atualiza os dados de um determinado Endere\u00C3\u00A7o
     
     - parameter id: (query) id 
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id) (optional)
     - parameter idTipoEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id) (optional)
     - parameter cep: (query) Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro &#39;58800000&#39; (optional)
     - parameter logradouro: (query) Apresenta o nome do Logradouro (optional)
     - parameter numero: (query) Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o (optional)
     - parameter complemento: (query) Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o (optional)
     - parameter pontoReferencia: (query) Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o (optional)
     - parameter bairro: (query) Apresenta nome do bairro (optional)
     - parameter cidade: (query) Apresenta nome da cidade (optional)
     - parameter uf: (query) Apresenta sigla da Unidade Federativa (optional)
     - parameter pais: (query) Apresenta nome do Pais (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT1(id id: Int, idPessoa: Int?, idTipoEndereco: Int?, cep: String?, logradouro: String?, numero: Int?, complemento: String?, pontoReferencia: String?, bairro: String?, cidade: String?, uf: String?, pais: String?, completion: ((data: EnderecoResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT1WithRequestBuilder(id: id, idPessoa: idPessoa, idTipoEndereco: idTipoEndereco, cep: cep, logradouro: logradouro, numero: numero, complemento: complemento, pontoReferencia: pontoReferencia, bairro: bairro, cidade: cidade, uf: uf, pais: pais).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Atualiza os dados de um determinado Endere\u00C3\u00A7o
     
     - PUT /api/enderecos
     - Este m\u00C3\u00A9todo permite que seja alterado na base do emissor um ou mais registros ligados a um determinado Endere\u00C3\u00A7o.
     - examples: [{contentType=application/json, example={
  "pontoReferencia" : "aeiou",
  "cidade" : "aeiou",
  "numero" : 123,
  "bairro" : "aeiou",
  "idTipoEndereco" : 123456789,
  "cep" : "aeiou",
  "pais" : "aeiou",
  "idPessoa" : 123456789,
  "uf" : "aeiou",
  "complemento" : "aeiou",
  "logradouro" : "aeiou",
  "dataInclusao" : "aeiou",
  "dataUltimaAtualizacao" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (query) id 
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id) (optional)
     - parameter idTipoEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id) (optional)
     - parameter cep: (query) Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro &#39;58800000&#39; (optional)
     - parameter logradouro: (query) Apresenta o nome do Logradouro (optional)
     - parameter numero: (query) Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o (optional)
     - parameter complemento: (query) Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o (optional)
     - parameter pontoReferencia: (query) Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o (optional)
     - parameter bairro: (query) Apresenta nome do bairro (optional)
     - parameter cidade: (query) Apresenta nome da cidade (optional)
     - parameter uf: (query) Apresenta sigla da Unidade Federativa (optional)
     - parameter pais: (query) Apresenta nome do Pais (optional)

     - returns: RequestBuilder<EnderecoResponse> 
     */
    public class func alterarUsingPUT1WithRequestBuilder(id id: Int, idPessoa: Int?, idTipoEndereco: Int?, cep: String?, logradouro: String?, numero: Int?, complemento: String?, pontoReferencia: String?, bairro: String?, cidade: String?, uf: String?, pais: String?) -> RequestBuilder<EnderecoResponse> {
        let path = "/api/enderecos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id": id,
            "idPessoa": idPessoa,
            "idTipoEndereco": idTipoEndereco,
            "cep": cep,
            "logradouro": logradouro,
            "numero": numero,
            "complemento": complemento,
            "pontoReferencia": pontoReferencia,
            "bairro": bairro,
            "cidade": cidade,
            "uf": uf,
            "pais": pais
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<EnderecoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Atualiza os detalhes de uma determinada Pessoa
     
     - parameter id: (path) ID da Pessoa 
     - parameter nomeMae: (query) Apresenta o nome da m\u00C3\u00A3e da pessoa fisica (optional)
     - parameter idEstadoCivil: (query) Id Estado civil da pessoa fisica (optional)
     - parameter profissao: (query) Profiss\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNaturezaOcupacao: (query) Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNacionalidade: (query) Id Nacionalidade da pessoa fisica (optional)
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia. (optional)
     - parameter numeroContaCorrente: (query) N\u00C3\u00BAmero da conta corrente. (optional)
     - parameter email: (query) Email da pessoa fisica (optional)
     - parameter nomeEmpresa: (query) Nome que deve ser impresso no cart\u00C3\u00A3o (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT4(id id: Int, nomeMae: String?, idEstadoCivil: Int?, profissao: String?, idNaturezaOcupacao: Int?, idNacionalidade: Int?, numeroAgencia: Int?, numeroContaCorrente: String?, email: String?, nomeEmpresa: String?, completion: ((data: PessoaDetalheResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT4WithRequestBuilder(id: id, nomeMae: nomeMae, idEstadoCivil: idEstadoCivil, profissao: profissao, idNaturezaOcupacao: idNaturezaOcupacao, idNacionalidade: idNacionalidade, numeroAgencia: numeroAgencia, numeroContaCorrente: numeroContaCorrente, email: email, nomeEmpresa: nomeEmpresa).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Atualiza os detalhes de uma determinada Pessoa
     
     - PUT /api/pessoas-detalhes/{id}
     - Este m\u00C3\u00A9todo permite que seja alterado na base do emissor os detalhes de uma determinada Pessoa.
     - examples: [{contentType=application/json, example={
  "idNacionalidade" : 123456789,
  "idPessoa" : 123456789,
  "idEstadoCivil" : 123456789,
  "nomeEmpresa" : "aeiou",
  "idNaturezaOcupacao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "profissao" : "aeiou",
  "numeroAgencia" : 123,
  "nomeMae" : "aeiou",
  "email" : "aeiou"
}}]
     
     - parameter id: (path) ID da Pessoa 
     - parameter nomeMae: (query) Apresenta o nome da m\u00C3\u00A3e da pessoa fisica (optional)
     - parameter idEstadoCivil: (query) Id Estado civil da pessoa fisica (optional)
     - parameter profissao: (query) Profiss\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNaturezaOcupacao: (query) Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNacionalidade: (query) Id Nacionalidade da pessoa fisica (optional)
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia. (optional)
     - parameter numeroContaCorrente: (query) N\u00C3\u00BAmero da conta corrente. (optional)
     - parameter email: (query) Email da pessoa fisica (optional)
     - parameter nomeEmpresa: (query) Nome que deve ser impresso no cart\u00C3\u00A3o (optional)

     - returns: RequestBuilder<PessoaDetalheResponse> 
     */
    public class func alterarUsingPUT4WithRequestBuilder(id id: Int, nomeMae: String?, idEstadoCivil: Int?, profissao: String?, idNaturezaOcupacao: Int?, idNacionalidade: Int?, numeroAgencia: Int?, numeroContaCorrente: String?, email: String?, nomeEmpresa: String?) -> RequestBuilder<PessoaDetalheResponse> {
        var path = "/api/pessoas-detalhes/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "nomeMae": nomeMae,
            "idEstadoCivil": idEstadoCivil,
            "profissao": profissao,
            "idNaturezaOcupacao": idNaturezaOcupacao,
            "idNacionalidade": idNacionalidade,
            "numeroAgencia": numeroAgencia,
            "numeroContaCorrente": numeroContaCorrente,
            "email": email,
            "nomeEmpresa": nomeEmpresa
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PessoaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Atualiza os dados de uma determinada Pessoa
     
     - parameter id: (path) ID da Pessoa 
     - parameter nome: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. 
     - parameter tipo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica). 
     - parameter cpf: (query) N\u00C3\u00BAmero do CPF, quando PF. (optional)
     - parameter cnpj: (query) N\u00C3\u00BAmero do CNPJ, quando PJ. (optional)
     - parameter dataNascimento: (query) Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd. (optional)
     - parameter sexo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00C3\u00A3o Especificado). (optional)
     - parameter numeroIdentidade: (query) N\u00C3\u00BAmero da Identidade. (optional)
     - parameter orgaoExpedidorIdentidade: (query) Org\u00C3\u00A3o expedidor do Identidade. (optional)
     - parameter unidadeFederativaIdentidade: (query) Sigla da Unidade Federativa de onde foi expedido a Identidade (optional)
     - parameter dataEmissaoIdentidade: (query) Data emiss\u00C3\u00A3o da Identidade. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT5(id id: Int, nome: String, tipo: String, cpf: String?, cnpj: String?, dataNascimento: String?, sexo: String?, numeroIdentidade: String?, orgaoExpedidorIdentidade: String?, unidadeFederativaIdentidade: String?, dataEmissaoIdentidade: String?, completion: ((data: PessoaResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT5WithRequestBuilder(id: id, nome: nome, tipo: tipo, cpf: cpf, cnpj: cnpj, dataNascimento: dataNascimento, sexo: sexo, numeroIdentidade: numeroIdentidade, orgaoExpedidorIdentidade: orgaoExpedidorIdentidade, unidadeFederativaIdentidade: unidadeFederativaIdentidade, dataEmissaoIdentidade: dataEmissaoIdentidade).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Atualiza os dados de uma determinada Pessoa
     
     - PUT /api/pessoas/{id}
     - Este m\u00C3\u00A9todo permite que seja alterado na base do emissor um registro de determinada Pessoa.
     - examples: [{contentType=application/json, example={
  "numeroIdentidade" : "aeiou",
  "tipo" : "aeiou",
  "cpf" : "aeiou",
  "unidadeFederativaIdentidade" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "cnpj" : "aeiou",
  "dataNascimento" : "aeiou",
  "sexo" : "aeiou",
  "dataEmissaoIdentidade" : "aeiou",
  "orgaoExpedidorIdentidade" : "aeiou"
}}]
     
     - parameter id: (path) ID da Pessoa 
     - parameter nome: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. 
     - parameter tipo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica). 
     - parameter cpf: (query) N\u00C3\u00BAmero do CPF, quando PF. (optional)
     - parameter cnpj: (query) N\u00C3\u00BAmero do CNPJ, quando PJ. (optional)
     - parameter dataNascimento: (query) Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd. (optional)
     - parameter sexo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00C3\u00A3o Especificado). (optional)
     - parameter numeroIdentidade: (query) N\u00C3\u00BAmero da Identidade. (optional)
     - parameter orgaoExpedidorIdentidade: (query) Org\u00C3\u00A3o expedidor do Identidade. (optional)
     - parameter unidadeFederativaIdentidade: (query) Sigla da Unidade Federativa de onde foi expedido a Identidade (optional)
     - parameter dataEmissaoIdentidade: (query) Data emiss\u00C3\u00A3o da Identidade. (optional)

     - returns: RequestBuilder<PessoaResponse> 
     */
    public class func alterarUsingPUT5WithRequestBuilder(id id: Int, nome: String, tipo: String, cpf: String?, cnpj: String?, dataNascimento: String?, sexo: String?, numeroIdentidade: String?, orgaoExpedidorIdentidade: String?, unidadeFederativaIdentidade: String?, dataEmissaoIdentidade: String?) -> RequestBuilder<PessoaResponse> {
        var path = "/api/pessoas/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "nome": nome,
            "tipo": tipo,
            "cpf": cpf,
            "cnpj": cnpj,
            "dataNascimento": dataNascimento,
            "sexo": sexo,
            "numeroIdentidade": numeroIdentidade,
            "orgaoExpedidorIdentidade": orgaoExpedidorIdentidade,
            "unidadeFederativaIdentidade": unidadeFederativaIdentidade,
            "dataEmissaoIdentidade": dataEmissaoIdentidade
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PessoaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o de um determinado Telefone
     
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). 
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT6(id id: Int, idTipoTelefone: Int?, ddd: String?, telefone: String?, ramal: String?, completion: ((data: TelefoneResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT6WithRequestBuilder(id: id, idTipoTelefone: idTipoTelefone, ddd: ddd, telefone: telefone, ramal: ramal).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza a altera\u00C3\u00A7\u00C3\u00A3o de um determinado Telefone
     
     - PUT /api/telefones
     - Este m\u00C3\u00A9todo permite que seja alterado um determinado Telefone na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "telefone" : "aeiou",
  "ddd" : "aeiou",
  "idTipoTelefone" : 123456789,
  "id" : 123456789,
  "ramal" : "aeiou",
  "status" : 123
}}]
     
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). 
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)

     - returns: RequestBuilder<TelefoneResponse> 
     */
    public class func alterarUsingPUT6WithRequestBuilder(id id: Int, idTipoTelefone: Int?, ddd: String?, telefone: String?, ramal: String?) -> RequestBuilder<TelefoneResponse> {
        let path = "/api/telefones"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id": id,
            "idTipoTelefone": idTipoTelefone,
            "ddd": ddd,
            "telefone": telefone,
            "ramal": ramal
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TelefoneResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Ativa o par\u00C3\u00A2metro uso exterior para o produto
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func ativarUsoExteriorUsingPOST(id id: Int, completion: ((data: ProdutoDetalhesResponse?, error: ErrorType?) -> Void)) {
        ativarUsoExteriorUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Ativa o par\u00C3\u00A2metro uso exterior para o produto
     
     - POST /api/produtos/{id}/ativar-uso-exterior
     - Este m\u00C3\u00A9todo permite ativar o uso no exterior para o produto atrav\u00C3\u00A9s do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idFantasiaBasica" : 123456789,
  "nome" : "aeiou",
  "id" : 123456789,
  "usoExterior" : false,
  "fantasiaBasica" : "aeiou",
  "status" : 123
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id) 

     - returns: RequestBuilder<ProdutoDetalhesResponse> 
     */
    public class func ativarUsoExteriorUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<ProdutoDetalhesResponse> {
        var path = "/api/produtos/{id}/ativar-uso-exterior"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ProdutoDetalhesResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Configura a Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o de um Produto
     
     - parameter id: (path) Id Produto 
     - parameter taxaAntecipacaoRequest: (body) taxaAntecipacaoRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func configurarTaxaAntecipacaoUsingPOST(id id: Int, taxaAntecipacaoRequest: TaxaAntecipacaoRequest, completion: ((data: ParametroProdutoResponse?, error: ErrorType?) -> Void)) {
        configurarTaxaAntecipacaoUsingPOSTWithRequestBuilder(id: id, taxaAntecipacaoRequest: taxaAntecipacaoRequest).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Configura a Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o de um Produto
     
     - POST /api/produtos/{id}/configurar-taxa-antecipacao
     - Este recurso permite configurar a Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o de um Produto, a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idProduto" : 123456789,
  "tipoOrigemTransacao" : "aeiou",
  "valorParametro" : 1.3579000000000001069366817318950779736042022705078125,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "descricao" : "aeiou"
}}]
     
     - parameter id: (path) Id Produto 
     - parameter taxaAntecipacaoRequest: (body) taxaAntecipacaoRequest 

     - returns: RequestBuilder<ParametroProdutoResponse> 
     */
    public class func configurarTaxaAntecipacaoUsingPOSTWithRequestBuilder(id id: Int, taxaAntecipacaoRequest: TaxaAntecipacaoRequest) -> RequestBuilder<ParametroProdutoResponse> {
        var path = "/api/produtos/{id}/configurar-taxa-antecipacao"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let parameters = taxaAntecipacaoRequest.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ParametroProdutoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Opera\u00C3\u00A7\u00C3\u00A3o utilizada para consultar uma determinada Origem Comercial
     
     - parameter id: (path) ID da Origem Comercial 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarOrigemComercialUsingGET(id id: Int, completion: ((data: OrigemComercialResponse?, error: ErrorType?) -> Void)) {
        consultarOrigemComercialUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Opera\u00C3\u00A7\u00C3\u00A3o utilizada para consultar uma determinada Origem Comercial
     
     - GET /api/origens-comerciais/{id}
     - Este m\u00C3\u00A9todo permite que sejam listados os registros de uma determinada Origem Comercial existente na base do emissor. Para isso, \u00C3\u00A9 preciso informar o seu respectivo c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "nome" : "aeiou",
  "id" : 123456789,
  "status" : 123
}}]
     
     - parameter id: (path) ID da Origem Comercial 

     - returns: RequestBuilder<OrigemComercialResponse> 
     */
    public class func consultarOrigemComercialUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<OrigemComercialResponse> {
        var path = "/api/origens-comerciais/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<OrigemComercialResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Consulta a Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o de um Produto
     
     - parameter id: (path) Id Produto 
     - parameter tipoTransacao: (query) Tipo da Transa\u00C3\u00A7\u00C3\u00A3o (ON-US ou OFF-US) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarTaxaAntecipacaoUsingGET(id id: Int, tipoTransacao: String, completion: ((data: ParametroProdutoResponse?, error: ErrorType?) -> Void)) {
        consultarTaxaAntecipacaoUsingGETWithRequestBuilder(id: id, tipoTransacao: tipoTransacao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consulta a Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o de um Produto
     
     - GET /api/produtos/{id}/consultar-taxa-antecipacao
     - Este recurso permite consultar a Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o de um Produto, a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idProduto" : 123456789,
  "tipoOrigemTransacao" : "aeiou",
  "valorParametro" : 1.3579000000000001069366817318950779736042022705078125,
  "dataValidade" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "descricao" : "aeiou"
}}]
     
     - parameter id: (path) Id Produto 
     - parameter tipoTransacao: (query) Tipo da Transa\u00C3\u00A7\u00C3\u00A3o (ON-US ou OFF-US) 

     - returns: RequestBuilder<ParametroProdutoResponse> 
     */
    public class func consultarTaxaAntecipacaoUsingGETWithRequestBuilder(id id: Int, tipoTransacao: String) -> RequestBuilder<ParametroProdutoResponse> {
        var path = "/api/produtos/{id}/consultar-taxa-antecipacao"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "tipoTransacao": tipoTransacao
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ParametroProdutoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Apresenta os dados de um determinado Atendimento
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do atendimento cliente (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET(id id: Int, completion: ((data: AtendimentoClienteResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Atendimento
     
     - GET /api/atendimento-clientes/{id}
     - Este m\u00C3\u00A9todo permite consultar os par\u00C3\u00A2metros de um determinado Atendimento a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (idAtendimento).
     - examples: [{contentType=application/json, example={
  "conteudoAtendimento" : "aeiou",
  "idConta" : 123456789,
  "descricaoTipoAtendimento" : "aeiou",
  "dataProcessamento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "dataAgendamento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagProcessamento" : 123,
  "dataHoraFimAtendimento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "detalhesAtendimento" : "aeiou",
  "idAtendimento" : 123456789,
  "dataAtendimento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "dataHoraInicioAtendimento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "nomeAtendente" : "aeiou",
  "nomeSistema" : "aeiou",
  "idTipoAtendimento" : 123456789
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do atendimento cliente (id). 

     - returns: RequestBuilder<AtendimentoClienteResponse> 
     */
    public class func consultarUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<AtendimentoClienteResponse> {
        var path = "/api/atendimento-clientes/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<AtendimentoClienteResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de um determinado Banco
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Banco (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET1(id id: Int, completion: ((data: BancoResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Banco
     
     - GET /api/bancos/{id}
     - Este m\u00C3\u00A9todo permite consultar um determinado Banco a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "nome" : "aeiou",
  "id" : 123456789,
  "digitoBanco" : "aeiou",
  "descricao" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Banco (id). 

     - returns: RequestBuilder<BancoResponse> 
     */
    public class func consultarUsingGET1WithRequestBuilder(id id: Int) -> RequestBuilder<BancoResponse> {
        var path = "/api/bancos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<BancoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de uma determinada Pessoa
     
     - parameter id: (path) ID da Pessoa 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET10(id id: Int, completion: ((data: PessoaResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET10WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de uma determinada Pessoa
     
     - GET /api/pessoas/{id}
     - Este m\u00C3\u00A9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "numeroIdentidade" : "aeiou",
  "tipo" : "aeiou",
  "cpf" : "aeiou",
  "unidadeFederativaIdentidade" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "cnpj" : "aeiou",
  "dataNascimento" : "aeiou",
  "sexo" : "aeiou",
  "dataEmissaoIdentidade" : "aeiou",
  "orgaoExpedidorIdentidade" : "aeiou"
}}]
     
     - parameter id: (path) ID da Pessoa 

     - returns: RequestBuilder<PessoaResponse> 
     */
    public class func consultarUsingGET10WithRequestBuilder(id id: Int) -> RequestBuilder<PessoaResponse> {
        var path = "/api/pessoas/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PessoaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de um determinado Produto
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET11(id id: Int, completion: ((data: ProdutoDetalhesResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET11WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Produto
     
     - GET /api/produtos/{id}
     - Este m\u00C3\u00A9todo permite consultar um determinado Produto a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idFantasiaBasica" : 123456789,
  "nome" : "aeiou",
  "id" : 123456789,
  "usoExterior" : false,
  "fantasiaBasica" : "aeiou",
  "status" : 123
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id) 

     - returns: RequestBuilder<ProdutoDetalhesResponse> 
     */
    public class func consultarUsingGET11WithRequestBuilder(id id: Int) -> RequestBuilder<ProdutoDetalhesResponse> {
        var path = "/api/produtos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ProdutoDetalhesResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de um determinado Telefone
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET15(id id: Int, completion: ((data: TelefoneResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET15WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Telefone
     
     - GET /api/telefones/{id}
     - Este m\u00C3\u00A9todo permite consultar um determinado Telefone a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "telefone" : "aeiou",
  "ddd" : "aeiou",
  "idTipoTelefone" : 123456789,
  "id" : 123456789,
  "ramal" : "aeiou",
  "status" : 123
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). 

     - returns: RequestBuilder<TelefoneResponse> 
     */
    public class func consultarUsingGET15WithRequestBuilder(id id: Int) -> RequestBuilder<TelefoneResponse> {
        var path = "/api/telefones/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TelefoneResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Lista os tipos de ajustes do emissor 
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo identificador do tipo de ajuste. (optional)
     - parameter descricao: (query) Descri\u00C3\u00A7\u00C3\u00A3o do tipo de ajuste. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET17(page page: Int?, limit: Int?, id: Int?, descricao: String?, completion: ((data: PageTipoAjusteResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET17WithRequestBuilder(page: page, limit: limit, id: id, descricao: descricao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os tipos de ajustes do emissor 
     
     - GET /api/tipos-ajustes
     - Este recurso permite que sejam listados os tipos de ajustes existentes na base de dados do emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "id" : 123456789,
    "descricao" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo identificador do tipo de ajuste. (optional)
     - parameter descricao: (query) Descri\u00C3\u00A7\u00C3\u00A3o do tipo de ajuste. (optional)

     - returns: RequestBuilder<PageTipoAjusteResponse> 
     */
    public class func consultarUsingGET17WithRequestBuilder(page page: Int?, limit: Int?, id: Int?, descricao: String?) -> RequestBuilder<PageTipoAjusteResponse> {
        let path = "/api/tipos-ajustes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "id": id,
            "descricao": descricao
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTipoAjusteResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os tipos de boletos do emissor 
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo identificador do tipo de boleto. (optional)
     - parameter descricao: (query) Descri\u00C3\u00A7\u00C3\u00A3o do tipo de boleto. (optional)
     - parameter banco: (query) C\u00C3\u00B3digo identificador do banco. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET18(page page: Int?, limit: Int?, id: Int?, descricao: String?, banco: Int?, completion: ((data: PageTipoBoletoResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET18WithRequestBuilder(page: page, limit: limit, id: id, descricao: descricao, banco: banco).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os tipos de boletos do emissor 
     
     - GET /api/tipos-boletos
     - Este recurso permite que sejam listados os tipos de boletos existentes na base de dados do emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "maxNossoNumero" : 1.3579000000000001069366817318950779736042022705078125,
    "ultimoNossoNumero" : 1.3579000000000001069366817318950779736042022705078125,
    "faixaNossoNumero" : 123,
    "minNossoNumero" : 1.3579000000000001069366817318950779736042022705078125,
    "banco" : 123456789,
    "id" : 123456789,
    "descricao" : "aeiou",
    "tamNossoNumero" : 123
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo identificador do tipo de boleto. (optional)
     - parameter descricao: (query) Descri\u00C3\u00A7\u00C3\u00A3o do tipo de boleto. (optional)
     - parameter banco: (query) C\u00C3\u00B3digo identificador do banco. (optional)

     - returns: RequestBuilder<PageTipoBoletoResponse> 
     */
    public class func consultarUsingGET18WithRequestBuilder(page page: Int?, limit: Int?, id: Int?, descricao: String?, banco: Int?) -> RequestBuilder<PageTipoBoletoResponse> {
        let path = "/api/tipos-boletos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "id": id,
            "descricao": descricao,
            "banco": banco
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTipoBoletoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Apresenta os dados de um determinado Tipo de Endere\u00C3\u00A7o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Endere\u00C3\u00A7o (id) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET19(id id: Int, completion: ((data: TipoEnderecoResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET19WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Tipo de Endere\u00C3\u00A7o
     
     - GET /api/tipos-enderecos/{id}
     - Este m\u00C3\u00A9todo permite consultar um determinado Tipo de Endere\u00C3\u00A7o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "nome" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Endere\u00C3\u00A7o (id) 

     - returns: RequestBuilder<TipoEnderecoResponse> 
     */
    public class func consultarUsingGET19WithRequestBuilder(id id: Int) -> RequestBuilder<TipoEnderecoResponse> {
        var path = "/api/tipos-enderecos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TipoEnderecoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de um determinado Tipo de Telefone
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET21(id id: Int, completion: ((data: TipoTelefoneResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET21WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Tipo de Telefone
     
     - GET /api/tipos-telefones/{id}
     - Este m\u00C3\u00A9todo permite consultar um determinado Tipo de Telefone a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "nome" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id) 

     - returns: RequestBuilder<TipoTelefoneResponse> 
     */
    public class func consultarUsingGET21WithRequestBuilder(id id: Int) -> RequestBuilder<TipoTelefoneResponse> {
        var path = "/api/tipos-telefones/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TipoTelefoneResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os dados de um determinado Endere\u00C3\u00A7o
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET5(id id: Int, completion: ((data: EnderecoResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET5WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Endere\u00C3\u00A7o
     
     - GET /api/enderecos/{id}
     - Este m\u00C3\u00A9todo permite consultar um determinado Endere\u00C3\u00A7o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "pontoReferencia" : "aeiou",
  "cidade" : "aeiou",
  "numero" : 123,
  "bairro" : "aeiou",
  "idTipoEndereco" : 123456789,
  "cep" : "aeiou",
  "pais" : "aeiou",
  "idPessoa" : 123456789,
  "uf" : "aeiou",
  "complemento" : "aeiou",
  "logradouro" : "aeiou",
  "dataInclusao" : "aeiou",
  "dataUltimaAtualizacao" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). 

     - returns: RequestBuilder<EnderecoResponse> 
     */
    public class func consultarUsingGET5WithRequestBuilder(id id: Int) -> RequestBuilder<EnderecoResponse> {
        var path = "/api/enderecos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<EnderecoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Apresenta os detalhes de uma determinada Pessoa
     
     - parameter id: (path) ID da Pessoa 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET9(id id: Int, completion: ((data: PessoaDetalheResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET9WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os detalhes de uma determinada Pessoa
     
     - GET /api/pessoas-detalhes/{id}
     - Este m\u00C3\u00A9todo permite a consulta dos detalhes de uma Pessoa existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "idNacionalidade" : 123456789,
  "idPessoa" : 123456789,
  "idEstadoCivil" : 123456789,
  "nomeEmpresa" : "aeiou",
  "idNaturezaOcupacao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "profissao" : "aeiou",
  "numeroAgencia" : 123,
  "nomeMae" : "aeiou",
  "email" : "aeiou"
}}]
     
     - parameter id: (path) ID da Pessoa 

     - returns: RequestBuilder<PessoaDetalheResponse> 
     */
    public class func consultarUsingGET9WithRequestBuilder(id id: Int) -> RequestBuilder<PessoaDetalheResponse> {
        var path = "/api/pessoas-detalhes/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PessoaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Desativa o par\u00C3\u00A2metro uso exterior para o produto
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func desativarUsoExteriorUsingPOST(id id: Int, completion: ((data: ProdutoDetalhesResponse?, error: ErrorType?) -> Void)) {
        desativarUsoExteriorUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Desativa o par\u00C3\u00A2metro uso exterior para o produto
     
     - POST /api/produtos/{id}/desativar-uso-exterior
     - Este m\u00C3\u00A9todo permite desativar o uso no exterior para o produto atrav\u00C3\u00A9s do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - examples: [{contentType=application/json, example={
  "idFantasiaBasica" : 123456789,
  "nome" : "aeiou",
  "id" : 123456789,
  "usoExterior" : false,
  "fantasiaBasica" : "aeiou",
  "status" : 123
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id) 

     - returns: RequestBuilder<ProdutoDetalhesResponse> 
     */
    public class func desativarUsoExteriorUsingPOSTWithRequestBuilder(id id: Int) -> RequestBuilder<ProdutoDetalhesResponse> {
        var path = "/api/produtos/{id}/desativar-uso-exterior"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ProdutoDetalhesResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Lista as contas da pessoa
     
     - parameter numeroReceitaFederal: (query) N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do cliente na Receita Federal (CPF ou CNPJ) 
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarContasPorPessoaUsingGET(numeroReceitaFederal numeroReceitaFederal: String, page: Int?, limit: Int?, completion: ((data: PageContaDetalheResponse?, error: ErrorType?) -> Void)) {
        listarContasPorPessoaUsingGETWithRequestBuilder(numeroReceitaFederal: numeroReceitaFederal, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista as contas da pessoa
     
     - GET /api/pessoas/listar-contas
     - Permite listar as contas de um pessoa a partir do seu numero na receita federal.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idOrigemComercial" : 123456789,
    "melhorDiaCompra" : 123,
    "saldoDisponivelSaque" : 1.3579000000000001069366817318950779736042022705078125,
    "statusConta" : "aeiou",
    "limiteGlobal" : 1.3579000000000001069366817318950779736042022705078125,
    "diaVencimento" : 123,
    "formaEnvioFatura" : "aeiou",
    "nomeFantasiaBasica" : "aeiou",
    "idProduto" : 123456789,
    "nomeOrigemComercial" : "aeiou",
    "dataUltimaAlteracaoVencimento" : "aeiou",
    "diasAtraso" : 123456789,
    "id" : 123456789,
    "saldoDisponivelGlobal" : 1.3579000000000001069366817318950779736042022705078125,
    "dataCadastro" : "aeiou",
    "limiteSaqueGlobal" : 1.3579000000000001069366817318950779736042022705078125,
    "idStatusConta" : 123456789,
    "valorRenda" : 1.3579000000000001069366817318950779736042022705078125,
    "nome" : "aeiou",
    "idPessoa" : 123456789,
    "numeroContaCorrente" : "aeiou",
    "dataStatusConta" : "aeiou",
    "idFantasiaBasica" : 123456789,
    "numeroAgencia" : 123,
    "titular" : false,
    "dataHoraUltimaCompra" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter numeroReceitaFederal: (query) N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do cliente na Receita Federal (CPF ou CNPJ) 
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageContaDetalheResponse> 
     */
    public class func listarContasPorPessoaUsingGETWithRequestBuilder(numeroReceitaFederal numeroReceitaFederal: String, page: Int?, limit: Int?) -> RequestBuilder<PageContaDetalheResponse> {
        let path = "/api/pessoas/listar-contas"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "numeroReceitaFederal": numeroReceitaFederal,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageContaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Estados C\u00C3\u00ADvis
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarEstadosCivisUsingGET(page page: Int?, limit: Int?, completion: ((data: PageCampoCodificadoDescricaoResponse?, error: ErrorType?) -> Void)) {
        listarEstadosCivisUsingGETWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Estados C\u00C3\u00ADvis
     
     - GET /api/estados-civis
     - Este m\u00C3\u00A9todo permite que sejam listados os Estados C\u00C3\u00ADvis na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "codigo" : 123456789,
    "descricao" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageCampoCodificadoDescricaoResponse> 
     */
    public class func listarEstadosCivisUsingGETWithRequestBuilder(page page: Int?, limit: Int?) -> RequestBuilder<PageCampoCodificadoDescricaoResponse> {
        let path = "/api/estados-civis"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageCampoCodificadoDescricaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Listar altera\u00C3\u00A7\u00C3\u00B5es de telefones realizadas nos \u00C3\u00BAltimos 60 dias
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da pessoa (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarHistoricoTelefonesUsingGET(id id: Int, completion: ((data: HistoricoTelefoneResponse?, error: ErrorType?) -> Void)) {
        listarHistoricoTelefonesUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Listar altera\u00C3\u00A7\u00C3\u00B5es de telefones realizadas nos \u00C3\u00BAltimos 60 dias
     
     - GET /api/pessoas/{id}/historico-telefones
     - Este m\u00C3\u00A9todo permite verificar quais os telefones de um determinado que cliente que sofreram altera\u00C3\u00A7\u00C3\u00A3o nos \u00C3\u00BAltimos 60 dias.
     - examples: [{contentType=application/json, example={
  "dataModificacao" : "aeiou",
  "telefone" : "aeiou",
  "tipoTelefone" : "aeiou",
  "idTipoTelefone" : 123456789,
  "id" : 123456789
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da pessoa (id). 

     - returns: RequestBuilder<HistoricoTelefoneResponse> 
     */
    public class func listarHistoricoTelefonesUsingGETWithRequestBuilder(id id: Int) -> RequestBuilder<HistoricoTelefoneResponse> {
        var path = "/api/pessoas/{id}/historico-telefones"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<HistoricoTelefoneResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Lista nacionalidades
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarNacionalidadesUsingGET(page page: Int?, limit: Int?, completion: ((data: PageCampoCodificadoDescricaoResponse?, error: ErrorType?) -> Void)) {
        listarNacionalidadesUsingGETWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista nacionalidades
     
     - GET /api/nacionalidades
     - Este m\u00C3\u00A9todo permite que sejam listados as nacionalidades na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "codigo" : 123456789,
    "descricao" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageCampoCodificadoDescricaoResponse> 
     */
    public class func listarNacionalidadesUsingGETWithRequestBuilder(page page: Int?, limit: Int?) -> RequestBuilder<PageCampoCodificadoDescricaoResponse> {
        let path = "/api/nacionalidades"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageCampoCodificadoDescricaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista as Ocupa\u00C3\u00A7\u00C3\u00B5es
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarNaturezasOcupacoesUsingGET(page page: Int?, limit: Int?, completion: ((data: PageCampoCodificadoDescricaoResponse?, error: ErrorType?) -> Void)) {
        listarNaturezasOcupacoesUsingGETWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista as Ocupa\u00C3\u00A7\u00C3\u00B5es
     
     - GET /api/ocupacoes
     - Este m\u00C3\u00A9todo permite que sejam listados as naturezas de opera\u00C3\u00A7\u00C3\u00B5es na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "codigo" : 123456789,
    "descricao" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageCampoCodificadoDescricaoResponse> 
     */
    public class func listarNaturezasOcupacoesUsingGETWithRequestBuilder(page page: Int?, limit: Int?) -> RequestBuilder<PageCampoCodificadoDescricaoResponse> {
        let path = "/api/ocupacoes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageCampoCodificadoDescricaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Opera\u00C3\u00A7\u00C3\u00A3o utilizada para listar Origens Comerciais
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) Id da origem comercial (optional)
     - parameter nome: (query) Nome da origem comercial (optional)
     - parameter status: (query) Status da origem comercial (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarOrigensComerciaisUsingGET(page page: Int?, limit: Int?, id: Int?, nome: String?, status: Int?, completion: ((data: PageOrigemComercialResponse?, error: ErrorType?) -> Void)) {
        listarOrigensComerciaisUsingGETWithRequestBuilder(page: page, limit: limit, id: id, nome: nome, status: status).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Opera\u00C3\u00A7\u00C3\u00A3o utilizada para listar Origens Comerciais
     
     - GET /api/origens-comerciais
     - Este m\u00C3\u00A9todo permite que sejam listadas as Origens Comerciais existentes na base do emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "nome" : "aeiou",
    "id" : 123456789,
    "status" : 123
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) Id da origem comercial (optional)
     - parameter nome: (query) Nome da origem comercial (optional)
     - parameter status: (query) Status da origem comercial (optional)

     - returns: RequestBuilder<PageOrigemComercialResponse> 
     */
    public class func listarOrigensComerciaisUsingGETWithRequestBuilder(page page: Int?, limit: Int?, id: Int?, nome: String?, status: Int?) -> RequestBuilder<PageOrigemComercialResponse> {
        let path = "/api/origens-comerciais"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "id": id,
            "nome": nome,
            "status": status
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageOrigemComercialResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista profiss\u00C3\u00B5es
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarProfissoesUsingGET(page page: Int?, limit: Int?, completion: ((data: PageCampoCodificadoDescricaoResponse?, error: ErrorType?) -> Void)) {
        listarProfissoesUsingGETWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista profiss\u00C3\u00B5es
     
     - GET /api/profissoes
     - Este m\u00C3\u00A9todo permite que sejam listados as profiss\u00C3\u00B5es na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "codigo" : 123456789,
    "descricao" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageCampoCodificadoDescricaoResponse> 
     */
    public class func listarProfissoesUsingGETWithRequestBuilder(page page: Int?, limit: Int?) -> RequestBuilder<PageCampoCodificadoDescricaoResponse> {
        let path = "/api/profissoes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageCampoCodificadoDescricaoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista todos os atendimentos
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idTipoAtendimento: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo de Atendimento (id) (optional)
     - parameter idConta: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de conta (id). (optional)
     - parameter nomeAtendente: (query) Apresenta o nome do Atendente que registrou o Atendimento. (optional)
     - parameter dataAtendimento: (query) Apresenta a data em que o Atendimento foi realizado. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET1(page page: Int?, limit: Int?, idTipoAtendimento: Int?, idConta: Int?, nomeAtendente: String?, dataAtendimento: String?, completion: ((data: PageAtendimentoClienteResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET1WithRequestBuilder(page: page, limit: limit, idTipoAtendimento: idTipoAtendimento, idConta: idConta, nomeAtendente: nomeAtendente, dataAtendimento: dataAtendimento).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista todos os atendimentos
     
     - GET /api/atendimento-clientes
     - Este m\u00C3\u00A9todo permite que sejam listados todos os Registro de Atendimento, independente do Tipo.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "conteudoAtendimento" : "aeiou",
    "idConta" : 123456789,
    "descricaoTipoAtendimento" : "aeiou",
    "dataProcessamento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "dataAgendamento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "flagProcessamento" : 123,
    "dataHoraFimAtendimento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "detalhesAtendimento" : "aeiou",
    "idAtendimento" : 123456789,
    "dataAtendimento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "dataHoraInicioAtendimento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "nomeAtendente" : "aeiou",
    "nomeSistema" : "aeiou",
    "idTipoAtendimento" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idTipoAtendimento: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo de Atendimento (id) (optional)
     - parameter idConta: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de conta (id). (optional)
     - parameter nomeAtendente: (query) Apresenta o nome do Atendente que registrou o Atendimento. (optional)
     - parameter dataAtendimento: (query) Apresenta a data em que o Atendimento foi realizado. (optional)

     - returns: RequestBuilder<PageAtendimentoClienteResponse> 
     */
    public class func listarUsingGET1WithRequestBuilder(page page: Int?, limit: Int?, idTipoAtendimento: Int?, idConta: Int?, nomeAtendente: String?, dataAtendimento: String?) -> RequestBuilder<PageAtendimentoClienteResponse> {
        let path = "/api/atendimento-clientes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "idTipoAtendimento": idTipoAtendimento,
            "idConta": idConta,
            "nomeAtendente": nomeAtendente,
            "dataAtendimento": dataAtendimento
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageAtendimentoClienteResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Detalhes das Pessoas cadastradas no Emissor
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo identificador da pessoa (optional)
     - parameter nomeMae: (query) Apresenta o nome da m\u00C3\u00A3e da pessoa fisica (optional)
     - parameter idEstadoCivil: (query) Id Estado civil da pessoa fisica (optional)
     - parameter profissao: (query) Profiss\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNaturezaOcupacao: (query) Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNacionalidade: (query) Id Nacionalidade da pessoa fisica (optional)
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia. (optional)
     - parameter numeroContaCorrente: (query) N\u00C3\u00BAmero da conta corrente. (optional)
     - parameter email: (query) Email da pessoa fisica (optional)
     - parameter nomeEmpresa: (query) Nome que deve ser impresso no cart\u00C3\u00A3o (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET14(page page: Int?, limit: Int?, idPessoa: Int?, nomeMae: String?, idEstadoCivil: Int?, profissao: String?, idNaturezaOcupacao: Int?, idNacionalidade: Int?, numeroAgencia: Int?, numeroContaCorrente: String?, email: String?, nomeEmpresa: String?, completion: ((data: PagePessoaDetalheResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET14WithRequestBuilder(page: page, limit: limit, idPessoa: idPessoa, nomeMae: nomeMae, idEstadoCivil: idEstadoCivil, profissao: profissao, idNaturezaOcupacao: idNaturezaOcupacao, idNacionalidade: idNacionalidade, numeroAgencia: numeroAgencia, numeroContaCorrente: numeroContaCorrente, email: email, nomeEmpresa: nomeEmpresa).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Detalhes das Pessoas cadastradas no Emissor
     
     - GET /api/pessoas-detalhes
     - Este m\u00C3\u00A9todo permite que sejam listadas od detalhes das Pessoas existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idNacionalidade" : 123456789,
    "idPessoa" : 123456789,
    "idEstadoCivil" : 123456789,
    "nomeEmpresa" : "aeiou",
    "idNaturezaOcupacao" : 123456789,
    "numeroContaCorrente" : "aeiou",
    "profissao" : "aeiou",
    "numeroAgencia" : 123,
    "nomeMae" : "aeiou",
    "email" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo identificador da pessoa (optional)
     - parameter nomeMae: (query) Apresenta o nome da m\u00C3\u00A3e da pessoa fisica (optional)
     - parameter idEstadoCivil: (query) Id Estado civil da pessoa fisica (optional)
     - parameter profissao: (query) Profiss\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNaturezaOcupacao: (query) Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNacionalidade: (query) Id Nacionalidade da pessoa fisica (optional)
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia. (optional)
     - parameter numeroContaCorrente: (query) N\u00C3\u00BAmero da conta corrente. (optional)
     - parameter email: (query) Email da pessoa fisica (optional)
     - parameter nomeEmpresa: (query) Nome que deve ser impresso no cart\u00C3\u00A3o (optional)

     - returns: RequestBuilder<PagePessoaDetalheResponse> 
     */
    public class func listarUsingGET14WithRequestBuilder(page page: Int?, limit: Int?, idPessoa: Int?, nomeMae: String?, idEstadoCivil: Int?, profissao: String?, idNaturezaOcupacao: Int?, idNacionalidade: Int?, numeroAgencia: Int?, numeroContaCorrente: String?, email: String?, nomeEmpresa: String?) -> RequestBuilder<PagePessoaDetalheResponse> {
        let path = "/api/pessoas-detalhes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "idPessoa": idPessoa,
            "nomeMae": nomeMae,
            "idEstadoCivil": idEstadoCivil,
            "profissao": profissao,
            "idNaturezaOcupacao": idNaturezaOcupacao,
            "idNacionalidade": idNacionalidade,
            "numeroAgencia": numeroAgencia,
            "numeroContaCorrente": numeroContaCorrente,
            "email": email,
            "nomeEmpresa": nomeEmpresa
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PagePessoaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista as Pessoas cadastradas no Emissor
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id). (optional)
     - parameter nome: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. (optional)
     - parameter tipo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica). (optional)
     - parameter cpf: (query) N\u00C3\u00BAmero do CPF, quando PF. (optional)
     - parameter cnpj: (query) N\u00C3\u00BAmero do CNPJ, quando PJ. (optional)
     - parameter dataNascimento: (query) Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. (optional)
     - parameter sexo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00C3\u00A3o Especificado). (optional)
     - parameter numeroIdentidade: (query) N\u00C3\u00BAmero da Identidade (optional)
     - parameter orgaoExpedidorIdentidade: (query) Org\u00C3\u00A3o expedidor do RG. (optional)
     - parameter unidadeFederativaIdentidade: (query) Sigla da Unidade Federativa de onde foi expedido a Identidade (optional)
     - parameter dataEmissaoIdentidade: (query) Data emiss\u00C3\u00A3o da identidade no formato aaaa-MM-dd (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET15(page page: Int?, limit: Int?, id: Int?, nome: String?, tipo: String?, cpf: String?, cnpj: String?, dataNascimento: String?, sexo: String?, numeroIdentidade: String?, orgaoExpedidorIdentidade: String?, unidadeFederativaIdentidade: String?, dataEmissaoIdentidade: String?, completion: ((data: PagePessoaResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET15WithRequestBuilder(page: page, limit: limit, id: id, nome: nome, tipo: tipo, cpf: cpf, cnpj: cnpj, dataNascimento: dataNascimento, sexo: sexo, numeroIdentidade: numeroIdentidade, orgaoExpedidorIdentidade: orgaoExpedidorIdentidade, unidadeFederativaIdentidade: unidadeFederativaIdentidade, dataEmissaoIdentidade: dataEmissaoIdentidade).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista as Pessoas cadastradas no Emissor
     
     - GET /api/pessoas
     - Este m\u00C3\u00A9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "numeroIdentidade" : "aeiou",
    "tipo" : "aeiou",
    "cpf" : "aeiou",
    "unidadeFederativaIdentidade" : "aeiou",
    "nome" : "aeiou",
    "id" : 123456789,
    "cnpj" : "aeiou",
    "dataNascimento" : "aeiou",
    "sexo" : "aeiou",
    "dataEmissaoIdentidade" : "aeiou",
    "orgaoExpedidorIdentidade" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id). (optional)
     - parameter nome: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. (optional)
     - parameter tipo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica). (optional)
     - parameter cpf: (query) N\u00C3\u00BAmero do CPF, quando PF. (optional)
     - parameter cnpj: (query) N\u00C3\u00BAmero do CNPJ, quando PJ. (optional)
     - parameter dataNascimento: (query) Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. (optional)
     - parameter sexo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00C3\u00A3o Especificado). (optional)
     - parameter numeroIdentidade: (query) N\u00C3\u00BAmero da Identidade (optional)
     - parameter orgaoExpedidorIdentidade: (query) Org\u00C3\u00A3o expedidor do RG. (optional)
     - parameter unidadeFederativaIdentidade: (query) Sigla da Unidade Federativa de onde foi expedido a Identidade (optional)
     - parameter dataEmissaoIdentidade: (query) Data emiss\u00C3\u00A3o da identidade no formato aaaa-MM-dd (optional)

     - returns: RequestBuilder<PagePessoaResponse> 
     */
    public class func listarUsingGET15WithRequestBuilder(page page: Int?, limit: Int?, id: Int?, nome: String?, tipo: String?, cpf: String?, cnpj: String?, dataNascimento: String?, sexo: String?, numeroIdentidade: String?, orgaoExpedidorIdentidade: String?, unidadeFederativaIdentidade: String?, dataEmissaoIdentidade: String?) -> RequestBuilder<PagePessoaResponse> {
        let path = "/api/pessoas"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "id": id,
            "nome": nome,
            "tipo": tipo,
            "cpf": cpf,
            "cnpj": cnpj,
            "dataNascimento": dataNascimento,
            "sexo": sexo,
            "numeroIdentidade": numeroIdentidade,
            "orgaoExpedidorIdentidade": orgaoExpedidorIdentidade,
            "unidadeFederativaIdentidade": unidadeFederativaIdentidade,
            "dataEmissaoIdentidade": dataEmissaoIdentidade
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PagePessoaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Portadores existentes
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idConta: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id). (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id). (optional)
     - parameter idParentesco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Parentesco (id) (optional)
     - parameter tipoPortador: (query) Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: (&#39;T&#39;: Titular, &#39;A&#39;: Adicional). (optional)
     - parameter nomeImpresso: (query) Apresenta o nome a ser impresso no cart\u00C3\u00A3o. (optional)
     - parameter idTipoCartao: (query) Apresenta o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo do cart\u00C3\u00A3o (id), que ser\u00C3\u00A1 utilizado para gerar os cart\u00C3\u00B5es deste portador, vinculados a sua respectiva conta atrav\u00C3\u00A9s do campo idConta. (optional)
     - parameter flagAtivo: (query) Quanto ativa, indica que o cadastro do Portador est\u00C3\u00A1 ativo, em emissores que realizam este tipo de gest\u00C3\u00A3o. (optional)
     - parameter dataCadastroPortador: (query) Apresenta a data em que o Portador fora cadastrado, quando possuir esta informa\u00C3\u00A7\u00C3\u00A3o. (optional)
     - parameter dataCancelamentoPortador: (query) Apresenta a data em que o Portador fora cancelado, quando possuir esta informa\u00C3\u00A7\u00C3\u00A3o. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET17(page page: Int?, limit: Int?, idConta: Int?, idProduto: Int?, idPessoa: Int?, idParentesco: Int?, tipoPortador: String?, nomeImpresso: String?, idTipoCartao: Int?, flagAtivo: Int?, dataCadastroPortador: String?, dataCancelamentoPortador: String?, completion: ((data: PagePortadorResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET17WithRequestBuilder(page: page, limit: limit, idConta: idConta, idProduto: idProduto, idPessoa: idPessoa, idParentesco: idParentesco, tipoPortador: tipoPortador, nomeImpresso: nomeImpresso, idTipoCartao: idTipoCartao, flagAtivo: flagAtivo, dataCadastroPortador: dataCadastroPortador, dataCancelamentoPortador: dataCancelamentoPortador).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Portadores existentes
     
     - GET /api/portadores
     - Este m\u00C3\u00A9todo permite que sejam listados os portadores cadastrados na base do emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idPessoa" : 123456789,
    "idConta" : 123456789,
    "idProduto" : 123456789,
    "dataCancelamentoPortador" : "aeiou",
    "idTipoCartao" : 123456789,
    "idParentesco" : 123456789,
    "dataCadastroPortador" : "aeiou",
    "nomeImpresso" : "aeiou",
    "flagAtivo" : 123,
    "tipoPortador" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter idConta: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id). (optional)
     - parameter idProduto: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id). (optional)
     - parameter idParentesco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Parentesco (id) (optional)
     - parameter tipoPortador: (query) Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: (&#39;T&#39;: Titular, &#39;A&#39;: Adicional). (optional)
     - parameter nomeImpresso: (query) Apresenta o nome a ser impresso no cart\u00C3\u00A3o. (optional)
     - parameter idTipoCartao: (query) Apresenta o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo do cart\u00C3\u00A3o (id), que ser\u00C3\u00A1 utilizado para gerar os cart\u00C3\u00B5es deste portador, vinculados a sua respectiva conta atrav\u00C3\u00A9s do campo idConta. (optional)
     - parameter flagAtivo: (query) Quanto ativa, indica que o cadastro do Portador est\u00C3\u00A1 ativo, em emissores que realizam este tipo de gest\u00C3\u00A3o. (optional)
     - parameter dataCadastroPortador: (query) Apresenta a data em que o Portador fora cadastrado, quando possuir esta informa\u00C3\u00A7\u00C3\u00A3o. (optional)
     - parameter dataCancelamentoPortador: (query) Apresenta a data em que o Portador fora cancelado, quando possuir esta informa\u00C3\u00A7\u00C3\u00A3o. (optional)

     - returns: RequestBuilder<PagePortadorResponse> 
     */
    public class func listarUsingGET17WithRequestBuilder(page page: Int?, limit: Int?, idConta: Int?, idProduto: Int?, idPessoa: Int?, idParentesco: Int?, tipoPortador: String?, nomeImpresso: String?, idTipoCartao: Int?, flagAtivo: Int?, dataCadastroPortador: String?, dataCancelamentoPortador: String?) -> RequestBuilder<PagePortadorResponse> {
        let path = "/api/portadores"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "idConta": idConta,
            "idProduto": idProduto,
            "idPessoa": idPessoa,
            "idParentesco": idParentesco,
            "tipoPortador": tipoPortador,
            "nomeImpresso": nomeImpresso,
            "idTipoCartao": idTipoCartao,
            "flagAtivo": flagAtivo,
            "dataCadastroPortador": dataCadastroPortador,
            "dataCancelamentoPortador": dataCancelamentoPortador
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PagePortadorResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Produtos do Emissor
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter nome: (query) Descri\u00C3\u00A7\u00C3\u00A3o do Nome do Produto. (optional)
     - parameter status: (query) Representa o Status do Produto, onde: (\&quot;0\&quot;: Inativo), (\&quot;1\&quot;: Ativo). (optional)
     - parameter idFantasiaBasica: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Fantasia B\u00C3\u00A1sica (id) a qual o produto pertence. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET18(page page: Int?, limit: Int?, nome: String?, status: Int?, idFantasiaBasica: Int?, completion: ((data: PageProdutoResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET18WithRequestBuilder(page: page, limit: limit, nome: nome, status: status, idFantasiaBasica: idFantasiaBasica).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Produtos do Emissor
     
     - GET /api/produtos
     - Este m\u00C3\u00A9todo permite que sejam listados os Produtos existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idFantasiaBasica" : 123456789,
    "nome" : "aeiou",
    "id" : 123456789,
    "status" : 123
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter nome: (query) Descri\u00C3\u00A7\u00C3\u00A3o do Nome do Produto. (optional)
     - parameter status: (query) Representa o Status do Produto, onde: (\&quot;0\&quot;: Inativo), (\&quot;1\&quot;: Ativo). (optional)
     - parameter idFantasiaBasica: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Fantasia B\u00C3\u00A1sica (id) a qual o produto pertence. (optional)

     - returns: RequestBuilder<PageProdutoResponse> 
     */
    public class func listarUsingGET18WithRequestBuilder(page page: Int?, limit: Int?, nome: String?, status: Int?, idFantasiaBasica: Int?) -> RequestBuilder<PageProdutoResponse> {
        let path = "/api/produtos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "nome": nome,
            "status": status,
            "idFantasiaBasica": idFantasiaBasica
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageProdutoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Bancos cadastrados para o Emissor
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET2(page page: Int?, limit: Int?, completion: ((data: PageBancoResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET2WithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Bancos cadastrados para o Emissor
     
     - GET /api/bancos
     - Este m\u00C3\u00A9todo permite que sejam listados os Bancos existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "nome" : "aeiou",
    "id" : 123456789,
    "digitoBanco" : "aeiou",
    "descricao" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageBancoResponse> 
     */
    public class func listarUsingGET2WithRequestBuilder(page page: Int?, limit: Int?) -> RequestBuilder<PageBancoResponse> {
        let path = "/api/bancos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageBancoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Telefones cadastrados no Emissor
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). (optional)
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence. (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter status: (query) Apresenta o Status do Telefone, onde: &#39;0&#39;: Inativo e &#39;1&#39;: Ativo (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET22(page page: Int?, limit: Int?, id: Int?, idTipoTelefone: Int?, idPessoa: Int?, ddd: String?, telefone: String?, ramal: String?, status: Int?, completion: ((data: PageTelefoneResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET22WithRequestBuilder(page: page, limit: limit, id: id, idTipoTelefone: idTipoTelefone, idPessoa: idPessoa, ddd: ddd, telefone: telefone, ramal: ramal, status: status).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Telefones cadastrados no Emissor
     
     - GET /api/telefones
     - Este m\u00C3\u00A9todo permite que sejam listados os Telefones existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idPessoa" : 123456789,
    "telefone" : "aeiou",
    "ddd" : "aeiou",
    "idTipoTelefone" : 123456789,
    "id" : 123456789,
    "ramal" : "aeiou",
    "status" : 123
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). (optional)
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence. (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter status: (query) Apresenta o Status do Telefone, onde: &#39;0&#39;: Inativo e &#39;1&#39;: Ativo (optional)

     - returns: RequestBuilder<PageTelefoneResponse> 
     */
    public class func listarUsingGET22WithRequestBuilder(page page: Int?, limit: Int?, id: Int?, idTipoTelefone: Int?, idPessoa: Int?, ddd: String?, telefone: String?, ramal: String?, status: Int?) -> RequestBuilder<PageTelefoneResponse> {
        let path = "/api/telefones"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "id": id,
            "idTipoTelefone": idTipoTelefone,
            "idPessoa": idPessoa,
            "ddd": ddd,
            "telefone": telefone,
            "ramal": ramal,
            "status": status
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTelefoneResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista as op\u00C3\u00B5es de Tipos de Endere\u00C3\u00A7os do Emissor 
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Endere\u00C3\u00A7o (id) (optional)
     - parameter nome: (query) Nome do Tipo do Endere\u00C3\u00A7o (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET24(page page: Int?, limit: Int?, id: Int?, nome: String?, completion: ((data: PageTipoEnderecoResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET24WithRequestBuilder(page: page, limit: limit, id: id, nome: nome).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista as op\u00C3\u00B5es de Tipos de Endere\u00C3\u00A7os do Emissor 
     
     - GET /api/tipos-enderecos
     - Este m\u00C3\u00A9todo permite que sejam listados os Tipos de Endere\u00C3\u00A7os existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "nome" : "aeiou",
    "id" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Endere\u00C3\u00A7o (id) (optional)
     - parameter nome: (query) Nome do Tipo do Endere\u00C3\u00A7o (optional)

     - returns: RequestBuilder<PageTipoEnderecoResponse> 
     */
    public class func listarUsingGET24WithRequestBuilder(page page: Int?, limit: Int?, id: Int?, nome: String?) -> RequestBuilder<PageTipoEnderecoResponse> {
        let path = "/api/tipos-enderecos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "id": id,
            "nome": nome
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTipoEnderecoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Tipos de Telefones
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter nome: (query) Nome do Tipo do Telefone (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET26(page page: Int?, limit: Int?, id: Int?, nome: String?, completion: ((data: PageTipoTelefoneResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET26WithRequestBuilder(page: page, limit: limit, id: id, nome: nome).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Tipos de Telefones
     
     - GET /api/tipos-telefones
     - Este m\u00C3\u00A9todo permite que sejam listados os Tipos de Telefones existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "nome" : "aeiou",
    "id" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter nome: (query) Nome do Tipo do Telefone (optional)

     - returns: RequestBuilder<PageTipoTelefoneResponse> 
     */
    public class func listarUsingGET26WithRequestBuilder(page page: Int?, limit: Int?, id: Int?, nome: String?) -> RequestBuilder<PageTipoTelefoneResponse> {
        let path = "/api/tipos-telefones"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "id": id,
            "nome": nome
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTipoTelefoneResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Lista os Endere\u00C3\u00A7os cadastrados para o Emissor
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id) (optional)
     - parameter idTipoEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id) (optional)
     - parameter cep: (query) Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) (optional)
     - parameter logradouro: (query) Apresenta o nome do Logradouro (optional)
     - parameter numero: (query) Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o (optional)
     - parameter complemento: (query) Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o (optional)
     - parameter pontoReferencia: (query) Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o (optional)
     - parameter bairro: (query) Apresenta nome do bairro (optional)
     - parameter cidade: (query) Apresenta nome da cidade (optional)
     - parameter uf: (query) Apresenta sigla da Unidade Federativa (optional)
     - parameter pais: (query) Apresenta nome do Pais (optional)
     - parameter dataInclusao: (query) Apresenta a data em que fora cadastrado o Endere\u00C3\u00A7o (optional)
     - parameter dataUltimaAtualizacao: (query) Data em que fora realizada a \u00C3\u00BAltima mudan\u00C3\u00A7a neste registro de endere\u00C3\u00A7o. Quando n\u00C3\u00A3o tiver ocorrido mudan\u00C3\u00A7a, conter\u00C3\u00A1 a mesma informa\u00C3\u00A7\u00C3\u00A3o que o campo dataInclusao (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET9(page page: Int?, limit: Int?, id: Int?, idPessoa: Int?, idTipoEndereco: Int?, cep: String?, logradouro: String?, numero: Int?, complemento: String?, pontoReferencia: String?, bairro: String?, cidade: String?, uf: String?, pais: String?, dataInclusao: String?, dataUltimaAtualizacao: String?, completion: ((data: PageEnderecoResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET9WithRequestBuilder(page: page, limit: limit, id: id, idPessoa: idPessoa, idTipoEndereco: idTipoEndereco, cep: cep, logradouro: logradouro, numero: numero, complemento: complemento, pontoReferencia: pontoReferencia, bairro: bairro, cidade: cidade, uf: uf, pais: pais, dataInclusao: dataInclusao, dataUltimaAtualizacao: dataUltimaAtualizacao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Endere\u00C3\u00A7os cadastrados para o Emissor
     
     - GET /api/enderecos
     - Este m\u00C3\u00A9todo permite que sejam listados os Endere\u00C3\u00A7os existentes na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "pontoReferencia" : "aeiou",
    "cidade" : "aeiou",
    "numero" : 123,
    "bairro" : "aeiou",
    "idTipoEndereco" : 123456789,
    "cep" : "aeiou",
    "pais" : "aeiou",
    "idPessoa" : 123456789,
    "uf" : "aeiou",
    "complemento" : "aeiou",
    "logradouro" : "aeiou",
    "dataInclusao" : "aeiou",
    "dataUltimaAtualizacao" : "aeiou",
    "id" : 123456789
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id) (optional)
     - parameter idTipoEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id) (optional)
     - parameter cep: (query) Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) (optional)
     - parameter logradouro: (query) Apresenta o nome do Logradouro (optional)
     - parameter numero: (query) Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o (optional)
     - parameter complemento: (query) Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o (optional)
     - parameter pontoReferencia: (query) Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o (optional)
     - parameter bairro: (query) Apresenta nome do bairro (optional)
     - parameter cidade: (query) Apresenta nome da cidade (optional)
     - parameter uf: (query) Apresenta sigla da Unidade Federativa (optional)
     - parameter pais: (query) Apresenta nome do Pais (optional)
     - parameter dataInclusao: (query) Apresenta a data em que fora cadastrado o Endere\u00C3\u00A7o (optional)
     - parameter dataUltimaAtualizacao: (query) Data em que fora realizada a \u00C3\u00BAltima mudan\u00C3\u00A7a neste registro de endere\u00C3\u00A7o. Quando n\u00C3\u00A3o tiver ocorrido mudan\u00C3\u00A7a, conter\u00C3\u00A1 a mesma informa\u00C3\u00A7\u00C3\u00A3o que o campo dataInclusao (optional)

     - returns: RequestBuilder<PageEnderecoResponse> 
     */
    public class func listarUsingGET9WithRequestBuilder(page page: Int?, limit: Int?, id: Int?, idPessoa: Int?, idTipoEndereco: Int?, cep: String?, logradouro: String?, numero: Int?, complemento: String?, pontoReferencia: String?, bairro: String?, cidade: String?, uf: String?, pais: String?, dataInclusao: String?, dataUltimaAtualizacao: String?) -> RequestBuilder<PageEnderecoResponse> {
        let path = "/api/enderecos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "page": page,
            "limit": limit,
            "id": id,
            "idPessoa": idPessoa,
            "idTipoEndereco": idTipoEndereco,
            "cep": cep,
            "logradouro": logradouro,
            "numero": numero,
            "complemento": complemento,
            "pontoReferencia": pontoReferencia,
            "bairro": bairro,
            "cidade": cidade,
            "uf": uf,
            "pais": pais,
            "dataInclusao": dataInclusao,
            "dataUltimaAtualizacao": dataUltimaAtualizacao
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageEnderecoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Cadastro de Conta e Pessoa Fisica
     
     - parameter pessoaPersist: (body) pessoaPersist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarPessoaFisicaAprovadaUsingPOST(pessoaPersist pessoaPersist: PessoaFisicaAprovadaPersist, completion: ((data: PessoaFisicaAprovadaResponse?, error: ErrorType?) -> Void)) {
        salvarPessoaFisicaAprovadaUsingPOSTWithRequestBuilder(pessoaPersist: pessoaPersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Cadastro de Conta e Pessoa Fisica
     
     - POST /api/clientes-pessoas-fisicas
     - Permite realizar o cadastro de uma Conta para um cliente do tipo Pessoa F\u00C3\u00ADsica, recebendo nesta opera\u00C3\u00A7\u00C3\u00A3o todos os dados cadastrais que se fazem necess\u00C3\u00A1rios para isso. Uma vez criado, poder\u00C3\u00A1 ser acionado o m\u00C3\u00A9todo de 'Gera\u00C3\u00A7\u00C3\u00A3o de Cart\u00C3\u00A3o' para o cliente e seus adicionais.
     - examples: [{contentType=application/json, example={
  "numeroIdentidade" : "aeiou",
  "idEstadoCivil" : 123456789,
  "idOrigemComercial" : 123456789,
  "idNaturezaOcupacao" : 123456789,
  "profissao" : "aeiou",
  "nome" : "aeiou",
  "diaVencimento" : 123,
  "telefones" : [ {
    "telefone" : "aeiou",
    "ddd" : "aeiou",
    "idTipoTelefone" : 123456789,
    "id" : 123456789,
    "ramal" : "aeiou"
  } ],
  "orgaoExpedidorIdentidade" : "aeiou",
  "idNacionalidade" : 123456789,
  "idProduto" : 123456789,
  "nomeEmpresa" : "aeiou",
  "enderecos" : [ {
    "pontoReferencia" : "aeiou",
    "enderecoCorrespondencia" : false,
    "uf" : "aeiou",
    "cidade" : "aeiou",
    "complemento" : "aeiou",
    "numero" : 123,
    "logradouro" : "aeiou",
    "bairro" : "aeiou",
    "id" : 123456789,
    "idTipoEndereco" : 123456789,
    "cep" : "aeiou",
    "pais" : "aeiou"
  } ],
  "numeroContaCorrente" : "aeiou",
  "cpf" : "aeiou",
  "unidadeFederativaIdentidade" : "aeiou",
  "id" : 123456789,
  "dataNascimento" : "aeiou",
  "sexo" : "aeiou",
  "dataEmissaoIdentidade" : "aeiou",
  "nomeImpresso" : "aeiou",
  "numeroAgencia" : 123,
  "nomeMae" : "aeiou",
  "email" : "aeiou"
}}]
     
     - parameter pessoaPersist: (body) pessoaPersist 

     - returns: RequestBuilder<PessoaFisicaAprovadaResponse> 
     */
    public class func salvarPessoaFisicaAprovadaUsingPOSTWithRequestBuilder(pessoaPersist pessoaPersist: PessoaFisicaAprovadaPersist) -> RequestBuilder<PessoaFisicaAprovadaResponse> {
        let path = "/api/clientes-pessoas-fisicas"
        let URLString = PierAPI.basePath + path
        
        let parameters = pessoaPersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<PessoaFisicaAprovadaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Cadastro de Conta e Pessoa Jur\u00C3\u00ADdica
     
     - parameter pessoaPersist: (body) pessoaPersist 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarPessoaJuridicaAprovadaUsingPOST(pessoaPersist pessoaPersist: PessoaJuridicaAprovadaPersist, completion: ((data: PessoaJuridicaAprovadaResponse?, error: ErrorType?) -> Void)) {
        salvarPessoaJuridicaAprovadaUsingPOSTWithRequestBuilder(pessoaPersist: pessoaPersist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Cadastro de Conta e Pessoa Jur\u00C3\u00ADdica
     
     - POST /api/clientes-pessoas-juridicas
     - Cadastro de Conta e Pessoa Jur\u00C3\u00ADdica Permite realizar o cadastro de uma Conta para um cliente do tipo Pessoa Jur\u00C3\u00ADdica, recebendo nesta opera\u00C3\u00A7\u00C3\u00A3o todos os dados cadastrais que se fazem necess\u00C3\u00A1rios para isso, inclu\u00C3\u00ADndo o registro de cada um dos s\u00C3\u00B3cios. Uma vez criado, poder\u00C3\u00A1 ser acionado o m\u00C3\u00A9todo de 'Gera\u00C3\u00A7\u00C3\u00A3o de Cart\u00C3\u00A3o' para o cliente e cada um dos s\u00C3\u00B3cios vinculados.
     - examples: [{contentType=application/json, example={
  "idOrigemComercial" : 123456789,
  "dataAberturaEmpresa" : "aeiou",
  "cnpj" : "aeiou",
  "diaVencimento" : 123,
  "telefones" : [ {
    "telefone" : "aeiou",
    "ddd" : "aeiou",
    "idTipoTelefone" : 123456789,
    "id" : 123456789,
    "ramal" : "aeiou"
  } ],
  "socios" : [ {
    "numeroIdentidade" : "aeiou",
    "profissao" : "aeiou",
    "nome" : "aeiou",
    "estadoCivil" : "aeiou",
    "telefones" : [ "" ],
    "orgaoExpedidorIdentidade" : "aeiou",
    "cpf" : "aeiou",
    "unidadeFederativaIdentidade" : "aeiou",
    "id" : 123456789,
    "dataNascimento" : "aeiou",
    "sexo" : "aeiou",
    "dataEmissaoIdentidade" : "aeiou",
    "nacionalidade" : "aeiou",
    "email" : "aeiou"
  } ],
  "nomeFantasia" : "aeiou",
  "idProduto" : 123456789,
  "enderecos" : [ {
    "pontoReferencia" : "aeiou",
    "enderecoCorrespondencia" : false,
    "uf" : "aeiou",
    "cidade" : "aeiou",
    "complemento" : "aeiou",
    "numero" : 123,
    "logradouro" : "aeiou",
    "bairro" : "aeiou",
    "id" : 123456789,
    "idTipoEndereco" : 123456789,
    "cep" : "aeiou",
    "pais" : "aeiou"
  } ],
  "inscricaoEstadual" : "aeiou",
  "numeroContaCorrente" : "aeiou",
  "id" : 123456789,
  "nomeImpresso" : "aeiou",
  "razaoSocial" : "aeiou",
  "numeroAgencia" : 123,
  "email" : "aeiou"
}}]
     
     - parameter pessoaPersist: (body) pessoaPersist 

     - returns: RequestBuilder<PessoaJuridicaAprovadaResponse> 
     */
    public class func salvarPessoaJuridicaAprovadaUsingPOSTWithRequestBuilder(pessoaPersist pessoaPersist: PessoaJuridicaAprovadaPersist) -> RequestBuilder<PessoaJuridicaAprovadaResponse> {
        let path = "/api/clientes-pessoas-juridicas"
        let URLString = PierAPI.basePath + path
        
        let parameters = pessoaPersist.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<PessoaJuridicaAprovadaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Cadastro um novo Atendimento do tipo Gen\u00C3\u00A9rico para uma Conta
     
     - parameter idConta: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta a qual o Atendimento est\u00C3\u00A1 associado (optional)
     - parameter conteudoAtendimento: (query) Apresenta as informa\u00C3\u00A7\u00C3\u00B5es que foram utilizadas para consultar, cadastrar ou alterar informa\u00C3\u00A7\u00C3\u00B5es relacionadas ao Atendimento. (optional)
     - parameter detalhesAtendimento: (query) Apresenta os detalhes lan\u00C3\u00A7ados pelo sistema ou pelo Atendente durante relacionados ao Atendimento. (optional)
     - parameter nomeAtendente: (query) Apresenta o nome do Atendente que registrou o Atendimento. (optional)
     - parameter dataAtendimento: (query) Apresenta a data e hora em que o Atendimento foi realizado no formato yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;. (optional)
     - parameter dataAgendamento: (query) Quando utilizado, de acordo com o Tipo de Atendimento, apresenta a data e hora para processamento ou a data e hora para retorno do Atendimento no formato yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;. (optional)
     - parameter dataHoraInicioAtendimento: (query) Apresenta a data e hora em que o Atendimento foi iniciado. Quando utilizado, serve para medir a performance dos Atendimentos no formato yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;. (optional)
     - parameter dataHoraFimAtendimento: (query) Apresenta a data e hora em que o Atendimento foi iniciado. Quando utilizado, serve para medir a performance dos Atendimentos no formato yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;. (optional)
     - parameter flagFilaFraude: (query) Flag fila fraude (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST1(idConta idConta: Int?, conteudoAtendimento: String?, detalhesAtendimento: String?, nomeAtendente: String?, dataAtendimento: String?, dataAgendamento: String?, dataHoraInicioAtendimento: String?, dataHoraFimAtendimento: String?, flagFilaFraude: Int?, completion: ((data: AtendimentoClienteResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST1WithRequestBuilder(idConta: idConta, conteudoAtendimento: conteudoAtendimento, detalhesAtendimento: detalhesAtendimento, nomeAtendente: nomeAtendente, dataAtendimento: dataAtendimento, dataAgendamento: dataAgendamento, dataHoraInicioAtendimento: dataHoraInicioAtendimento, dataHoraFimAtendimento: dataHoraFimAtendimento, flagFilaFraude: flagFilaFraude).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Cadastro um novo Atendimento do tipo Gen\u00C3\u00A9rico para uma Conta
     
     - POST /api/atendimento-clientes
     - examples: [{contentType=application/json, example={
  "conteudoAtendimento" : "aeiou",
  "idConta" : 123456789,
  "descricaoTipoAtendimento" : "aeiou",
  "dataProcessamento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "dataAgendamento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "flagProcessamento" : 123,
  "dataHoraFimAtendimento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "detalhesAtendimento" : "aeiou",
  "idAtendimento" : 123456789,
  "dataAtendimento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "dataHoraInicioAtendimento" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
  "nomeAtendente" : "aeiou",
  "nomeSistema" : "aeiou",
  "idTipoAtendimento" : 123456789
}}]
     
     - parameter idConta: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta a qual o Atendimento est\u00C3\u00A1 associado (optional)
     - parameter conteudoAtendimento: (query) Apresenta as informa\u00C3\u00A7\u00C3\u00B5es que foram utilizadas para consultar, cadastrar ou alterar informa\u00C3\u00A7\u00C3\u00B5es relacionadas ao Atendimento. (optional)
     - parameter detalhesAtendimento: (query) Apresenta os detalhes lan\u00C3\u00A7ados pelo sistema ou pelo Atendente durante relacionados ao Atendimento. (optional)
     - parameter nomeAtendente: (query) Apresenta o nome do Atendente que registrou o Atendimento. (optional)
     - parameter dataAtendimento: (query) Apresenta a data e hora em que o Atendimento foi realizado no formato yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;. (optional)
     - parameter dataAgendamento: (query) Quando utilizado, de acordo com o Tipo de Atendimento, apresenta a data e hora para processamento ou a data e hora para retorno do Atendimento no formato yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;. (optional)
     - parameter dataHoraInicioAtendimento: (query) Apresenta a data e hora em que o Atendimento foi iniciado. Quando utilizado, serve para medir a performance dos Atendimentos no formato yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;. (optional)
     - parameter dataHoraFimAtendimento: (query) Apresenta a data e hora em que o Atendimento foi iniciado. Quando utilizado, serve para medir a performance dos Atendimentos no formato yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;. (optional)
     - parameter flagFilaFraude: (query) Flag fila fraude (optional)

     - returns: RequestBuilder<AtendimentoClienteResponse> 
     */
    public class func salvarUsingPOST1WithRequestBuilder(idConta idConta: Int?, conteudoAtendimento: String?, detalhesAtendimento: String?, nomeAtendente: String?, dataAtendimento: String?, dataAgendamento: String?, dataHoraInicioAtendimento: String?, dataHoraFimAtendimento: String?, flagFilaFraude: Int?) -> RequestBuilder<AtendimentoClienteResponse> {
        let path = "/api/atendimento-clientes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idConta": idConta,
            "conteudoAtendimento": conteudoAtendimento,
            "detalhesAtendimento": detalhesAtendimento,
            "nomeAtendente": nomeAtendente,
            "dataAtendimento": dataAtendimento,
            "dataAgendamento": dataAgendamento,
            "dataHoraInicioAtendimento": dataHoraInicioAtendimento,
            "dataHoraFimAtendimento": dataHoraFimAtendimento,
            "flagFilaFraude": flagFilaFraude
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<AtendimentoClienteResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o cadastro de um novo Telefone
     
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence. (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST10(idTipoTelefone idTipoTelefone: Int?, idPessoa: Int?, ddd: String?, telefone: String?, ramal: String?, completion: ((data: TelefoneResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST10WithRequestBuilder(idTipoTelefone: idTipoTelefone, idPessoa: idPessoa, ddd: ddd, telefone: telefone, ramal: ramal).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de um novo Telefone
     
     - POST /api/telefones
     - Este m\u00C3\u00A9todo permite que seja cadastrado um novo Telefone na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "telefone" : "aeiou",
  "ddd" : "aeiou",
  "idTipoTelefone" : 123456789,
  "id" : 123456789,
  "ramal" : "aeiou",
  "status" : 123
}}]
     
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence. (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)

     - returns: RequestBuilder<TelefoneResponse> 
     */
    public class func salvarUsingPOST10WithRequestBuilder(idTipoTelefone idTipoTelefone: Int?, idPessoa: Int?, ddd: String?, telefone: String?, ramal: String?) -> RequestBuilder<TelefoneResponse> {
        let path = "/api/telefones"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idTipoTelefone": idTipoTelefone,
            "idPessoa": idPessoa,
            "ddd": ddd,
            "telefone": telefone,
            "ramal": ramal
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<TelefoneResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o cadastro de um novo Endere\u00C3\u00A7o
     
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id) (optional)
     - parameter idTipoEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id) (optional)
     - parameter cep: (query) Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro &#39;58800000&#39; (optional)
     - parameter logradouro: (query) Apresenta o nome do Logradouro (optional)
     - parameter numero: (query) Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o (optional)
     - parameter complemento: (query) Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o (optional)
     - parameter pontoReferencia: (query) Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o (optional)
     - parameter bairro: (query) Apresenta nome do bairro (optional)
     - parameter cidade: (query) Apresenta nome da cidade (optional)
     - parameter uf: (query) Apresenta sigla da Unidade Federativa (optional)
     - parameter pais: (query) Apresenta nome do Pais (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST4(idPessoa idPessoa: Int?, idTipoEndereco: Int?, cep: String?, logradouro: String?, numero: Int?, complemento: String?, pontoReferencia: String?, bairro: String?, cidade: String?, uf: String?, pais: String?, completion: ((data: EnderecoResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST4WithRequestBuilder(idPessoa: idPessoa, idTipoEndereco: idTipoEndereco, cep: cep, logradouro: logradouro, numero: numero, complemento: complemento, pontoReferencia: pontoReferencia, bairro: bairro, cidade: cidade, uf: uf, pais: pais).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de um novo Endere\u00C3\u00A7o
     
     - POST /api/enderecos
     - Este m\u00C3\u00A9todo permite que seja cadastrado um novo Endere\u00C3\u00A7o na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "pontoReferencia" : "aeiou",
  "cidade" : "aeiou",
  "numero" : 123,
  "bairro" : "aeiou",
  "idTipoEndereco" : 123456789,
  "cep" : "aeiou",
  "pais" : "aeiou",
  "idPessoa" : 123456789,
  "uf" : "aeiou",
  "complemento" : "aeiou",
  "logradouro" : "aeiou",
  "dataInclusao" : "aeiou",
  "dataUltimaAtualizacao" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id) (optional)
     - parameter idTipoEndereco: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id) (optional)
     - parameter cep: (query) Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro &#39;58800000&#39; (optional)
     - parameter logradouro: (query) Apresenta o nome do Logradouro (optional)
     - parameter numero: (query) Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o (optional)
     - parameter complemento: (query) Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o (optional)
     - parameter pontoReferencia: (query) Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o (optional)
     - parameter bairro: (query) Apresenta nome do bairro (optional)
     - parameter cidade: (query) Apresenta nome da cidade (optional)
     - parameter uf: (query) Apresenta sigla da Unidade Federativa (optional)
     - parameter pais: (query) Apresenta nome do Pais (optional)

     - returns: RequestBuilder<EnderecoResponse> 
     */
    public class func salvarUsingPOST4WithRequestBuilder(idPessoa idPessoa: Int?, idTipoEndereco: Int?, cep: String?, logradouro: String?, numero: Int?, complemento: String?, pontoReferencia: String?, bairro: String?, cidade: String?, uf: String?, pais: String?) -> RequestBuilder<EnderecoResponse> {
        let path = "/api/enderecos"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idPessoa": idPessoa,
            "idTipoEndereco": idTipoEndereco,
            "cep": cep,
            "logradouro": logradouro,
            "numero": numero,
            "complemento": complemento,
            "pontoReferencia": pontoReferencia,
            "bairro": bairro,
            "cidade": cidade,
            "uf": uf,
            "pais": pais
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<EnderecoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Salvar os detalhes de uma determinada Pessoa
     
     - parameter idPessoa: (query) Apresenta o c\u00C3\u00B3digo identificador da pessoa (optional)
     - parameter nomeMae: (query) Apresenta o nome da m\u00C3\u00A3e da pessoa fisica (optional)
     - parameter idEstadoCivil: (query) Id Estado civil da pessoa fisica (optional)
     - parameter profissao: (query) Profiss\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNaturezaOcupacao: (query) Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNacionalidade: (query) Id Nacionalidade da pessoa fisica (optional)
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia. (optional)
     - parameter numeroContaCorrente: (query) N\u00C3\u00BAmero da conta corrente. (optional)
     - parameter email: (query) Email da pessoa fisica (optional)
     - parameter nomeEmpresa: (query) Nome que deve ser impresso no cart\u00C3\u00A3o (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST7(idPessoa idPessoa: Int?, nomeMae: String?, idEstadoCivil: Int?, profissao: String?, idNaturezaOcupacao: Int?, idNacionalidade: Int?, numeroAgencia: Int?, numeroContaCorrente: String?, email: String?, nomeEmpresa: String?, completion: ((data: PessoaDetalheResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST7WithRequestBuilder(idPessoa: idPessoa, nomeMae: nomeMae, idEstadoCivil: idEstadoCivil, profissao: profissao, idNaturezaOcupacao: idNaturezaOcupacao, idNacionalidade: idNacionalidade, numeroAgencia: numeroAgencia, numeroContaCorrente: numeroContaCorrente, email: email, nomeEmpresa: nomeEmpresa).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Salvar os detalhes de uma determinada Pessoa
     
     - POST /api/pessoas-detalhes
     - Este m\u00C3\u00A9todo permite que seja incluido na base do emissor os detalhes de uma determinada Pessoa.
     - examples: [{contentType=application/json, example={
  "idNacionalidade" : 123456789,
  "idPessoa" : 123456789,
  "idEstadoCivil" : 123456789,
  "nomeEmpresa" : "aeiou",
  "idNaturezaOcupacao" : 123456789,
  "numeroContaCorrente" : "aeiou",
  "profissao" : "aeiou",
  "numeroAgencia" : 123,
  "nomeMae" : "aeiou",
  "email" : "aeiou"
}}]
     
     - parameter idPessoa: (query) Apresenta o c\u00C3\u00B3digo identificador da pessoa (optional)
     - parameter nomeMae: (query) Apresenta o nome da m\u00C3\u00A3e da pessoa fisica (optional)
     - parameter idEstadoCivil: (query) Id Estado civil da pessoa fisica (optional)
     - parameter profissao: (query) Profiss\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNaturezaOcupacao: (query) Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica (optional)
     - parameter idNacionalidade: (query) Id Nacionalidade da pessoa fisica (optional)
     - parameter numeroAgencia: (query) N\u00C3\u00BAmero da ag\u00C3\u00AAncia. (optional)
     - parameter numeroContaCorrente: (query) N\u00C3\u00BAmero da conta corrente. (optional)
     - parameter email: (query) Email da pessoa fisica (optional)
     - parameter nomeEmpresa: (query) Nome que deve ser impresso no cart\u00C3\u00A3o (optional)

     - returns: RequestBuilder<PessoaDetalheResponse> 
     */
    public class func salvarUsingPOST7WithRequestBuilder(idPessoa idPessoa: Int?, nomeMae: String?, idEstadoCivil: Int?, profissao: String?, idNaturezaOcupacao: Int?, idNacionalidade: Int?, numeroAgencia: Int?, numeroContaCorrente: String?, email: String?, nomeEmpresa: String?) -> RequestBuilder<PessoaDetalheResponse> {
        let path = "/api/pessoas-detalhes"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idPessoa": idPessoa,
            "nomeMae": nomeMae,
            "idEstadoCivil": idEstadoCivil,
            "profissao": profissao,
            "idNaturezaOcupacao": idNaturezaOcupacao,
            "idNacionalidade": idNacionalidade,
            "numeroAgencia": numeroAgencia,
            "numeroContaCorrente": numeroContaCorrente,
            "email": email,
            "nomeEmpresa": nomeEmpresa
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PessoaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o cadastro de um nova Pessoa
     
     - parameter nome: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. 
     - parameter tipo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica). 
     - parameter cpf: (query) N\u00C3\u00BAmero do CPF, quando PF. (optional)
     - parameter cnpj: (query) N\u00C3\u00BAmero do CNPJ, quando PJ. (optional)
     - parameter dataNascimento: (query) Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd. (optional)
     - parameter sexo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00C3\u00A3o Especificado). (optional)
     - parameter numeroIdentidade: (query) N\u00C3\u00BAmero da Identidade. (optional)
     - parameter orgaoExpedidorIdentidade: (query) Org\u00C3\u00A3o expedidor do Identidade. (optional)
     - parameter unidadeFederativaIdentidade: (query) Sigla da Unidade Federativa de onde foi expedido a Identidade (optional)
     - parameter dataEmissaoIdentidade: (query) Data emiss\u00C3\u00A3o da Identidade. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST8(nome nome: String, tipo: String, cpf: String?, cnpj: String?, dataNascimento: String?, sexo: String?, numeroIdentidade: String?, orgaoExpedidorIdentidade: String?, unidadeFederativaIdentidade: String?, dataEmissaoIdentidade: String?, completion: ((data: PessoaResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST8WithRequestBuilder(nome: nome, tipo: tipo, cpf: cpf, cnpj: cnpj, dataNascimento: dataNascimento, sexo: sexo, numeroIdentidade: numeroIdentidade, orgaoExpedidorIdentidade: orgaoExpedidorIdentidade, unidadeFederativaIdentidade: unidadeFederativaIdentidade, dataEmissaoIdentidade: dataEmissaoIdentidade).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de um nova Pessoa
     
     - POST /api/pessoas
     - Este m\u00C3\u00A9todo permite que seja cadastrado uma nova Pessoa na base de dados do Emissor.
     - examples: [{contentType=application/json, example={
  "numeroIdentidade" : "aeiou",
  "tipo" : "aeiou",
  "cpf" : "aeiou",
  "unidadeFederativaIdentidade" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "cnpj" : "aeiou",
  "dataNascimento" : "aeiou",
  "sexo" : "aeiou",
  "dataEmissaoIdentidade" : "aeiou",
  "orgaoExpedidorIdentidade" : "aeiou"
}}]
     
     - parameter nome: (query) Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;. 
     - parameter tipo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica). 
     - parameter cpf: (query) N\u00C3\u00BAmero do CPF, quando PF. (optional)
     - parameter cnpj: (query) N\u00C3\u00BAmero do CNPJ, quando PJ. (optional)
     - parameter dataNascimento: (query) Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd. (optional)
     - parameter sexo: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00C3\u00A3o Especificado). (optional)
     - parameter numeroIdentidade: (query) N\u00C3\u00BAmero da Identidade. (optional)
     - parameter orgaoExpedidorIdentidade: (query) Org\u00C3\u00A3o expedidor do Identidade. (optional)
     - parameter unidadeFederativaIdentidade: (query) Sigla da Unidade Federativa de onde foi expedido a Identidade (optional)
     - parameter dataEmissaoIdentidade: (query) Data emiss\u00C3\u00A3o da Identidade. (optional)

     - returns: RequestBuilder<PessoaResponse> 
     */
    public class func salvarUsingPOST8WithRequestBuilder(nome nome: String, tipo: String, cpf: String?, cnpj: String?, dataNascimento: String?, sexo: String?, numeroIdentidade: String?, orgaoExpedidorIdentidade: String?, unidadeFederativaIdentidade: String?, dataEmissaoIdentidade: String?) -> RequestBuilder<PessoaResponse> {
        let path = "/api/pessoas"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "nome": nome,
            "tipo": tipo,
            "cpf": cpf,
            "cnpj": cnpj,
            "dataNascimento": dataNascimento,
            "sexo": sexo,
            "numeroIdentidade": numeroIdentidade,
            "orgaoExpedidorIdentidade": orgaoExpedidorIdentidade,
            "unidadeFederativaIdentidade": unidadeFederativaIdentidade,
            "dataEmissaoIdentidade": dataEmissaoIdentidade
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PessoaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

}
