//
// TelefoneAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class TelefoneAPI: APIBase {
    /**
     
     Apresenta os dados de um determinado Telefone
     
     - parameter idTelefone: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET6(idTelefone idTelefone: Int, completion: ((data: Telefone?, error: ErrorType?) -> Void)) {
        consultarUsingGET6WithRequestBuilder(idTelefone: idTelefone).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Apresenta os dados de um determinado Telefone
     
     - GET /api/telefones/{idTelefone}
     - Este m\u00C3\u00A9todo permite consultar um determinado Telefone a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "telefone" : "aeiou",
  "ddd" : "aeiou",
  "idTipoTelefone" : 123456789,
  "id" : 123456789,
  "ramal" : "aeiou",
  "status" : 123
}}]
     
     - parameter idTelefone: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). 

     - returns: RequestBuilder<Telefone> 
     */
    public class func consultarUsingGET6WithRequestBuilder(idTelefone idTelefone: Int) -> RequestBuilder<Telefone> {
        var path = "/api/telefones/{idTelefone}"
        path = path.stringByReplacingOccurrencesOfString("{idTelefone}", withString: "\(idTelefone)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Telefone>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Lista os Telefones cadastrados no Emissor
     
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). (optional)
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence. (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter status: (query) Apresenta o Status do Telefone, onde: &#39;0&#39;: Inativo e &#39;1&#39;: Ativo (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET7(id id: Int?, idTipoTelefone: Int?, idPessoa: Int?, ddd: String?, telefone: String?, ramal: String?, status: Int?, page: Int?, limit: Int?, completion: ((data: PageTelefones?, error: ErrorType?) -> Void)) {
        listarUsingGET7WithRequestBuilder(id: id, idTipoTelefone: idTipoTelefone, idPessoa: idPessoa, ddd: ddd, telefone: telefone, ramal: ramal, status: status, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Telefones cadastrados no Emissor
     
     - GET /api/telefones
     - Este m\u00C3\u00A9todo permite que sejam listados os Telefones existentes na base de dados do Emissor.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "idPessoa" : 123456789,
    "telefone" : "aeiou",
    "ddd" : "aeiou",
    "idTipoTelefone" : 123456789,
    "id" : 123456789,
    "ramal" : "aeiou",
    "status" : 123
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). (optional)
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence. (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter status: (query) Apresenta o Status do Telefone, onde: &#39;0&#39;: Inativo e &#39;1&#39;: Ativo (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)

     - returns: RequestBuilder<PageTelefones> 
     */
    public class func listarUsingGET7WithRequestBuilder(id id: Int?, idTipoTelefone: Int?, idPessoa: Int?, ddd: String?, telefone: String?, ramal: String?, status: Int?, page: Int?, limit: Int?) -> RequestBuilder<PageTelefones> {
        let path = "/api/telefones"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "id": id,
            "idTipoTelefone": idTipoTelefone,
            "idPessoa": idPessoa,
            "ddd": ddd,
            "telefone": telefone,
            "ramal": ramal,
            "status": status,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageTelefones>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Realiza o cadastro de um novo Telefone
     
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence. (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST2(idTipoTelefone idTipoTelefone: Int?, idPessoa: Int?, ddd: String?, telefone: String?, ramal: String?, completion: ((data: Telefone?, error: ErrorType?) -> Void)) {
        salvarUsingPOST2WithRequestBuilder(idTipoTelefone: idTipoTelefone, idPessoa: idPessoa, ddd: ddd, telefone: telefone, ramal: ramal).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Realiza o cadastro de um novo Telefone
     
     - POST /api/telefones
     - Este m\u00C3\u00A9todo permite que seja cadastrado um novo Telefone na base de dados do Emissor.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "idPessoa" : 123456789,
  "telefone" : "aeiou",
  "ddd" : "aeiou",
  "idTipoTelefone" : 123456789,
  "id" : 123456789,
  "ramal" : "aeiou",
  "status" : 123
}}]
     
     - parameter idTipoTelefone: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id). (optional)
     - parameter idPessoa: (query) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence. (optional)
     - parameter ddd: (query) C\u00C3\u00B3digo DDD do telefone (id). (optional)
     - parameter telefone: (query) N\u00C3\u00BAmero do telefone. (optional)
     - parameter ramal: (query) N\u00C3\u00BAmero do ramal. (optional)

     - returns: RequestBuilder<Telefone> 
     */
    public class func salvarUsingPOST2WithRequestBuilder(idTipoTelefone idTipoTelefone: Int?, idPessoa: Int?, ddd: String?, telefone: String?, ramal: String?) -> RequestBuilder<Telefone> {
        let path = "/api/telefones"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idTipoTelefone": idTipoTelefone,
            "idPessoa": idPessoa,
            "ddd": ddd,
            "telefone": telefone,
            "ramal": ramal
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Telefone>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

}
