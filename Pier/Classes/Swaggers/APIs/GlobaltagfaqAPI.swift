//
// GlobaltagfaqAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class GlobaltagfaqAPI: APIBase {
    /**
     
     {{{faq_resource_adicionar}}}
     
     - parameter pergunta: (query) {{{faq_persist_pergunta_value}}} 
     - parameter resposta: (query) {{{faq_persist_resposta_value}}} 
     - parameter relevancia: (query) {{{faq_persist_relevancia_value}}} (optional)
     - parameter plataforma: (query) {{{faq_persist_plataforma_value}}} (optional)
     - parameter categoria: (query) {{{faq_persist_categoria_value}}} (optional)
     - parameter status: (query) {{{faq_persist_status_value}}} (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func adicionarUsingPOST(pergunta pergunta: String, resposta: String, relevancia: Int?, plataforma: String?, categoria: String?, status: String?, completion: ((data: FaqResponse?, error: ErrorType?) -> Void)) {
        adicionarUsingPOSTWithRequestBuilder(pergunta: pergunta, resposta: resposta, relevancia: relevancia, plataforma: plataforma, categoria: categoria, status: status).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{faq_resource_adicionar}}}
     
     - POST /api/faqs
     - {{{faq_resource_adicionar_notes}}}
     - examples: [{contentType=application/json, example={
  "pergunta" : "aeiou",
  "resposta" : "aeiou",
  "plataforma" : "aeiou",
  "categoria" : "aeiou",
  "relevancia" : 123,
  "id" : 123456789,
  "status" : "aeiou"
}}]
     
     - parameter pergunta: (query) {{{faq_persist_pergunta_value}}} 
     - parameter resposta: (query) {{{faq_persist_resposta_value}}} 
     - parameter relevancia: (query) {{{faq_persist_relevancia_value}}} (optional)
     - parameter plataforma: (query) {{{faq_persist_plataforma_value}}} (optional)
     - parameter categoria: (query) {{{faq_persist_categoria_value}}} (optional)
     - parameter status: (query) {{{faq_persist_status_value}}} (optional)

     - returns: RequestBuilder<FaqResponse> 
     */
    public class func adicionarUsingPOSTWithRequestBuilder(pergunta pergunta: String, resposta: String, relevancia: Int?, plataforma: String?, categoria: String?, status: String?) -> RequestBuilder<FaqResponse> {
        let path = "/api/faqs"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "pergunta": pergunta,
            "resposta": resposta,
            "relevancia": relevancia,
            "plataforma": plataforma,
            "categoria": categoria,
            "status": status
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<FaqResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     {{{faq_resource_alterar}}}
     
     - parameter id: (path) {{{faq_resource_alterar_param_id_faq}}} 
     - parameter pergunta: (query) {{{faq_persist_pergunta_value}}} 
     - parameter resposta: (query) {{{faq_persist_resposta_value}}} 
     - parameter relevancia: (query) {{{faq_persist_relevancia_value}}} (optional)
     - parameter plataforma: (query) {{{faq_persist_plataforma_value}}} (optional)
     - parameter categoria: (query) {{{faq_persist_categoria_value}}} (optional)
     - parameter status: (query) {{{faq_persist_status_value}}} (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT7(id id: Int, pergunta: String, resposta: String, relevancia: Int?, plataforma: String?, categoria: String?, status: String?, completion: ((data: FaqResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT7WithRequestBuilder(id: id, pergunta: pergunta, resposta: resposta, relevancia: relevancia, plataforma: plataforma, categoria: categoria, status: status).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{faq_resource_alterar}}}
     
     - PUT /api/faqs/{id}
     - {{{faq_resource_alterar_notes}}}
     - examples: [{contentType=application/json, example={
  "pergunta" : "aeiou",
  "resposta" : "aeiou",
  "plataforma" : "aeiou",
  "categoria" : "aeiou",
  "relevancia" : 123,
  "id" : 123456789,
  "status" : "aeiou"
}}]
     
     - parameter id: (path) {{{faq_resource_alterar_param_id_faq}}} 
     - parameter pergunta: (query) {{{faq_persist_pergunta_value}}} 
     - parameter resposta: (query) {{{faq_persist_resposta_value}}} 
     - parameter relevancia: (query) {{{faq_persist_relevancia_value}}} (optional)
     - parameter plataforma: (query) {{{faq_persist_plataforma_value}}} (optional)
     - parameter categoria: (query) {{{faq_persist_categoria_value}}} (optional)
     - parameter status: (query) {{{faq_persist_status_value}}} (optional)

     - returns: RequestBuilder<FaqResponse> 
     */
    public class func alterarUsingPUT7WithRequestBuilder(id id: Int, pergunta: String, resposta: String, relevancia: Int?, plataforma: String?, categoria: String?, status: String?) -> RequestBuilder<FaqResponse> {
        var path = "/api/faqs/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "pergunta": pergunta,
            "resposta": resposta,
            "relevancia": relevancia,
            "plataforma": plataforma,
            "categoria": categoria,
            "status": status
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<FaqResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     {{{faq_resource_consultar}}}
     
     - parameter id: (path) {{{faq_resource_consultar_param_id_faq}}} 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET20(id id: Int, completion: ((data: FaqResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET20WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{faq_resource_consultar}}}
     
     - GET /api/faqs/{id}
     - {{{faq_resource_consultar_notes}}}
     - examples: [{contentType=application/json, example={
  "pergunta" : "aeiou",
  "resposta" : "aeiou",
  "plataforma" : "aeiou",
  "categoria" : "aeiou",
  "relevancia" : 123,
  "id" : 123456789,
  "status" : "aeiou"
}}]
     
     - parameter id: (path) {{{faq_resource_consultar_param_id_faq}}} 

     - returns: RequestBuilder<FaqResponse> 
     */
    public class func consultarUsingGET20WithRequestBuilder(id id: Int) -> RequestBuilder<FaqResponse> {
        var path = "/api/faqs/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<FaqResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     {{{faq_resource_listar}}}
     
     - parameter sort: (query) {{{global_menssagem_sort_sort}}} (optional)
     - parameter page: (query) {{{global_menssagem_sort_page_value}}} (optional)
     - parameter limit: (query) {{{global_menssagem_sort_limit}}} (optional)
     - parameter idFaq: (query) {{{faq_request_id_faq_value}}} (optional)
     - parameter pergunta: (query) {{{faq_request_pergunta_value}}} (optional)
     - parameter resposta: (query) {{{faq_request_resposta_value}}} (optional)
     - parameter relevancia: (query) {{{faq_request_relevancia_value}}} (optional)
     - parameter plataforma: (query) {{{faq_request_plataforma_value}}} (optional)
     - parameter categoria: (query) {{{faq_request_categoria_value}}} (optional)
     - parameter status: (query) {{{faq_request_status_value}}} (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET26(sort sort: [String]?, page: Int?, limit: Int?, idFaq: Int?, pergunta: String?, resposta: String?, relevancia: Int?, plataforma: String?, categoria: String?, status: String?, completion: ((data: PageFaqResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET26WithRequestBuilder(sort: sort, page: page, limit: limit, idFaq: idFaq, pergunta: pergunta, resposta: resposta, relevancia: relevancia, plataforma: plataforma, categoria: categoria, status: status).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     {{{faq_resource_listar}}}
     
     - GET /api/faqs
     - {{{faq_resource_listar_notes}}}
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "pergunta" : "aeiou",
    "resposta" : "aeiou",
    "plataforma" : "aeiou",
    "categoria" : "aeiou",
    "relevancia" : 123,
    "id" : 123456789,
    "status" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) {{{global_menssagem_sort_sort}}} (optional)
     - parameter page: (query) {{{global_menssagem_sort_page_value}}} (optional)
     - parameter limit: (query) {{{global_menssagem_sort_limit}}} (optional)
     - parameter idFaq: (query) {{{faq_request_id_faq_value}}} (optional)
     - parameter pergunta: (query) {{{faq_request_pergunta_value}}} (optional)
     - parameter resposta: (query) {{{faq_request_resposta_value}}} (optional)
     - parameter relevancia: (query) {{{faq_request_relevancia_value}}} (optional)
     - parameter plataforma: (query) {{{faq_request_plataforma_value}}} (optional)
     - parameter categoria: (query) {{{faq_request_categoria_value}}} (optional)
     - parameter status: (query) {{{faq_request_status_value}}} (optional)

     - returns: RequestBuilder<PageFaqResponse> 
     */
    public class func listarUsingGET26WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, idFaq: Int?, pergunta: String?, resposta: String?, relevancia: Int?, plataforma: String?, categoria: String?, status: String?) -> RequestBuilder<PageFaqResponse> {
        let path = "/api/faqs"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "idFaq": idFaq,
            "pergunta": pergunta,
            "resposta": resposta,
            "relevancia": relevancia,
            "plataforma": plataforma,
            "categoria": categoria,
            "status": status
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageFaqResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

}
