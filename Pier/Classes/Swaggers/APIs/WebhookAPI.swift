//
// WebhookAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class WebhookAPI: APIBase {
    /**
     
     Alterar Webhook
     
     - parameter id: (path) C\u00C3\u00B3digo identificador do Webhook 
     - parameter tipoEvento: (query) TipoEvento a ser chamado pelo WebHook 
     - parameter url: (query) URL que a ser consumida pelo WebHook 
     - parameter status: (query) Status (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func alterarUsingPUT22(id id: Int, tipoEvento: String, url: String, status: String?, completion: ((data: WebHookResponse?, error: ErrorType?) -> Void)) {
        alterarUsingPUT22WithRequestBuilder(id: id, tipoEvento: tipoEvento, url: url, status: status).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Alterar Webhook
     
     - PUT /api/webhooks/{id}
     - Este m\u00C3\u00A9todo permite que seja modificado um webhooks j\u00C3\u00A1 cadastrado
     - examples: [{contentType=application/json, example={
  "tipoEvento" : "aeiou",
  "id" : 123456789,
  "metodo" : "aeiou",
  "url" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo identificador do Webhook 
     - parameter tipoEvento: (query) TipoEvento a ser chamado pelo WebHook 
     - parameter url: (query) URL que a ser consumida pelo WebHook 
     - parameter status: (query) Status (optional)

     - returns: RequestBuilder<WebHookResponse> 
     */
    public class func alterarUsingPUT22WithRequestBuilder(id id: Int, tipoEvento: String, url: String, status: String?) -> RequestBuilder<WebHookResponse> {
        var path = "/api/webhooks/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "status": status,
            "tipoEvento": tipoEvento,
            "url": url
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<WebHookResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Consultar Webhook
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Webhook (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarUsingGET44(id id: Int, completion: ((data: WebHookResponse?, error: ErrorType?) -> Void)) {
        consultarUsingGET44WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consultar Webhook
     
     - GET /api/webhooks/{id}
     - Este m\u00C3\u00A9todo permite que sejam consultado um webhook do emissor atrav\u00C3\u00A9s de um id especifico
     - examples: [{contentType=application/json, example={
  "tipoEvento" : "aeiou",
  "id" : 123456789,
  "metodo" : "aeiou",
  "url" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Webhook (id). 

     - returns: RequestBuilder<WebHookResponse> 
     */
    public class func consultarUsingGET44WithRequestBuilder(id id: Int) -> RequestBuilder<WebHookResponse> {
        var path = "/api/webhooks/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<WebHookResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Lista os Webhooks
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) Id do WebHook (optional)
     - parameter tipoEvento: (query) TipoEvento a ser chamado pelo WebHook (optional)
     - parameter metodo: (query) M\u00C3\u00A9todo que a ser chamado pelo WebHook (optional)
     - parameter url: (query) URL que a ser consumida pelo WebHook (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarUsingGET53(sort sort: [String]?, page: Int?, limit: Int?, id: Int?, tipoEvento: String?, metodo: String?, url: String?, completion: ((data: PageWebHookResponse?, error: ErrorType?) -> Void)) {
        listarUsingGET53WithRequestBuilder(sort: sort, page: page, limit: limit, id: id, tipoEvento: tipoEvento, metodo: metodo, url: url).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Lista os Webhooks
     
     - GET /api/webhooks
     - Este m\u00C3\u00A9todo permite que sejam listados os webhooks existentes
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "tipoEvento" : "aeiou",
    "id" : 123456789,
    "metodo" : "aeiou",
    "url" : "aeiou",
    "status" : "aeiou"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter id: (query) Id do WebHook (optional)
     - parameter tipoEvento: (query) TipoEvento a ser chamado pelo WebHook (optional)
     - parameter metodo: (query) M\u00C3\u00A9todo que a ser chamado pelo WebHook (optional)
     - parameter url: (query) URL que a ser consumida pelo WebHook (optional)

     - returns: RequestBuilder<PageWebHookResponse> 
     */
    public class func listarUsingGET53WithRequestBuilder(sort sort: [String]?, page: Int?, limit: Int?, id: Int?, tipoEvento: String?, metodo: String?, url: String?) -> RequestBuilder<PageWebHookResponse> {
        let path = "/api/webhooks"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "id": id,
            "tipoEvento": tipoEvento,
            "metodo": metodo,
            "url": url
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageWebHookResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Salvar Webhook
     
     - parameter tipoEvento: (query) TipoEvento a ser chamado pelo WebHook 
     - parameter url: (query) URL que a ser consumida pelo WebHook 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func salvarUsingPOST30(tipoEvento tipoEvento: String, url: String, completion: ((data: WebHookResponse?, error: ErrorType?) -> Void)) {
        salvarUsingPOST30WithRequestBuilder(tipoEvento: tipoEvento, url: url).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Salvar Webhook
     
     - POST /api/webhooks
     - Este m\u00C3\u00A9todo permite que seja adicionado um novo webhook
     - examples: [{contentType=application/json, example={
  "tipoEvento" : "aeiou",
  "id" : 123456789,
  "metodo" : "aeiou",
  "url" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter tipoEvento: (query) TipoEvento a ser chamado pelo WebHook 
     - parameter url: (query) URL que a ser consumida pelo WebHook 

     - returns: RequestBuilder<WebHookResponse> 
     */
    public class func salvarUsingPOST30WithRequestBuilder(tipoEvento tipoEvento: String, url: String) -> RequestBuilder<WebHookResponse> {
        let path = "/api/webhooks"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "tipoEvento": tipoEvento,
            "url": url
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<WebHookResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

}
