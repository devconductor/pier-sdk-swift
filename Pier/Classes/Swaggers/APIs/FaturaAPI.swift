//
// FaturaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class FaturaAPI: APIBase {
    /**
     
     Consulta fatura de um cliente
     
     - parameter dataVencimento: (path) Data Vencimento 
     - parameter idConta: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarFaturaUsingGET1(dataVencimento dataVencimento: String, idConta: Int, completion: ((data: FaturaDetalheResponse?, error: ErrorType?) -> Void)) {
        consultarFaturaUsingGET1WithRequestBuilder(dataVencimento: dataVencimento, idConta: idConta).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Consulta fatura de um cliente
     
     - GET /api/faturas/{dataVencimento}
     - Consulta fatura de um cliente pela data de vencimento.
     - examples: [{contentType=application/json, example={
  "pagamentoEfetuado" : false,
  "idConta" : 123456789,
  "dataVencimentoFatura" : "yyyy-MM-dd",
  "valorPagamentoMinimo" : 1.3579000000000001069366817318950779736042022705078125,
  "saldoAnterior" : 1.3579000000000001069366817318950779736042022705078125,
  "valorTotal" : 1.3579000000000001069366817318950779736042022705078125,
  "lancamentosFaturaResponse" : [ {
    "valorUSD" : 1.3579000000000001069366817318950779736042022705078125,
    "numeroCartaoMascarado" : "aeiou",
    "idMCC" : 123456789,
    "idTipoEvento" : 123456789,
    "descricaoTipoEvento" : "aeiou",
    "idGrupoMCC" : 123456789,
    "flagSolicitouContestacao" : false,
    "quantidadeParcelas" : 123,
    "nomePortador" : "aeiou",
    "complemento" : "aeiou",
    "dataHoraTransacao" : "aeiou",
    "descricaoAbreviada" : "aeiou",
    "valorBRL" : 1.3579000000000001069366817318950779736042022705078125,
    "numeroParcela" : 123,
    "descricaoEstabelecimento" : "aeiou",
    "flagCredito" : false,
    "valorTaxaEmbarque" : 1.3579000000000001069366817318950779736042022705078125,
    "idConta" : 123456789,
    "idEvento" : 123456789,
    "descricaoTipoTransacao" : "aeiou",
    "descricaoGrupoMCC" : "aeiou",
    "nomeEstabelecimento" : "aeiou",
    "idTransacao" : 123456789,
    "nomeFantasiaEstabelecimento" : "aeiou",
    "titular" : false
  } ],
  "situacaoProcessamento" : "aeiou",
  "dataFechamento" : "yyyy-MM-dd",
  "dataVencimentoReal" : "yyyy-MM-dd"
}}]
     
     - parameter dataVencimento: (path) Data Vencimento 
     - parameter idConta: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 

     - returns: RequestBuilder<FaturaDetalheResponse> 
     */
    public class func consultarFaturaUsingGET1WithRequestBuilder(dataVencimento dataVencimento: String, idConta: Int) -> RequestBuilder<FaturaDetalheResponse> {
        var path = "/api/faturas/{dataVencimento}"
        path = path.stringByReplacingOccurrencesOfString("{dataVencimento}", withString: "\(dataVencimento)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idConta": idConta
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<FaturaDetalheResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Listar planos de parcelamento
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter dataVencimentoPadrao: (query) Indica a data de vencimento padr\u00C3\u00A3o das faturas 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func consultarLancamentosFuturosFaturaUsingGET1(id id: Int, dataVencimentoPadrao: String, sort: [String]?, page: Int?, limit: Int?, completion: ((data: PagePlanoParcelamentoResponse?, error: ErrorType?) -> Void)) {
        consultarLancamentosFuturosFaturaUsingGET1WithRequestBuilder(id: id, dataVencimentoPadrao: dataVencimentoPadrao, sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Listar planos de parcelamento
     
     - GET /api/contas/{id}/faturas/planos-parcelamento
     - Lista os planos de parcelamento da fatura de uma conta.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "valorEntrada" : 1.3579000000000001069366817318950779736042022705078125,
    "idConta" : 123456789,
    "nomeCampanha" : "aeiou",
    "statusAdesao" : 123,
    "quantidadeParcelas" : 123,
    "dataVencimentoPadrao" : "yyyy-MM-dd",
    "valorParcela" : 1.3579000000000001069366817318950779736042022705078125,
    "valorTAC" : 1.3579000000000001069366817318950779736042022705078125,
    "valorTotalRefinanciamento" : 1.3579000000000001069366817318950779736042022705078125,
    "dataFechamentoFatura" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "taxaRefinanciamento" : 1.3579000000000001069366817318950779736042022705078125,
    "dataInclusao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "id" : 123456789,
    "comEntrada" : false,
    "dataProcessamentoAdesao" : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
    "custoEfetivoTotal" : 1.3579000000000001069366817318950779736042022705078125,
    "descricaoServicoTipo" : "aeiou",
    "valorTotalFatura" : 1.3579000000000001069366817318950779736042022705078125,
    "valorIOF" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter dataVencimentoPadrao: (query) Indica a data de vencimento padr\u00C3\u00A3o das faturas 
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PagePlanoParcelamentoResponse> 
     */
    public class func consultarLancamentosFuturosFaturaUsingGET1WithRequestBuilder(id id: Int, dataVencimentoPadrao: String, sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PagePlanoParcelamentoResponse> {
        var path = "/api/contas/{id}/faturas/planos-parcelamento"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sort": sort,
            "page": page,
            "limit": limit,
            "dataVencimentoPadrao": dataVencimentoPadrao
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PagePlanoParcelamentoResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Envia 2\u00C2\u00AA via de fatura por E-mail
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter dataVencimento: (path) Data de Vencimento da fatura (yyyy-MM-dd). 
     - parameter email: (query) E-mail para envio da 2\u00C2\u00AA via da fatura, caso n\u00C3\u00A3o seja informado ser\u00C3\u00A1 usado o e-mail cadastrado. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func enviarFaturaEmailUsingPOST(id id: Int, dataVencimento: String, email: String?, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        enviarFaturaEmailUsingPOSTWithRequestBuilder(id: id, dataVencimento: dataVencimento, email: email).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Envia 2\u00C2\u00AA via de fatura por E-mail
     
     - POST /api/contas/{id}/faturas/{dataVencimento}/enviar-email
     - Envia a segunda via da fatura para o e-mail informado/cadastrado.
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter dataVencimento: (path) Data de Vencimento da fatura (yyyy-MM-dd). 
     - parameter email: (query) E-mail para envio da 2\u00C2\u00AA via da fatura, caso n\u00C3\u00A3o seja informado ser\u00C3\u00A1 usado o e-mail cadastrado. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func enviarFaturaEmailUsingPOSTWithRequestBuilder(id id: Int, dataVencimento: String, email: String?) -> RequestBuilder<AnyObject> {
        var path = "/api/contas/{id}/faturas/{dataVencimento}/enviar-email"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{dataVencimento}", withString: "\(dataVencimento)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "email": email
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<AnyObject>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Listar faturas de um cliente.
     
     - parameter idConta: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter situacaoProcessamento: (query) Status do processamento das faturas. Valores possiveis [ABERTA, FECHADA, TODAS]. (optional, default to TODAS)
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listarFaturasUsingGET1(idConta idConta: Int, situacaoProcessamento: String?, sort: [String]?, page: Int?, limit: Int?, completion: ((data: PageFaturaResponse?, error: ErrorType?) -> Void)) {
        listarFaturasUsingGET1WithRequestBuilder(idConta: idConta, situacaoProcessamento: situacaoProcessamento, sort: sort, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Listar faturas de um cliente.
     
     - GET /api/faturas
     - Lista faturas de um cliente.
     - examples: [{contentType=application/json, example={
  "previousPage" : 123,
  "last" : true,
  "hasContent" : true,
  "hasNextPage" : true,
  "nextPage" : 123,
  "content" : [ {
    "pagamentoEfetuado" : false,
    "idConta" : 123456789,
    "dataVencimentoFatura" : "yyyy-MM-dd",
    "valorPagamentoMinimo" : 1.3579000000000001069366817318950779736042022705078125,
    "saldoAnterior" : 1.3579000000000001069366817318950779736042022705078125,
    "valorTotal" : 1.3579000000000001069366817318950779736042022705078125,
    "situacaoProcessamento" : "aeiou",
    "dataFechamento" : "yyyy-MM-dd",
    "dataVencimentoReal" : "yyyy-MM-dd"
  } ],
  "totalElements" : 123456789,
  "number" : 123,
  "firstPage" : true,
  "numberOfElements" : 123,
  "size" : 123,
  "totalPages" : 123,
  "hasPreviousPage" : true,
  "first" : true
}}]
     
     - parameter idConta: (query) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter situacaoProcessamento: (query) Status do processamento das faturas. Valores possiveis [ABERTA, FECHADA, TODAS]. (optional, default to TODAS)
     - parameter sort: (query) Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     - parameter page: (query) P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     - parameter limit: (query) Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)

     - returns: RequestBuilder<PageFaturaResponse> 
     */
    public class func listarFaturasUsingGET1WithRequestBuilder(idConta idConta: Int, situacaoProcessamento: String?, sort: [String]?, page: Int?, limit: Int?) -> RequestBuilder<PageFaturaResponse> {
        let path = "/api/faturas"
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "idConta": idConta,
            "situacaoProcessamento": situacaoProcessamento,
            "sort": sort,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PageFaturaResponse>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Permite visualizar o extrato da fatura em formato PDF
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter dataVencimento: (path) Data de Vencimento da fatura. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func visualizarDocumentoUsingGET(id id: Int, dataVencimento: String, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        visualizarDocumentoUsingGETWithRequestBuilder(id: id, dataVencimento: dataVencimento).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Permite visualizar o extrato da fatura em formato PDF
     
     - GET /api/contas/{id}/faturas/{dataVencimento}/arquivo.pdf
     - Esta opera\u00C3\u00A7\u00C3\u00A3o permite visualizar o extrato da fatura de uma determinada conta, em formato PDF. Quando ela for a fatura ativa, ou seja, a do m\u00C3\u00AAs corrente, o pdf ser\u00C3\u00A1 composto pelo extrato de lan\u00C3\u00A7amentos e pela ficha de compensa\u00C3\u00A7\u00C3\u00A3o banc\u00C3\u00A1ria. Quando for de uma fatura do hist\u00C3\u00B3rico do cliente, o PDF ser\u00C3\u00A1 composto apenas pelo extrato de transa\u00C3\u00A7\u00C3\u00B5es.
     - examples: [{output=none}]
     
     - parameter id: (path) C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). 
     - parameter dataVencimento: (path) Data de Vencimento da fatura. 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func visualizarDocumentoUsingGETWithRequestBuilder(id id: Int, dataVencimento: String) -> RequestBuilder<AnyObject> {
        var path = "/api/contas/{id}/faturas/{dataVencimento}/arquivo.pdf"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{dataVencimento}", withString: "\(dataVencimento)", options: .LiteralSearch, range: nil)
        let URLString = PierAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<AnyObject>.Type = PierAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

}
