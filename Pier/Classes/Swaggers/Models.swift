// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }
                
                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

			// Decoder for [AuthToken]
            Decoders.addDecoder(clazz: [AuthToken].self) { (source: AnyObject) -> [AuthToken] in
                return Decoders.decode(clazz: [AuthToken].self, source: source)
            }
			// Decoder for AuthToken
            Decoders.addDecoder(clazz: AuthToken.self) { (source: AnyObject) -> AuthToken in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AuthToken()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.extraInfo = Decoders.decodeOptional(clazz: ExtraInfo.self, source: sourceDictionary["extraInfo"])
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.owner = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner"])
                instance.status = AuthToken.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                return instance
            }
			

			// Decoder for [BodyAccessToken]
            Decoders.addDecoder(clazz: [BodyAccessToken].self) { (source: AnyObject) -> [BodyAccessToken] in
                return Decoders.decode(clazz: [BodyAccessToken].self, source: source)
            }
			// Decoder for BodyAccessToken
            Decoders.addDecoder(clazz: BodyAccessToken.self) { (source: AnyObject) -> BodyAccessToken in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BodyAccessToken()
                instance.authToken = Decoders.decodeOptional(clazz: AuthToken.self, source: sourceDictionary["AuthToken"])
                instance.action = BodyAccessToken.Action(rawValue: (sourceDictionary["action"] as? String) ?? "") 
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"])
                return instance
            }
			

			// Decoder for [Cartao]
            Decoders.addDecoder(clazz: [Cartao].self) { (source: AnyObject) -> [Cartao] in
                return Decoders.decode(clazz: [Cartao].self, source: source)
            }
			// Decoder for Cartao
            Decoders.addDecoder(clazz: Cartao.self) { (source: AnyObject) -> Cartao in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Cartao()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.idStatusCartao = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idStatusCartao"])
                instance.idEstagioCartao = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idEstagioCartao"])
                instance.idConta = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idConta"])
                instance.idPessoa = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idPessoa"])
                instance.idProduto = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idProduto"])
                instance.tipoPortador = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tipoPortador"])
                instance.numeroCartao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["numeroCartao"])
                instance.nomeImpresso = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nomeImpresso"])
                instance.dataGeracao = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataGeracao"])
                instance.dataStatusCartao = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataStatusCartao"])
                instance.dataEstagioCartao = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataEstagioCartao"])
                instance.dataValidade = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataValidade"])
                instance.dataImpressao = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataImpressao"])
                instance.arquivoImpressao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arquivoImpressao"])
                instance.flagImpressaoOrigemComercial = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["flagImpressaoOrigemComercial"])
                instance.flagProvisorio = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["flagProvisorio"])
                instance.codigoDesbloqueio = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codigoDesbloqueio"])
                return instance
            }
			

			// Decoder for [CartaoImpressao]
            Decoders.addDecoder(clazz: [CartaoImpressao].self) { (source: AnyObject) -> [CartaoImpressao] in
                return Decoders.decode(clazz: [CartaoImpressao].self, source: source)
            }
			// Decoder for CartaoImpressao
            Decoders.addDecoder(clazz: CartaoImpressao.self) { (source: AnyObject) -> CartaoImpressao in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartaoImpressao()
                instance.idConta = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idConta"])
                instance.idPessoa = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idPessoa"])
                instance.idCartao = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idCartao"])
                instance.idBandeira = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idBandeira"])
                instance.idTipoCartao = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idTipoCartao"])
                instance.numeroCartao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["numeroCartao"])
                instance.nomePlastico = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nomePlastico"])
                instance.cvv2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cvv2"])
                instance.dataGeracao = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataGeracao"])
                instance.dataValidade = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataValidade"])
                instance.nomeOrigemComercial = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nomeOrigemComercial"])
                instance.nomeEmpresa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nomeEmpresa"])
                instance.numeroAgencia = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numeroAgencia"])
                instance.numeroContaCorente = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["numeroContaCorente"])
                instance.nomeEmpresaBeneficio = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nomeEmpresaBeneficio"])
                instance.cpf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cpf"])
                instance.tipoPortador = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tipoPortador"])
                instance.nomeEmpregador = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nomeEmpregador"])
                instance.trilha1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trilha1"])
                instance.trilha2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trilha2"])
                instance.trilhaCVV1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trilhaCVV1"])
                instance.trilhaCVV2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trilhaCVV2"])
                return instance
            }
			

			// Decoder for [Conta]
            Decoders.addDecoder(clazz: [Conta].self) { (source: AnyObject) -> [Conta] in
                return Decoders.decode(clazz: [Conta].self, source: source)
            }
			// Decoder for Conta
            Decoders.addDecoder(clazz: Conta.self) { (source: AnyObject) -> Conta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Conta()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.idProduto = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idProduto"])
                instance.idOrigemComercial = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idOrigemComercial"])
                instance.idPessoa = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idPessoa"])
                instance.idStatusConta = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idStatusConta"])
                instance.diaVencimento = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["diaVencimento"])
                instance.melhorDiaCompra = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["melhorDiaCompra"])
                instance.dataStatusConta = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataStatusConta"])
                instance.dataCadastro = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataCadastro"])
                instance.dataUltimaAlteracaoVencimento = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataUltimaAlteracaoVencimento"])
                return instance
            }
			

			// Decoder for [Endereco]
            Decoders.addDecoder(clazz: [Endereco].self) { (source: AnyObject) -> [Endereco] in
                return Decoders.decode(clazz: [Endereco].self, source: source)
            }
			// Decoder for Endereco
            Decoders.addDecoder(clazz: Endereco.self) { (source: AnyObject) -> Endereco in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Endereco()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.idPessoa = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idPessoa"])
                instance.idTipoEndereco = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idTipoEndereco"])
                instance.cep = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cep"])
                instance.logradouro = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logradouro"])
                instance.numero = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numero"])
                instance.complemento = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["complemento"])
                instance.pontoReferencia = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pontoReferencia"])
                instance.bairro = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bairro"])
                instance.cidade = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cidade"])
                instance.uf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uf"])
                instance.pais = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pais"])
                instance.dataInclusao = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataInclusao"])
                instance.dataUltimaAtualizacao = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataUltimaAtualizacao"])
                return instance
            }
			

			// Decoder for [EstagioCartao]
            Decoders.addDecoder(clazz: [EstagioCartao].self) { (source: AnyObject) -> [EstagioCartao] in
                return Decoders.decode(clazz: [EstagioCartao].self, source: source)
            }
			// Decoder for EstagioCartao
            Decoders.addDecoder(clazz: EstagioCartao.self) { (source: AnyObject) -> EstagioCartao in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EstagioCartao()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                return instance
            }
			

			// Decoder for [ExtraInfo]
            Decoders.addDecoder(clazz: [ExtraInfo].self) { (source: AnyObject) -> [ExtraInfo] in
                return Decoders.decode(clazz: [ExtraInfo].self, source: source)
            }
			// Decoder for ExtraInfo
            Decoders.addDecoder(clazz: ExtraInfo.self) { (source: AnyObject) -> ExtraInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExtraInfo()
                instance.idEmissor = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idEmissor"])
                return instance
            }
			

			// Decoder for [HistoricoImpressaoCartao]
            Decoders.addDecoder(clazz: [HistoricoImpressaoCartao].self) { (source: AnyObject) -> [HistoricoImpressaoCartao] in
                return Decoders.decode(clazz: [HistoricoImpressaoCartao].self, source: source)
            }
			// Decoder for HistoricoImpressaoCartao
            Decoders.addDecoder(clazz: HistoricoImpressaoCartao.self) { (source: AnyObject) -> HistoricoImpressaoCartao in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HistoricoImpressaoCartao()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.idCartao = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idCartao"])
                instance.idStatusImpressaoCartao = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idStatusImpressaoCartao"])
                instance.mensagemHistorico = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mensagemHistorico"])
                instance.dataHistorico = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataHistorico"])
                return instance
            }
			

			// Decoder for [LimiteDisponibilidade]
            Decoders.addDecoder(clazz: [LimiteDisponibilidade].self) { (source: AnyObject) -> [LimiteDisponibilidade] in
                return Decoders.decode(clazz: [LimiteDisponibilidade].self, source: source)
            }
			// Decoder for LimiteDisponibilidade
            Decoders.addDecoder(clazz: LimiteDisponibilidade.self) { (source: AnyObject) -> LimiteDisponibilidade in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LimiteDisponibilidade()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.limiteGlobal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["limiteGlobal"])
                instance.limiteCompra = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["limiteCompra"])
                instance.limiteParcelado = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["limiteParcelado"])
                instance.limiteParcelas = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["limiteParcelas"])
                instance.limiteSaqueGlobal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["limiteSaqueGlobal"])
                instance.limiteSaquePeriodo = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["limiteSaquePeriodo"])
                instance.limiteConsignado = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["limiteConsignado"])
                instance.limiteInternacionalCompra = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["limiteInternacionalCompra"])
                instance.limiteInternacionalParcelado = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["limiteInternacionalParcelado"])
                instance.limiteInternacionalParcelas = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["limiteInternacionalParcelas"])
                instance.limiteInternacionalSaqueGlobal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["limiteInternacionalSaqueGlobal"])
                instance.limiteInternacionalSaquePeriodo = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["limiteInternacionalSaquePeriodo"])
                instance.saldoDisponivelGlobal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["saldoDisponivelGlobal"])
                instance.saldoDisponivelCompra = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["saldoDisponivelCompra"])
                instance.saldoDisponivelParcelado = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["saldoDisponivelParcelado"])
                instance.saldoDisponivelParcelas = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["saldoDisponivelParcelas"])
                instance.saldoDisponivelSaque = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["saldoDisponivelSaque"])
                instance.saldoPontosFidelidade = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["saldoPontosFidelidade"])
                instance.saldoDisponivelCompraInternacional = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["saldoDisponivelCompraInternacional"])
                instance.saldoDisponivelSaqueInternacional = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["saldoDisponivelSaqueInternacional"])
                return instance
            }
			

			// Decoder for [ListaProdutos]
            Decoders.addDecoder(clazz: [ListaProdutos].self) { (source: AnyObject) -> [ListaProdutos] in
                return Decoders.decode(clazz: [ListaProdutos].self, source: source)
            }
			// Decoder for ListaProdutos
            Decoders.addDecoder(clazz: ListaProdutos.self) { (source: AnyObject) -> ListaProdutos in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListaProdutos()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [OrigemComercial]
            Decoders.addDecoder(clazz: [OrigemComercial].self) { (source: AnyObject) -> [OrigemComercial] in
                return Decoders.decode(clazz: [OrigemComercial].self, source: source)
            }
			// Decoder for OrigemComercial
            Decoders.addDecoder(clazz: OrigemComercial.self) { (source: AnyObject) -> OrigemComercial in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrigemComercial()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                instance.status = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for [PageCartoes]
            Decoders.addDecoder(clazz: [PageCartoes].self) { (source: AnyObject) -> [PageCartoes] in
                return Decoders.decode(clazz: [PageCartoes].self, source: source)
            }
			// Decoder for PageCartoes
            Decoders.addDecoder(clazz: PageCartoes.self) { (source: AnyObject) -> PageCartoes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageCartoes()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [PageEnderecos]
            Decoders.addDecoder(clazz: [PageEnderecos].self) { (source: AnyObject) -> [PageEnderecos] in
                return Decoders.decode(clazz: [PageEnderecos].self, source: source)
            }
			// Decoder for PageEnderecos
            Decoders.addDecoder(clazz: PageEnderecos.self) { (source: AnyObject) -> PageEnderecos in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageEnderecos()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [PageEstagiosCartoes]
            Decoders.addDecoder(clazz: [PageEstagiosCartoes].self) { (source: AnyObject) -> [PageEstagiosCartoes] in
                return Decoders.decode(clazz: [PageEstagiosCartoes].self, source: source)
            }
			// Decoder for PageEstagiosCartoes
            Decoders.addDecoder(clazz: PageEstagiosCartoes.self) { (source: AnyObject) -> PageEstagiosCartoes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageEstagiosCartoes()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [PageOrigensComerciais]
            Decoders.addDecoder(clazz: [PageOrigensComerciais].self) { (source: AnyObject) -> [PageOrigensComerciais] in
                return Decoders.decode(clazz: [PageOrigensComerciais].self, source: source)
            }
			// Decoder for PageOrigensComerciais
            Decoders.addDecoder(clazz: PageOrigensComerciais.self) { (source: AnyObject) -> PageOrigensComerciais in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageOrigensComerciais()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [PagePessoas]
            Decoders.addDecoder(clazz: [PagePessoas].self) { (source: AnyObject) -> [PagePessoas] in
                return Decoders.decode(clazz: [PagePessoas].self, source: source)
            }
			// Decoder for PagePessoas
            Decoders.addDecoder(clazz: PagePessoas.self) { (source: AnyObject) -> PagePessoas in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PagePessoas()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [PagePortador]
            Decoders.addDecoder(clazz: [PagePortador].self) { (source: AnyObject) -> [PagePortador] in
                return Decoders.decode(clazz: [PagePortador].self, source: source)
            }
			// Decoder for PagePortador
            Decoders.addDecoder(clazz: PagePortador.self) { (source: AnyObject) -> PagePortador in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PagePortador()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [PageStatusCartoes]
            Decoders.addDecoder(clazz: [PageStatusCartoes].self) { (source: AnyObject) -> [PageStatusCartoes] in
                return Decoders.decode(clazz: [PageStatusCartoes].self, source: source)
            }
			// Decoder for PageStatusCartoes
            Decoders.addDecoder(clazz: PageStatusCartoes.self) { (source: AnyObject) -> PageStatusCartoes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageStatusCartoes()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [PageStatusContas]
            Decoders.addDecoder(clazz: [PageStatusContas].self) { (source: AnyObject) -> [PageStatusContas] in
                return Decoders.decode(clazz: [PageStatusContas].self, source: source)
            }
			// Decoder for PageStatusContas
            Decoders.addDecoder(clazz: PageStatusContas.self) { (source: AnyObject) -> PageStatusContas in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageStatusContas()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [PageStatusImpressao]
            Decoders.addDecoder(clazz: [PageStatusImpressao].self) { (source: AnyObject) -> [PageStatusImpressao] in
                return Decoders.decode(clazz: [PageStatusImpressao].self, source: source)
            }
			// Decoder for PageStatusImpressao
            Decoders.addDecoder(clazz: PageStatusImpressao.self) { (source: AnyObject) -> PageStatusImpressao in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageStatusImpressao()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [PageTelefones]
            Decoders.addDecoder(clazz: [PageTelefones].self) { (source: AnyObject) -> [PageTelefones] in
                return Decoders.decode(clazz: [PageTelefones].self, source: source)
            }
			// Decoder for PageTelefones
            Decoders.addDecoder(clazz: PageTelefones.self) { (source: AnyObject) -> PageTelefones in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageTelefones()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [PageTipoTelefones]
            Decoders.addDecoder(clazz: [PageTipoTelefones].self) { (source: AnyObject) -> [PageTipoTelefones] in
                return Decoders.decode(clazz: [PageTipoTelefones].self, source: source)
            }
			// Decoder for PageTipoTelefones
            Decoders.addDecoder(clazz: PageTipoTelefones.self) { (source: AnyObject) -> PageTipoTelefones in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageTipoTelefones()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [PageTiposEndereco]
            Decoders.addDecoder(clazz: [PageTiposEndereco].self) { (source: AnyObject) -> [PageTiposEndereco] in
                return Decoders.decode(clazz: [PageTiposEndereco].self, source: source)
            }
			// Decoder for PageTiposEndereco
            Decoders.addDecoder(clazz: PageTiposEndereco.self) { (source: AnyObject) -> PageTiposEndereco in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageTiposEndereco()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [PageWebHooks]
            Decoders.addDecoder(clazz: [PageWebHooks].self) { (source: AnyObject) -> [PageWebHooks] in
                return Decoders.decode(clazz: [PageWebHooks].self, source: source)
            }
			// Decoder for PageWebHooks
            Decoders.addDecoder(clazz: PageWebHooks.self) { (source: AnyObject) -> PageWebHooks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageWebHooks()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.firstPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstPage"])
                instance.hasContent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasContent"])
                instance.hasNextPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasNextPage"])
                instance.hasPreviousPage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPreviousPage"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nextPage"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.previousPage = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["previousPage"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [Pessoa]
            Decoders.addDecoder(clazz: [Pessoa].self) { (source: AnyObject) -> [Pessoa] in
                return Decoders.decode(clazz: [Pessoa].self, source: source)
            }
			// Decoder for Pessoa
            Decoders.addDecoder(clazz: Pessoa.self) { (source: AnyObject) -> Pessoa in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Pessoa()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                instance.tipo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tipo"])
                instance.cpf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cpf"])
                instance.cnpj = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cnpj"])
                instance.dataNascimento = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataNascimento"])
                instance.sexo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sexo"])
                return instance
            }
			

			// Decoder for [Portador]
            Decoders.addDecoder(clazz: [Portador].self) { (source: AnyObject) -> [Portador] in
                return Decoders.decode(clazz: [Portador].self, source: source)
            }
			// Decoder for Portador
            Decoders.addDecoder(clazz: Portador.self) { (source: AnyObject) -> Portador in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Portador()
                instance.idConta = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idConta"])
                instance.idProduto = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idProduto"])
                instance.idPessoa = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idPessoa"])
                instance.idParentesco = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idParentesco"])
                instance.tipoPortador = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tipoPortador"])
                instance.nomeImpresso = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nomeImpresso"])
                instance.idImagem = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idImagem"])
                instance.idTipoCartao = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idTipoCartao"])
                instance.flagAtivo = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["flagAtivo"])
                instance.dataCadastroPortador = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataCadastroPortador"])
                instance.dataCancelamentoPortador = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataCancelamentoPortador"])
                return instance
            }
			

			// Decoder for [Produto]
            Decoders.addDecoder(clazz: [Produto].self) { (source: AnyObject) -> [Produto] in
                return Decoders.decode(clazz: [Produto].self, source: source)
            }
			// Decoder for Produto
            Decoders.addDecoder(clazz: Produto.self) { (source: AnyObject) -> Produto in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Produto()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                instance.status = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for [SMS]
            Decoders.addDecoder(clazz: [SMS].self) { (source: AnyObject) -> [SMS] in
                return Decoders.decode(clazz: [SMS].self, source: source)
            }
			// Decoder for SMS
            Decoders.addDecoder(clazz: SMS.self) { (source: AnyObject) -> SMS in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SMS()
                instance.nsu = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["nsu"])
                instance.idEmissor = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idEmissor"])
                instance.evento = SMS.Evento(rawValue: (sourceDictionary["evento"] as? String) ?? "") 
                instance.status = SMS.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.idPessoa = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idPessoa"])
                instance.idConta = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idConta"])
                instance.celular = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["celular"])
                instance.conteudo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["conteudo"])
                instance.dataAgendamento = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataAgendamento"])
                instance.quantidadeTentativasEnvio = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantidadeTentativasEnvio"])
                instance.dataInclusao = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataInclusao"])
                instance.dataAlteracaoStatus = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataAlteracaoStatus"])
                instance.protocolo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["protocolo"])
                return instance
            }
			

			// Decoder for [StatusCartao]
            Decoders.addDecoder(clazz: [StatusCartao].self) { (source: AnyObject) -> [StatusCartao] in
                return Decoders.decode(clazz: [StatusCartao].self, source: source)
            }
			// Decoder for StatusCartao
            Decoders.addDecoder(clazz: StatusCartao.self) { (source: AnyObject) -> StatusCartao in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StatusCartao()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                instance.flagCancelaCartao = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["flagCancelaCartao"])
                instance.flagCancelaNoDesbloqueio = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["flagCancelaNoDesbloqueio"])
                instance.idStatusDestinoDesbloqueio = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idStatusDestinoDesbloqueio"])
                instance.idStatusDestinoConta = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idStatusDestinoConta"])
                instance.flagCobraTarifa = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["flagCobraTarifa"])
                return instance
            }
			

			// Decoder for [StatusConta]
            Decoders.addDecoder(clazz: [StatusConta].self) { (source: AnyObject) -> [StatusConta] in
                return Decoders.decode(clazz: [StatusConta].self, source: source)
            }
			// Decoder for StatusConta
            Decoders.addDecoder(clazz: StatusConta.self) { (source: AnyObject) -> StatusConta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StatusConta()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                instance.flagAlteraLimite = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["flagAlteraLimite"])
                instance.mensagemConsultaNegada = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mensagemConsultaNegada"])
                return instance
            }
			

			// Decoder for [StatusImpressao]
            Decoders.addDecoder(clazz: [StatusImpressao].self) { (source: AnyObject) -> [StatusImpressao] in
                return Decoders.decode(clazz: [StatusImpressao].self, source: source)
            }
			// Decoder for StatusImpressao
            Decoders.addDecoder(clazz: StatusImpressao.self) { (source: AnyObject) -> StatusImpressao in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StatusImpressao()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                return instance
            }
			

			// Decoder for [Telefone]
            Decoders.addDecoder(clazz: [Telefone].self) { (source: AnyObject) -> [Telefone] in
                return Decoders.decode(clazz: [Telefone].self, source: source)
            }
			// Decoder for Telefone
            Decoders.addDecoder(clazz: Telefone.self) { (source: AnyObject) -> Telefone in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Telefone()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.idTipoTelefone = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idTipoTelefone"])
                instance.idPessoa = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["idPessoa"])
                instance.ddd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ddd"])
                instance.telefone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["telefone"])
                instance.ramal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ramal"])
                instance.status = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for [TipoEndereco]
            Decoders.addDecoder(clazz: [TipoEndereco].self) { (source: AnyObject) -> [TipoEndereco] in
                return Decoders.decode(clazz: [TipoEndereco].self, source: source)
            }
			// Decoder for TipoEndereco
            Decoders.addDecoder(clazz: TipoEndereco.self) { (source: AnyObject) -> TipoEndereco in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TipoEndereco()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                return instance
            }
			

			// Decoder for [TipoTelefone]
            Decoders.addDecoder(clazz: [TipoTelefone].self) { (source: AnyObject) -> [TipoTelefone] in
                return Decoders.decode(clazz: [TipoTelefone].self, source: source)
            }
			// Decoder for TipoTelefone
            Decoders.addDecoder(clazz: TipoTelefone.self) { (source: AnyObject) -> TipoTelefone in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TipoTelefone()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                return instance
            }
			

			// Decoder for [ValidaCartao]
            Decoders.addDecoder(clazz: [ValidaCartao].self) { (source: AnyObject) -> [ValidaCartao] in
                return Decoders.decode(clazz: [ValidaCartao].self, source: source)
            }
			// Decoder for ValidaCartao
            Decoders.addDecoder(clazz: ValidaCartao.self) { (source: AnyObject) -> ValidaCartao in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ValidaCartao()
                instance.statusCartao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["statusCartao"])
                instance.statusConta = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["statusConta"])
                instance.criptogramaResposta = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["criptogramaResposta"])
                return instance
            }
			

			// Decoder for [WebHook]
            Decoders.addDecoder(clazz: [WebHook].self) { (source: AnyObject) -> [WebHook] in
                return Decoders.decode(clazz: [WebHook].self, source: source)
            }
			// Decoder for WebHook
            Decoders.addDecoder(clazz: WebHook.self) { (source: AnyObject) -> WebHook in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WebHook()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.evento = WebHook.Evento(rawValue: (sourceDictionary["evento"] as? String) ?? "") 
                instance.metodo = WebHook.Metodo(rawValue: (sourceDictionary["metodo"] as? String) ?? "") 
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }
			
        }
    }
}
